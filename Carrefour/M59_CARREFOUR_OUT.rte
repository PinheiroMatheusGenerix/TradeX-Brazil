%@(#)  M59_CARREFOUR.rte     modif:15-01-2023
!==============================================================================
% File          : M59_CARREFOUR.rte   version 1.0.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : Richard - Generix BR
!==============================================================================
! 15-01-2023  XX  Creation / Copy
! 00-00-0000  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M59_CARREFOUR_OUT"
#include "include/generix_func.inc"
#include "include/GEEXM59.inc"
#include "include/GEEXM93.inc"

!===========================================================

! Initialization section

begin
	nPos := 1
	nRec := 1
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
    load(0, build(sHOME,"/config/CRF_wms_configuration.properties"), taPARAM)

    ! Parametros do TRACE
		nMessageID := cMessageID
		tPerfil := ""
		tSentido := "O"
		tMensagem := "M93"
	
	!Inicio do processo
		log("------------------------------------------------------------", NL)
		log("Inicio: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
		log("Arquivo de entrada: ", pEDISEND.ORIGINAL.NAME, NL)
		log("------------------------------------------------------------", NL)


	!Abertura do banco de dados - WMS
        tDbBase		:= "CRFWMS" 
        tDbUsername	:= taPARAM["WMSDBUSER"]
        tDbPassword	:= "GNXBR21"
        tDbUrl		:= taPARAM["WMSDBURL"]	

        bfSqlInit()

        if not bfSqlJdbc(tDbBase , tDbUsername, tDbPassword, tDbUrl) then
            bfSqlClose(tDbBase)
            bfSqlErro()
            exit(1)
        endif
endbegin

!===========================================================

line(1:"00.00")
    tCODACT := S_GEEX0000_CODACT
	tAmbiente := peel(S_GEEX0000_EMTEXC," ")
	tToInfologPrefixFilename := taPARAM[build("ToInfologPrefixFilename",substr(tAmbiente, 8, 3),"")]
    tPerfil := tToInfologPrefixFilename
endline

line(1:"59.20")
    tNUMSUP := S_GEEX5920_NUMSUP
    tCLILIV := S_GEEX5920_CLILIV
    tTYPSUP := S_GEEX5920_TYPSUP
    tETASUP := S_GEEX5920_ETASUP
    tTRTEXC := S_GEEX5920_TRTEXC
endline

! Default statements section
default

enddefault

!===========================================================

! End statements section
end
    ! Primeira validação
        log("------------------------------------------------------------", NL)
        log("EMTEXC: ",tAmbiente,NL)
        log("UL_C4.: ",tToInfologPrefixFilename,NL)
        log("CODACT: ",tCODACT,NL)
        log("NUMSUP: ",tNUMSUP, NL)
        log("CLILIV: ",tCLILIV, NL)
        log("TYPSUP: ",tTYPSUP, NL)
        log("ETASUP: ",tETASUP, NL)
        log("TRTEXC: ",tTRTEXC, NL)
        log("------------------------------------------------------------", NL)

        if not (tETASUP = "30" \
            and tTYPSUP = "1" \
            and tCLILIV = "MASSIFICATION") then
            bfSqlClose(tDbBase)
            log("------------------------------------------------------------", NL)
            log("Não gerar.", NL)
            log("------------------------------------------------------------", NL)
            exit(0)
        endif

	!Validando status da emcomenda
		tQuery := build("SELECT  DISTINCT DIGITS(CLE.NUMLIV) AS NUMLIV				", NL," "\
						"       ,DIGITS(CLE.SNULIV) AS SNULIV						", NL," "\
						"       ,TRIM(CLE.REFLIV) AS REFLIV							", NL," "\
						"       ,CLE.CUMLIG											", NL," "\
						"       ,CLE.CUMUVC											", NL," "\
						"       ,CLE.CUMCOL											", NL," "\
						"       ,CSD.INDMAS											", NL," "\
						"FROM ",tAmbiente,".GESUPD AS CSD							", NL," "\
						"JOIN ",tAmbiente,".GESUPE AS CSE							", NL," "\
						"ON CSD.NUMSUP = CSE.NUMSUP AND CSE.TYPSUP != '3'			", NL," "\
						"JOIN ",tAmbiente,".GELIVE AS CLE							", NL," "\
						"ON CSD.LIVNUM = CLE.NUMLIV AND CSD.LIVSNU = CLE.SNULIV		", NL," "\
						"WHERE SUBSTR(CLE.REFLIV,1,2) = 'EC' 						", NL," "\
						"AND CSD.INDMAS IN ('0', '1') 								", NL," "\
						"AND CSE.CODLDP != 'PCK'									", NL," "\
						"AND EXISTS ( SELECT  1 FROM ",tAmbiente,".GESUPD AS MSD	", NL," "\
						"WHERE 1 = 1												", NL," "\
						"AND MSD.NUMSUP IN (",tNUMSUP,") AND MSD.UVCLIV > 0 		", NL," "\
						"AND ((MSD.NUMMAS = CSD.NUMMAS AND MSD.SEQMAS = CSD.SEQMAS	", NL," "\
						"	AND MSD.CPTMAS = CSD.CPTMAS AND MSD.INDMAS != '0')		", NL," "\
						" OR 														", NL," "\
						"	  (MSD.NUMLIV = CSD.LIVNUM AND MSD.SNULIV = CSD.LIVSNU)	", NL," "\
						"	))														", NL," "\
						"ORDER BY 1, 2												")
		
		log("------------------------------------------------------------", NL)
		log(tQuery,NL)
		log("------------------------------------------------------------", NL)

		if not bfSqlSet(tDbBase, "SELECTdb2", tQuery) then
            bfSqlErro()
            exit(1)
		endif

		if not bfSqlOpen(tDbBase, "SELECTdb2") then
            bfSqlErro()
            exit(1)
		endif

		nContPED := 0

		while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
			nContPED++
			
			taNUMLIV[nContPED] := peel(taDb2Array["NUMLIV"]," ")
			taSNULIV[nContPED] := peel(taDb2Array["SNULIV"]," ")
			taREFLIV[nContPED] := peel(taDb2Array["REFLIV"]," ")
			taCUMLIG[nContPED] := peel(taDb2Array["CUMLIG"]," ")
			taCUMUVC[nContPED] := peel(taDb2Array["CUMUVC"]," ")
			taCUMCOL[nContPED] := peel(taDb2Array["CUMCOL"]," ")
			taINDMAS[nContPED] := peel(taDb2Array["INDMAS"]," ")
			log("Linha: ", nContPED, NL)
			log("CLIENTE NUMLIV: ", taNUMLIV[nContPED],NL)
			log("CLIENTE REFLIV: ", taREFLIV[nContPED],NL)
			log("CLIENTE CUMUVC: ", taCUMUVC[nContPED],NL)
			log("CLIENTE INDMAS: ", taINDMAS[nContPED],NL)
			log("------------------------------------------------------------", NL)
		    log("------------------------------------------------------------", NL)
			remove(taDb2Array)
		endwhile

    ! Resultado da SQL e gerando o M93
        if nContPED > 0 then
            while tIndex in taNUMLIV do
                log("Linha: ", tIndex, NL)
                log("CLIENTE NUMLIV: ", taNUMLIV[tIndex],NL)
                log("CLIENTE REFLIV: ", taREFLIV[tIndex],NL)
                log("CLIENTE CUMUVC: ", taCUMUVC[tIndex],NL)
                log("CLIENTE INDMAS: ", taINDMAS[tIndex],NL)

                if number(taCUMUVC[tIndex]) = 1 then
                    tQuery := build("SELECT  A.CODACT 												", NL," "\
                                    "       ,A.REFLIV 												", NL," "\
                                    "       ,DIGITS(A.NUMLIV) AS NUMLIV								", NL," "\
                                    "       ,DIGITS(A.SNULIV) AS SNULIV								", NL," "\
                                    "       ,A.CODCLI 												", NL," "\
                                    "       ,A.CUMLIG 												", NL," "\
                                    "       ,A.CODTRA 												", NL," "\
                                    "       ,COUNT(B.NUMSUP) AS VOLSUP 								", NL," "\
                                    "       ,CASE C.VARMSG WHEN 'PESADO' 							", NL," "\
                                    "			THEN 0 ELSE 1 END AS LIVPAC							", NL," "\
                                    "       ,COALESCE(D.IPMOUT1,'') AS CODIMP						", NL," "\
                                    "       ,COALESCE(D.IPMOUT2,'') AS CODZEB						", NL," "\
                                    "       ,E.CODPRO 												", NL," "\
                                    "       ,COALESCE(F.CODSER,'') AS CODSER						", NL," "\
                                    "       ,SUM(E.UVCLIV) AS UVCLIV								", NL," "\
                                    "       ,E.NUMSUP 												", NL," "\
                                    "FROM ",tAmbiente,".GELIVE 			AS A						", NL," "\
                                    "JOIN ",tAmbiente,".GESUPE 			AS B						", NL," "\
                                    "	ON A.NUMLIV = B.NUMLIV					 					", NL," "\
                                    "JOIN ",tAmbiente,".GESUPD 			AS E						", NL," "\
                                    "	ON B.NUMSUP = E.NUMSUP 										", NL," "\
                                    "	AND A.NUMLIV = E.NUMLIV 									", NL," "\
                                    " 	AND A.SNULIV = E.SNULIV 									", NL," "\
                                    "JOIN ",tAmbiente,".GEVAG  			AS C						", NL," "\
                                    "	ON A.NUMVAG = C.NUMVAG					 					", NL," "\
                                    "LEFT JOIN ",tAmbiente,".GEZATP 	AS D						", NL," "\
                                    "	ON B.ZONSTS = D.ZONATP AND B.ALLSTS = D.ALLATP				", NL," "\
                                    "LEFT JOIN ",tAmbiente,".GESERI 	AS F						", NL," "\
                                    "	ON E.REFLIV = F.REFLIV AND E.CODPRO = F.CODPRO 				", NL," "\
                                    "WHERE 1 = 1 													", NL," "\
                                    "AND B.CODLDP != 'PCK'											", NL," "\
                                    "AND A.NUMLIV='",taNUMLIV[tIndex],"' 							", NL," "\
                                    "GROUP BY  A.CODACT 											", NL," "\
                                    "         ,A.REFLIV 											", NL," "\
                                    "         ,A.NUMLIV 											", NL," "\
                                    "         ,A.SNULIV 											", NL," "\
                                    "         ,A.CODTRA 											", NL," "\
                                    "         ,C.VARMSG 											", NL," "\
                                    "         ,D.IPMOUT1											", NL," "\
                                    "         ,D.IPMOUT2											", NL," "\
                                    "         ,E.CODPRO 											", NL," "\
                                    "         ,E.NUMSUP 											", NL," "\
                                    "         ,F.CODSER 											", NL," "\
                                    "         ,A.CODCLI 											", NL," "\
                                    "         ,A.CUMLIG 											", NL," "\
                                    "ORDER BY A.REFLIV 												")

                    log("------------------------------------------------------------", NL)
                    log(tQuery,NL)
                    log("------------------------------------------------------------", NL)

                    if not bfSqlSet(tDbBase, "SELECTdb2", tQuery) then
                        bfSqlErro()
                        exit(1)
                    endif

                    if not bfSqlOpen(tDbBase, "SELECTdb2") then
                        bfSqlErro()
                        exit(1)
                    endif

                    nContQuery := 0

                    while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
                        nContQuery++

                        tREFLIV := peel(taDb2Array["REFLIV"]," ")
                        tCODIMP := peel(taDb2Array["CODIMP"]," ")
                        tCODTRA := peel(taDb2Array["CODTRA"]," ")
                        tVOLSUP := peel(taDb2Array["VOLSUP"]," ")
                        tLIVPAC := peel(taDb2Array["LIVPAC"]," ")
                        tCODZEB := peel(taDb2Array["CODZEB"]," ")
                        tNUMLIV := peel(taDb2Array["NUMLIV"]," ")
                        tSNULIV := peel(taDb2Array["SNULIV"]," ")
                        tCODCLI := peel(taDb2Array["CODCLI"]," ")
                        tCUMLIG := peel(taDb2Array["CUMLIG"]," ")

                        taNUMSUP[nContQuery] := peel(taDb2Array["NUMSUP"]," ")
                        taCODPRO[nContQuery] := peel(taDb2Array["CODPRO"]," ")
                        taUVCLIV[nContQuery] := peel(taDb2Array["UVCLIV"]," ")
                        taCODSER[nContQuery] := peel(taDb2Array["CODSER"]," ")

                        remove(taDb2Array)
                    endwhile

                    if not bfSqlFree(tDbBase, "SELECTdb2") then
                        bfSqlErro()
                        exit(1)
                    endif

                    if compare(tREFLIV, "") then
                        log(tREFLIV,NL)
                        exit(1)
                    endif

                    ! Criação do arquivo
                        tNameOut := build(tToInfologPrefixFilename,"M93",taREFLIV[tIndex],".DAT")
                        tFileOut := build(sHOME,"/ToInfolog/",tNameOut)
                        tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tNameOut)

                    nContLinhasEscritas := 0

                    ! ESCRITA 00.00
                    R_GEEX0000_CODEXC("00")
                    R_GEEX0000_SEPEXC(".")
                    R_GEEX0000_SCOEXC("00")
                    R_GEEX0000_TRTEXC("2")
                    R_GEEX0000_EMTEXC(tAmbiente)
                    R_GEEX0000_RCTEXC("TIBCO")
                    R_GEEX0000_DATEXC(time("now" ,"%Y%m%d"))
                    R_GEEX0000_HEUEXC(time("now" ,"%H%M%S"))
                    R_GEEX0000_NUMEXC("0000000")
                    R_GEEX0000_ACQEXC("0")
                    R_GEEX0000_VEREXC("5.00")
                    R_GEEX0000_NOMDTQ("M93")
                    R_GEEX0000_BIBDTQ(tAmbiente)
                    R_GEEX0000_IGLSIT("000")

                    flush(0,0,NL) >> tFileOutTemp
                    nContLinhasEscritas++

                    ! ESCRITA 9300
                    R_GEEX9300_CODEXC("93")
                    R_GEEX9300_SEPEXC(".")
                    R_GEEX9300_SCOEXC("00")
                    R_GEEX9300_TRTEXC("1")
                    R_GEEX9300_CODACT(tCODACT)
                    R_GEEX9300_REFLIV(tREFLIV)
                    R_GEEX9300_IGLSIT("000")
                    R_GEEX9300_CODIMP(tCODIMP)
                    R_GEEX9300_CODTRA(tCODTRA)
                    R_GEEX9300_VOLSUP(build(number(tVOLSUP):R06))
                    R_GEEX9300_LIVPAC(tLIVPAC)
                    R_GEEX9300_CODZEB(tCODZEB)

                    flush(0,0,NL) >> tFileOutTemp
                    nContLinhasEscritas++

                    !ESCRITA 9320
                    !Uma linha 93.20 para cada CODPRO por NUMSUP
                    nCountProd := 0

                    while nCountProd < nContQuery do
                        nCountProd++

                        R_GEEX9320_CODEXC("93")
                        R_GEEX9320_SEPEXC(".")
                        R_GEEX9320_SCOEXC("20")
                        R_GEEX9320_TRTEXC("1")
                        R_GEEX9320_CODACT(tCODACT)
                        R_GEEX9320_REFLIV(tREFLIV)
                        R_GEEX9320_CODPRO(taCODPRO[nCountProd])
                        R_GEEX9320_UVCLIV(build(number(taUVCLIV[nCountProd]):R09))

                        flush(0,0,NL) >> tFileOutTemp
                        nContLinhasEscritas++

                        if length(taCODSER[nCountProd]) > 0 then
                            !ESCRITA 9330
                            !Criar 93.30 quando houver CODSER
                            R_GEEX9330_CODEXC("93")
                            R_GEEX9330_SEPEXC(".")
                            R_GEEX9330_SCOEXC("30")
                            R_GEEX9330_TRTEXC("1")
                            R_GEEX9330_CODACT(tCODACT)
                            R_GEEX9330_REFLIV(tREFLIV)
                            R_GEEX9330_CODPRO(taCODPRO[nCountProd])
                            R_GEEX9330_CODSER(taCODSER[nCountProd])

                            flush(0,0,NL) >> tFileOutTemp
                            nContLinhasEscritas++
                        endif
                    endwhile

                    !ESCRITA 9399
                    R_GEEX9399_CODEXC("93")
                    R_GEEX9399_SEPEXC(".")
                    R_GEEX9399_SCOEXC("99")
                    R_GEEX9399_TRTEXC("10")
                    R_GEEX9399_NUMLIV(tNUMLIV)
                    R_GEEX9399_SNULIV(tSNULIV)
                    R_GEEX9399_CODACT(tCODACT)
                    R_GEEX9399_CODCLI(tCODCLI)
                    R_GEEX9399_REFLIV(tREFLIV)
                    R_GEEX9399_CUMLIG(build(number(tCUMLIG):R04))
                    R_GEEX9399_COLTOT(build(number(tVOLSUP):R09))

                    flush(0,0,NL) >> tFileOutTemp
                    nContLinhasEscritas++

                    !ESCRITA 9900
                    R_GEEX9900_CODEXC("99")
                    R_GEEX9900_SEPEXC(".")
                    R_GEEX9900_SCOEXC("00")
                    R_GEEX9900_DATEXC(time("now" ,"%Y%m%d"))
                    R_GEEX9900_HEUEXC(time("now" ,"%H%M%S"))
                    R_GEEX9900_NUMEXC("0000000")
                    R_GEEX9900_CPTEXC(build(nContLinhasEscritas))

                    flush(0,0,NL) >> tFileOutTemp

                    close(tFileOutTemp)

                    copy(tFileOutTemp,tFileOut)
                    close(tFileOutTemp)
                    remove(tFileOutTemp)
                    close(tFileOut)

                    bfMajtrace(	"Recebida" \
                                ,"0" \
                                ,tNumeroDocumento \
                                ,tDataDocumento \
                                ,tFileInput \
                                ,tFileOut \
                                ,tMensagem \
                                ,"" \
                            )

                    ! Enviar interface para o cliente
                    tCmd := build("edisend ToInfolog ", tFileOut)
                    log("executando o comando - ", tCmd, NL)
                    system(tCmd)
                else
                    bfSqlClose(tDbBase)
                    log("------------------------------------------------------------", NL)
                    log("CUMUVC <> 1. Não gerar.", NL)
                    log("------------------------------------------------------------", NL)
                    exit(0)
                endif
            endwhile
            
            bfSqlClose(tDbBase)
        endif

	log("------------------------------------------------------------", NL)
	log("Fim...: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
	log("------------------------------------------------------------", NL)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := tPerfil
	TRACE.SENTIDO := tSentido
	TRACE.MENSAGEM := tMensagem
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := time("now","%d.%m.%Y")
	TRACE.MESSAGEID := build(nMessageID:R06)
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	SYSLOG.REFERENCE := tREFLIV

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErro,NL) >> TRACE.Detail	   
		endif
	endif
	close(TRACE.Detail)
	close(SYSLOG.a)

	copy(SYSLOG.a,TRACE.In)
	close(SYSLOG.a)
	close(TRACE.In)
	flush(TRACE)

	if tError="0" then
		close(tFileOut)
		copy(tFileOut,TRACE.Out)
		close(tFileOut)
		close(TRACE.Out)
	endif

	flush(TRACE)
endfunction

!===========================================================

function bfSqlErro()
    print("FATAL: ",tfSqlErrorStr())
    bfMajtrace(	"Erro de Traducao" \
                ,"1" \
                ,tNumeroDocumento \
                ,tDataDocumento \
                ,tFileInput \
                ,tFileOut \
                ,tMensagem \
                ,build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))     
endfunction
