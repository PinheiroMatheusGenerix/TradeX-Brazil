%@(#)  source_filename.rte     modif:01-12-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 01-12-2017  XX  Creation
! 01-12-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M50_SYSLEY_ASCII_IN"
#include "include/generix_func.inc"
#include "include/NfVendaSYSLEY.inc"
#include "include/M50.inc"
!===========================================================

! Initialization section

begin
   !PROCESS_ERRONEOUS := TRUE
   nPos := 1
   nRec := 1
   SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))

   load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
   tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameDANA"]

   tDbBase			:= "FMWMS"
   tDbUsername		:= taPARAM["WMSDBUSER"]
   tDbPassword		:= taPARAM["WMSDBPASS"]
   tDbUrl			:= taPARAM["WMSDBURL"]

   nContadorLinhasEscritas  := 0
   nContadorHeader := 0
   nContadorItems := 0
   nMainIndex := 0
   tCODACT := "DAN"
endbegin

!===========================================================
line(1:"0")
	
endline

line(1:"1")
   tCODTLI := S_HeaderOrdemCarga_TipoOperacao
   tCODTRA := substr(S_HeaderOrdemCarga_CNPJTRANSPORTADORA,2,14)
   tCRILIV := S_HeaderOrdemCarga_OrdemCarga
endline

line(1:"2")
   nContadorHeader++
   
   taCODACTObtido[nContadorHeader] := tCODACT
   taCODTLI[nContadorHeader] := tCODTLI	
   taCODTRA[nContadorHeader] := tCODTRA	
   taREFLIV[nContadorHeader] := build(number(S_HeaderPedido_NumeroPedido ))
   taDTILIV[nContadorHeader] := S_HeaderPedido_DataPedido
   taNOMCLI[nContadorHeader] := S_HeaderPedido_Nome
   taAD1CLI[nContadorHeader] := substr(build(S_HeaderPedido_Endereco," ",S_HeaderPedido_NumeroEndereco," ",S_HeaderPedido_ComplementoEndereco),1,30)
   taAD2CLI[nContadorHeader] := substr(build(S_HeaderPedido_Endereco," ",S_HeaderPedido_NumeroEndereco," ",S_HeaderPedido_ComplementoEndereco),31,30)
   taVILCLI[nContadorHeader] := substr(build(S_HeaderPedido_Municipio," - ",S_HeaderPedido_Estado),1,26)
   taCODCLI[nContadorHeader] := substr(S_HeaderPedido_EmissorCNPJ,2,14)
   taCPICLI[nContadorHeader] := S_HeaderPedido_Cep
endline

line(1:"3")
   nContadorItems++

   taITEMS_ReferenciaHeaer[nContadorItems] := build(nContadorHeader)
   taNLILIV[nContadorItems] := substr(build(number(S_DetalhePedido_ItemdoPedido)), 1, 5)
   taCODPRO[nContadorItems] := S_DetalhePedido_Produto 
   taQTECDE[nContadorItems] := S_DetalhePedido_Quantidade
   taUNICDE[nContadorItems] := "UNI"
   taPRILIV[nContadorItems] := substr(S_DetalhePedido_ValorUnitario,12,8)
   taDIPLIV5021[nContadorItems] := S_DetalhePedido_InstrucaoEmbalagem
   taDeposito[nContadorItems] := S_DetalhePedido_Deposito
endline

line(1:"9")
   tCUMLIG := S_Trailler_TotalLinhas

   nMessageID := cMessageID
   tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
   tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
   ! tFileOut := build(sHOME,"/rte/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
   tNameOut := build(tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")

   nContadorHeaderTmp := 1

   while nContadorHeaderTmp <= nContadorHeader do
      if nContadorLinhasEscritas = 0 then
         R_0000HEADER_CODEXC("00")
         R_0000HEADER_SEPEXC(".")
         R_0000HEADER_SCOEXC("00")
         R_0000HEADER_TRTEXC("")
         R_0000HEADER_EMTEXC("FM") 
         R_0000HEADER_RCTEXC("")
         R_0000HEADER_DATEXC(time("now" ,"%Y%m%d"))
         R_0000HEADER_HEUEXC(time("now" ,"%H%M%S"))
         R_0000HEADER_NUMEXC("0000000")
         R_0000HEADER_ACQEXC("0")
         R_0000HEADER_VEREXC("5.00") 
         R_0000HEADER_NOMSYS("")  
         R_0000HEADER_NOMDTQ("M40")
         R_0000HEADER_BIBDTQ("")
         R_0000HEADER_LIBEXC(build(nMessageID:R010))
         R_0000HEADER_BIBDST("")
         R_0000HEADER_PGMDST("")
         R_0000HEADER_PARDST("")
         R_0000HEADER_CODACT("")
         R_0000HEADER_IGLSIT("")
         R_0000HEADER_EDISIT(build(number(tCentro_De_Custo)))
         R_0000HEADER_IMAEXC("")  
         
         flush(0,0,NL) >> tFileOutTemp  
         nContadorLinhasEscritas++
      endif
   
      R_5000ORDERHEADER_CODEXC("50")
      R_5000ORDERHEADER_SEPEXC(".")
      R_5000ORDERHEADER_SCOEXC("00")
      R_5000ORDERHEADER_CODACT(taCODACTObtido[nContadorHeaderTmp])
      R_5000ORDERHEADER_CODCLI(taCODCLI[nContadorHeaderTmp])  
      R_5000ORDERHEADER_REFLIV(taREFLIV[nContadorHeaderTmp])
      R_5000ORDERHEADER_DTILIV(tfConvertDate(taDTILIV[nContadorHeaderTmp], "DDMMYYYY" , "YYYYMMDD") )
      R_5000ORDERHEADER_CODTRA(taCODTRA[nContadorHeaderTmp])
      R_5000ORDERHEADER_CODTLI(taCODTLI[nContadorHeaderTmp])

      if taCODTLI[nContadorHeaderTmp] = "VD" then
         R_5000ORDERHEADER_CODMOP("STD")
      else
         R_5000ORDERHEADER_CODMOP(build("M",taCODTLI[nContadorHeaderTmp]))
      endif
   
      flush(0,0,NL) >> tFileOutTemp  
      nContadorLinhasEscritas++

      R_5010_CODEXC("50")
      R_5010_SEPEXC(".")
      R_5010_SCOEXC("10")
      R_5010_CODACT(taCODACTObtido[nContadorHeaderTmp])
      R_5010_NOMCLI(taNOMCLI[nContadorHeaderTmp])
      R_5010_AD1CLI(taAD1CLI[nContadorHeaderTmp])
      R_5010_AD2CLI(taAD2CLI[nContadorHeaderTmp])
      R_5010_VILCLI(taVILCLI[nContadorHeaderTmp])
      R_5010_CPICLI(taCPICLI[nContadorHeaderTmp])
      R_5010_CATCLI("STD")
      R_5010_CODCLI(taCODCLI[nContadorHeaderTmp]) 
      R_5010_REFLIV(taREFLIV[nContadorHeaderTmp])

      flush(0,0,NL) >> tFileOutTemp
      nContadorLinhasEscritas++

      nContadorLinhasEncomenda := 0      
      nContador := 8
      print("ve ",peel(taREGISTO[nContador+1],"\""),NL)
      nContadorTmpTOTAL := 1

      while nContadorTmpTOTAL <= nContadorItems do  
         if taITEMS_ReferenciaHeaer[nContadorTmpTOTAL] = build(nContadorHeaderTmp) then
            R_5020ORDERLINE_CODEXC("50")
            R_5020ORDERLINE_SEPEXC(".")
            R_5020ORDERLINE_SCOEXC("20")
            R_5020ORDERLINE_CODACT(taCODACTObtido[nContadorHeaderTmp])
            R_5020ORDERLINE_CODCLI(taCODCLI[nContadorHeaderTmp])
            R_5020ORDERLINE_NLILIV(build(number(taNLILIV[nContadorTmpTOTAL]):R05.0))
            R_5020ORDERLINE_CODPRO(taCODPRO[nContadorTmpTOTAL])
            R_5020ORDERLINE_UNICDE(taUNICDE[nContadorTmpTOTAL])
            nNumeroAuxTemp := number(substr(taQTECDE[nContadorTmpTOTAL],4,16)) / 1000
            R_5020ORDERLINE_UVCCDE(build(nNumeroAuxTemp:R09))
            R_5020ORDERLINE_REFLIV(taREFLIV[nContadorHeaderTmp])
            R_5020ORDERLINE_PRILIV(build(number(taPRILIV[nContadorTmpTOTAL]):R08.0))
            R_5020ORDERLINE_AIGPRI("1")
            R_5020ORDERLINE_IMMFRG(taDeposito[nContadorTmpTOTAL])
            
            flush(0,0,NL) >> tFileOutTemp
            nContadorLinhasEscritas++
			
            R_5021ORDERLINE_ADDINFO_CODEXC("50")
            R_5021ORDERLINE_ADDINFO_SEPEXC(".")
            R_5021ORDERLINE_ADDINFO_SCOEXC("21")
            R_5021ORDERLINE_ADDINFO_CODACT(taCODACTObtido[nContadorHeaderTmp])
            R_5021ORDERLINE_ADDINFO_CODCLI(taCODCLI[nContadorHeaderTmp])
            R_5021ORDERLINE_ADDINFO_REFLIV(taREFLIV[nContadorHeaderTmp])
            R_5021ORDERLINE_ADDINFO_NLILIV(build(number(taNLILIV[nContadorTmpTOTAL]):R05.0))
            R_5021ORDERLINE_ADDINFO_DIPLIV(taDIPLIV5021[nContadorTmpTOTAL])
                     
            flush(0,0,NL) >> tFileOutTemp
            nContadorLinhasEscritas++
            
            if length(taDeposito[nContadorTmpTOTAL]) > 0 then
               R_5025ORDERLINE_CODEXC("50")
               R_5025ORDERLINE_SEPEXC(".")
               R_5025ORDERLINE_SCOEXC("25")
               R_5025ORDERLINE_CODACT(taCODACTObtido[nContadorHeaderTmp])
               R_5025ORDERLINE_CODCLI(taCODCLI[nContadorHeaderTmp])
               R_5025ORDERLINE_REFLIV(taREFLIV[nContadorHeaderTmp])
               R_5025ORDERLINE_NLILIV(build(number(taNLILIV[nContadorTmpTOTAL]):R05.0))
               R_5025ORDERLINE_CODRUB("DEPO") 
               R_5025ORDERLINE_VALRUB(taDeposito[nContadorTmpTOTAL])
               flush(0,0,NL) >> tFileOutTemp 
               nContadorLinhasEscritas++
            endif
   		endif
         nContadorLinhasEncomenda++
         nContadorTmpTOTAL++
      endwhile
    
      R_5099ORDERFOOTER_CODEXC("50")
      R_5099ORDERFOOTER_SEPEXC(".")
      R_5099ORDERFOOTER_SCOEXC("99")
      R_5099ORDERFOOTER_CUMLIG(build(nContadorLinhasEncomenda))
      R_5099ORDERFOOTER_CODACT(taCODACTObtido[nContadorHeaderTmp])
      R_5099ORDERFOOTER_CODCLI(taCODCLI[nContadorHeaderTmp])
      R_5099ORDERFOOTER_REFLIV(taREFLIV[nContadorHeaderTmp])

      flush(0,0,NL) >> tFileOutTemp
      nContadorLinhasEscritas++

      bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
      nContadorHeaderTmp++
   endwhile
   
   R_9900FILEFOOTER_CODEXC("99")
   R_9900FILEFOOTER_SEPEXC(".")
   R_9900FILEFOOTER_SCOEXC("00")
   R_9900FILEFOOTER_TRTEXC("")
   R_9900FILEFOOTER_EMTEXC("FM")
   R_9900FILEFOOTER_RCTEXC("")
   R_9900FILEFOOTER_DATEXC(time("now" ,"%Y%m%d"))
   R_9900FILEFOOTER_HEUEXC(time("now" ,"H%M%S"))
   R_9900FILEFOOTER_NUMEXC("")
   tContadorLinhasEscritas := build(nContadorLinhasEscritas)
   R_9900FILEFOOTER_CPTEXC(build(number(tContadorLinhasEscritas):R08.0))

   flush(0,0,NL)  >> tFileOutTemp
   close(tFileOutTemp)

   copy(tFileOutTemp,tFileOut)
   close(tFileOutTemp)
   remove(tFileOutTemp)
   close(tFileOut)
endline

! Default statements section
default

enddefault

!===========================================================

! End statements section

end
   exit(0)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento
   TRACE.PERFIL := "DANA"
   TRACE.SENTIDO := "I"
   TRACE.MENSAGEM := "PEDIDO"
   TRACE.NUMDOC := taREFLIV[nContadorHeaderTmp] 
   TRACE.DATDOC := tfConvertDate(substr(taDTILIV[nContadorHeaderTmp],1,8), "DDMMYYYY" , "YYYYMMDD") 
   TRACE.MESSAGEID := build(nMessageID:R010)   
   TRACE.REDE := pEDISEND.ORIGINAL.NAME
   TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
   TRACE.FICHEIROSAIDA := tNameOut
   TRACE.LIBEXC := tLIBEXC

   if tStatus = "Recebida" then
      print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
      print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
      print("Traduzida com Sucesso",NL) >> TRACE.Detail
   else
      if tStatus = "Erro de Traducao" then
         print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
         print("Erro de Traducao",NL) >> TRACE.Detail
         print(tMensagemErrro,NL) >> TRACE.Detail
      endif
   endif

   close(TRACE.Detail)

   if nMainIndex = 0 then
      close(SYSLOG.a)
      copy(SYSLOG.a,TRACE.In)
      close(SYSLOG.a)
      close(TRACE.In)

      nMainIndex := TRACE.INDEX
   else
      tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
      system(tCmd)
   endif

   if tError="0" then
      close(tFileOutTemp)
      copy(tFileOutTemp,TRACE.Out)
      close(tFileOutTemp)
      close(TRACE.Out)
   endif

   flush(TRACE)
endfunction
