%@(#)  M90_VEJA_XML.rte     modif:26/12/2023
!==============================================================================
% File          : M90_VEJA_XML.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 26/12/2023  XX  Creation
! 26/12/2023  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

! Message definition
message "XML/FMBrasil/VEJA/VEJA_M90.dtd" building

base "../trace/trace.cfg" TRACE
#define TX_PROG_INFO "M90_VEJA_XML"
#include "include/generix_func.inc"
#include "include/GEEXM90.inc"


!===========================================================

! Initialization section

begin
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	nMainIndex := 0
	PROCESS_ERRONEOUS := TRUE
	nMessageID := cMessageID

	pXML.INCONVIN := "UTF-8"
	pXML.INCOVIN := "UTF-8"
	pXML.ENCODING := "UTF-8"

	nPos := 1
	nRec := 1 

	log("------------------------------------------------------------", NL)
	log("Inicio: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
	log("------------------------------------------------------------", NL)

	load(0,build(sHOME, "/config/FM_wms_configuration.properties"), taPARAM)
	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameSA8"]

	tDbBase		:= "FMWMS"
	tDbUsername	:= taPARAM["WMSDBUSER"]
	tDbPassword	:= taPARAM["WMSDBPASS"]
	tDbUrl		:= taPARAM["WMSDBURL"]

    bfSqlInit()
	if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase)
		bfMajtrace("Erro de Traducao", \
                    "1", \
                    "M97", \
                    time("now","%Y-%m-%d"), \
                    tFileOut, \
                    build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif
endbegin

!===========================================================

line(1:"00.00")
    tDATEXC := S_GEEX0000_DATEXC
    tHEUEXC := S_GEEX0000_HEUEXC
endline

! Default statements section
default

enddefault

!===========================================================

! End statements section

end
	tFileOut := build(sHOME,"/mdn/auto/FM",tToInfologPrefixFilename,"VEJ_Inventory_",time("now" ,"%Y%m%d%H%M%S"),".xml")
    tFileOutTemp := build(sHOME,"/mdn/auto/Temp/FM",tToInfologPrefixFilename,"VEJ_Inventory_",time("now" ,"%Y%m%d%H%M%S"),".xml")
    tNameOut := build("FM",tToInfologPrefixFilename,"VEJ_Inventory_",time("now" ,"%Y%m%d%H%M%S"),".xml")

    ! QUERY bfWriteHeader, bfWriteBody
        tQuery := build("SELECT  ROW_NUMBER() OVER( ORDER BY  1 )                AS LINHA", NL," "\
                        "       ,AT.EDIACT                                       AS WHAREHOUSE", NL," "\
                        "       ,PL.CODPRO                                       AS BARCODE_SKU", NL," "\
                        "       ,PR.EDIPRO                                       AS BARCODE_EAN", NL," "\
                        "       ,PR.DS1PRO || PR.DS2PRO                          AS ITEM_DESCRIPTION", NL," "\
                        "       ,PR.DS3PRO                                       AS COLOR_DESCRIPTION", NL," "\
                        "       ,PR.ANAPRO                                       AS SIZE_CODE", NL," "\
                        "       ,CASE PL.MOTIMM", NL," "\
                        "            WHEN ''", NL," "\
                        "            THEN 'Q1'", NL," "\
                        "            ELSE LEFT(ZI.CODSAP1,2)", NL," "\
                        "            END || LEFT(PL.CODCLI,2)                    AS SLOT", NL," "\
                        "       ,SUM(PL.UVCSTO)                                  AS QUANTITY", NL," "\
                        "       ,PR.PRXPRO1                                      AS UNIT_PRICE", NL," "\
                        "       ,PR.PRXPRO2                                      AS RETAIL_PRICE", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GEPAL AS PL", NL," "\
                        "JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO AS PR", NL," "\
                        "ON PR.CODACT = PL.CODACT", NL," "\
                        "    AND PR.CODPRO = PL.CODPRO", NL," "\
                        "JOIN FGE50FM",tToInfologPrefixFilename,".GEACT AS AT", NL," "\
                        "ON AT.CODACT = PL.CODACT", NL," "\
                        "LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEZIMO AS ZI", NL," "\
                        "ON PL.MOTIMM = ZI.MOTIMM", NL," "\
                        "WHERE PR.CODACT = 'VEJ'", NL," "\
                        "AND PL.CODCLI <> ''", NL," "\
                        "GROUP BY  AT.EDIACT", NL," "\
                        "         ,PL.CODPRO", NL," "\
                        "         ,PR.EDIPRO", NL," "\
                        "         ,PR.DS1PRO", NL," "\
                        "         ,PR.DS2PRO", NL," "\
                        "         ,PR.DS3PRO", NL," "\
                        "         ,PR.ANAPRO", NL," "\
                        "         ,PR.PRXPRO1", NL," "\
                        "         ,PR.PRXPRO2", NL," "\
                        "         ,CASE PL.MOTIMM", NL," "\
                        "            WHEN ''", NL," "\
                        "            THEN 'Q1'", NL," "\
                        "            ELSE LEFT(ZI.CODSAP1,2)", NL," "\
                        "            END || LEFT(PL.CODCLI,2)", NL," "\
                        "ORDER BY  LINHA DESC")

        log("------------------------------------------------------------", NL)
        log(tQuery,NL)
        log("------------------------------------------------------------", NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao",\
                        "1",\
                        "M90",\
                        time("now","%Y-%m-%d"),\
                        tFileOut, \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)					
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao",\
                        "1",\
                        "M90",\
                        time("now","%Y-%m-%d"),\
                        tFileOut, \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        bWriteHeader := FALSE
        nCountLineQuery := 0
        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
            if bWriteHeader = FALSE then
                bWriteHeader := TRUE
                bfWriteHeader(tDATEXC, \
                                tHEUEXC, \
                                peel(taDb2Array["LINHA"], " "), \
                                peel(taDb2Array["WHAREHOUSE"], " "))
            endif

            bfWriteBody(peel(taDb2Array["BARCODE_SKU"], " "), \
                            peel(taDb2Array["BARCODE_EAN"], " "), \
                            peel(taDb2Array["ITEM_DESCRIPTION"], " "), \
                            peel(taDb2Array["SIZE_CODE"], " "), \
                            peel(taDb2Array["COLOR_DESCRIPTION"], " "), \
                            peel(taDb2Array["UNIT_PRICE"], " "), \
                            peel(taDb2Array["RETAIL_PRICE"], " "), \
                            peel(taDb2Array["QUANTITY"], " "), \
                            peel(taDb2Array["SLOT"], " "))
            
            nCountLineQuery++
            remove(taDb2Array)
        endwhile

        if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao",\
                        "1",\
                        "M90",\
                        time("now","%Y-%m-%d"),\
                        tFileOut, \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif
    ! FIM QUERY bfWriteHeader, bfWriteBody

	print(MESSAGE) >> tFileOutTemp

    close(tFileOutTemp)
	copy(tFileOutTemp,tFileOut)
	close(tFileOutTemp)
	remove(tFileOutTemp)
	close(tFileOut)

    bfMajtrace("Recebida", \
                "0", \
                "M90", \
                time("now","%Y-%m-%d"), \
                tFileOut, \
                "")
    
    ! Enviar interface para o cliente
	tCmd := build("edisend SEND_TO_FMBR ", tFileOut)
	log("executando o comando - ", tCmd, NL)
	system(tCmd)

    bfSqlClose(tDbBase)

	log("------------------------------------------------------------", NL)
	log("Fim...: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
	log("------------------------------------------------------------", NL)
endend

!===========================================================

function bfWriteHeader(tDATEXC_FUNC, tHEUEXC_FUNC, tLINHA_FUNC, tWHAREHOUSE_FUNC)
    segment STransactionType gGinventory,gGinventory_header
        eETransactionType := "846"
    endsegment

    segment STransactionReferenceNumber gGinventory,gGinventory_header
        eETransactionReferenceNumber := build(tDATEXC_FUNC, tHEUEXC_FUNC)
    endsegment

    segment SMessageCount gGinventory,gGinventory_header
        eEMessageCount := tLINHA_FUNC
    endsegment

    segment Swarehouse gGinventory,gGinventory_header
        eEwarehouse := tWHAREHOUSE_FUNC
    endsegment
endfunction

!===========================================================

function bfWriteBody(tBARCODE_SKU_FUNC, tBARCODE_EAN_FUNC, tITEM_DESCRIPTION_FUNC, tSIZE_CODE_FUNC, tCOLOR_DESCRIPTION_FUNC, tUNIT_PRICE_FUNC, tRETAIL_PRICE_FUNC, tQUANTITY_FUNC, tSLOT_FUNC)
    segment Sbarcode_sku gGinventory,gGInventory_body,gGitem
        eEbarcode_sku := tBARCODE_SKU_FUNC
    endsegment

    segment Sbarcode_ean gGinventory,gGInventory_body,gGitem
        if length(tBARCODE_EAN_FUNC) > 0 then
            eEbarcode_ean := tBARCODE_EAN_FUNC
        else
            eEbarcode_ean := " "
        endif
    endsegment

    segment Sitem_description gGinventory,gGInventory_body,gGitem
        eEitem_description := tITEM_DESCRIPTION_FUNC
    endsegment

    segment Ssize_code gGinventory,gGInventory_body,gGitem
        if length(tSIZE_CODE_FUNC) > 0 then 
            eEsize_code := tSIZE_CODE_FUNC
        else
            eEsize_code := " "
        endif
    endsegment

    segment Scolor_description gGinventory,gGInventory_body,gGitem
        eEcolor_description := tCOLOR_DESCRIPTION_FUNC
        if length(tCOLOR_DESCRIPTION_FUNC) > 0 then 
            eEcolor_description := tCOLOR_DESCRIPTION_FUNC
        else
            eEcolor_description := " "
        endif
    endsegment

    segment Sunit_price gGinventory,gGInventory_body,gGitem
        eEunit_price := tUNIT_PRICE_FUNC
    endsegment

    segment Sretail_price gGinventory,gGInventory_body,gGitem
        eEretail_price := tRETAIL_PRICE_FUNC
    endsegment

    segment Squantity gGinventory,gGInventory_body,gGitem
        eEquantity := tQUANTITY_FUNC
    endsegment

    segment Sslot gGinventory,gGInventory_body,gGitem
        eEslot := tSLOT_FUNC
    endsegment
endfunction

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tFileOut,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := "VEJA"
	TRACE.MENSAGEM := "M90"
	TRACE.SENTIDO := "O"
	TRACE.NUMDOC := tNumDoc
	TRACE.DATDOC := tDataDoc
	TRACE.MESSAGEID := build(nMessageID)   
	if TRACE.REDE <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.FICHEIROSAIDA := tNameOut
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)

	SYSLOG.REFERENCE := build(nMessageID)

	if tStatus = "Recebida" then
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if substr(tStatus,1,13) = "Erro de Tradu" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)
	close(SYSLOG.a)

	copy(SYSLOG.a,TRACE.In)
	close(SYSLOG.a)
	close(TRACE.In)

	close(tFileOut)
	copy(tFileOut,TRACE.Out)
	close(tFileOut)
	close(TRACE.Out)
endfunction
