%@(#)  source_filename.rte     modif:01-12-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 01-12-2017  XX  Creation
! 01-12-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off


!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M40_MAKRO_ASCII_IN"
#include "include/generix_func.inc"
#include "include/M40COM.inc"
#include "include/M40.inc"
!===========================================================

! Initialization section

begin
   !PROCESS_ERRONEOUS := TRUE
   nPos := 1
    nRec := 1
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
    nMessageID := cMessageID
    
    
    
 load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)

        tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameMAKRO"]

  tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
  tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
  !tFileOut := build(sHOME,"/rte/",tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
  tNameOut := build(tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
    

	
	tFicheiroAVerificar := build(sHOME,"/FromMakro/Verifica",SYSLOG.INDEX,".txt")
	tFicheiroAVerificarV2 := build(sHOME,"/FromMakro/Verifica",SYSLOG.INDEX,".txt.v2")
	tFicheiroAVerificarHash := build(sHOME,"/FromMakro/Verifica",SYSLOG.INDEX,".txt.hash")
	close(SYSLOG.a)
	copy(SYSLOG.a,tFicheiroAVerificar)
	close(SYSLOG.a)
	close(tFicheiroAVerificar)
	close(tFicheiroAVerificarV2)
	nContadorWhile := 0
	bTerminaLerFicheiroHash := FALSE
	tLinhaLida := read(tFicheiroAVerificar)
    while tLinhaLida<>EOF do
		nContadorWhile++
		if bTerminaLerFicheiroHash = FALSE then
			if substr(tLinhaLida,1,1) = "*" and nContadorWhile > 1 then
				print(substr(tLinhaLida,1,10)) >> tFicheiroAVerificarV2
				tHashLida := substr(tLinhaLida,18,(length(tLinhaLida)-18))
				bTerminaLerFicheiroHash := TRUE
			else
				print(tLinhaLida,NL) >> tFicheiroAVerificarV2
			endif
		endif
		tLinhaLida := read(tFicheiroAVerificar)
	endwhile
	close(tFicheiroAVerificar)
	close(tFicheiroAVerificarV2)
	
	tCmdHASH := build("CRC32_v2 ",tFicheiroAVerificarV2," >> ",tFicheiroAVerificarHash) 
	close(tFicheiroAVerificarV2)
	log("executing command ",tCmdHASH,NL)
	nRet := system(tCmdHASH)

	log("nRet ", nRet,NL)
	close(tFicheiroAVerificarHash)
	close(tFicheiroAVerificarV2)
	

	tFileHash := tolower(read(tFicheiroAVerificarHash))	
	close(tFicheiroAVerificarHash)
	
	
	
	remove(tFicheiroAVerificarHash)
	remove(tFicheiroAVerificarV2)
	
	if tFileHash = tHashLida then
		log("chave verificada com sucesso ",NL)
		log("Hash Lida no arquivo ",tHashLida,NL)
		log("Hash calcula ",tFileHash,NL)
		tNomeArquivoDevolverFTPMakro := build(sHOME,"/ToAS2Proxy/FM",tToInfologPrefixFilename,"OKMA",pEDISEND.ORIGINAL.NAME)
		copy(tFicheiroAVerificar,tNomeArquivoDevolverFTPMakro)
		close(tFicheiroAVerificar)
		close(tNomeArquivoDevolverFTPMakro)
		remove(tFicheiroAVerificar)
	else
		log("chave verificada com erro ",NL)
		log("Hash Lida no arquivo ",tHashLida,NL)
		log("Hash calculada ",tFileHash,NL)
		tNomeArquivoDevolverFTPMakro := build(sHOME,"/ToAS2Proxy/FM",tToInfologPrefixFilename,"OKMA",pEDISEND.ORIGINAL.NAME)
		!tNomeArquivoDevolverFTPMakro := build(sHOME,"/ToAS2Proxy/FM",tToInfologPrefixFilename,"KOMA",pEDISEND.ORIGINAL.NAME)
		copy(tFicheiroAVerificar,tNomeArquivoDevolverFTPMakro)
		close(tFicheiroAVerificar)
		close(tNomeArquivoDevolverFTPMakro)
		remove(tFicheiroAVerificar)
		
		
				tArquivoEmailErro := build(sHOME,"/EmailsAEnviar/Erro",nMessageID:R010,".txt")
		print("Erro ao ler o CRC32 do arquivo ",pEDISEND.ORIGINAL.NAME,"!",NL,NL,"Hash lida no arquivo ",tHashLida,NL,"Diferente da hash calculada ",tFileHash,NL,NL,NL,NL) >> tArquivoEmailErro
		close(tArquivoEmailErro)
			tSubjectEmail := build("[MBS]_Erro_de_CRC32_no_arquivo_",pEDISEND.ORIGINAL.NAME)
		tCmdEmailErro := build("edisend EMAIL.SUBJECT=\"",tSubjectEmail,"\" EmailErroCRC32Ma ",tArquivoEmailErro)
			log("executing command ",tCmdEmailErro,NL)
			nRet := system(tCmdEmailErro)

				log("nRet ", nRet,NL)
				close(tArquivoEmailErro)
		remove(tArquivoEmailErro)
		
		
		
		 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na verificacao da HASH. Hash lida: ",tHashLida," Hash calculada: ",tFileHash))
		 exit(1)
	endif
	

	
    tCODACTConst := "001"
    nContadorLinhasEscritas  := 0
	nMainIndex := 0
endbegin

!===========================================================


line(1:"0")
tDIPREC := S_CABArq_CNPJ_Depositante
endline

line(1:"1")
   tEDIFOU := build(substr(S_CabDoc_Fornecedor,2,length(S_CabDoc_Fornecedor)-1))
   tNotaFiscal_Numero := S_CabDoc_NotaFiscal_Numero
   tNotaFiscal_Serie := S_CabDoc_NotaFiscal_Serie
   tSubSerieNotaFiscal := S_CabDoc_SubSerieNotaFiscal
   tDTIREC := S_CabDoc_NotaFiscal_DatadeEmissao
   tNaturezadeOperacao_CFOP := S_CabDoc_NaturezadeOperacao_CFOP
   
     tTipodeNF := S_CabDoc_TipodeNF
     tREFREC := build(S_CabDoc_ProtocoloNFE,"/",S_CabDoc_NotaFiscal_Numero,"/",S_CabDoc_NotaFiscal_Serie)
     tDataHoraProtocoloNFE := S_CabDoc_DataHoraProtocoloNFE
     
     !Concatenar "NF: 'Nota Fiscal - Número' / S: 'Nota Fiscal - Série' / SubS: 'Sub Serie Nota Fiscal' / CFOP: 'Natureza de Operação (CFOP)'
     tMSGREC := build("PNF:",S_CabDoc_ProtocoloNFE,"/NF:",tNotaFiscal_Numero,"/S:",tNotaFiscal_Serie)! / SS: ",tSubSerieNotaFiscal) !" / CFOP: ",tNaturezadeOperacao_CFOP)
     if tTipodeNF = "N" then
        tCODTRE := "STD"
		!tCODLDR := "STD"
		 
     endif
     if tTipodeNF = "D" then
        tCODTRE := "DEV"
		!tCODLDR := "DEV"
     endif

   nNumeroLinha := 0
endline

line(1:"2")
nNumeroLinha++
   taNLIREC[nNumeroLinha] := S_ItemsDoc_SequenciadoItem
   taCODPRO[nNumeroLinha] := S_ItemsDoc_CodigodoProduto
   taUNICDE[nNumeroLinha] := S_ItemsDoc_UnidadedeMedida 
   taUVCREA[nNumeroLinha] := S_ItemsDoc_Quantidade
   
endline

line(1:"9")
   tCUMLIG := S_FinalizadorDoc_NotaFiscal_QuantidadedeItens
   
   
  if nContadorLinhasEscritas = 0 then
  if length(pEDISEND.ORIGINAL.NAME) >= 36 then
	tLIBEXC := build(substr(pEDISEND.ORIGINAL.NAME,7,6),".",substr(pEDISEND.ORIGINAL.NAME,23,14))
	else
	tLIBEXC := build(nMessageID:R010)
	endif
     R_00HEADER_CODEXC("00")
     R_00HEADER_SEPEXC(".")
     R_00HEADER_SCOEXC("00")
     R_00HEADER_TRTEXC("")
     R_00HEADER_EMTEXC("FM") 
     R_00HEADER_RCTEXC("")
     R_00HEADER_DATEXC(time("now" ,"%Y%m%d"))
     R_00HEADER_HEUEXC(time("now" ,"%H%M%S"))
     R_00HEADER_NUMEXC("0000000")
     R_00HEADER_ACQEXC("0")
     R_00HEADER_VEREXC("5.00") 
     R_00HEADER_NOMSYS("")  
     R_00HEADER_NOMDTQ("M40")
     R_00HEADER_BIBDTQ("")
     R_00HEADER_LIBEXC(tLIBEXC) !(build(nMessageID:R010))
     R_00HEADER_BIBDST("")
     R_00HEADER_PGMDST("")
     R_00HEADER_PARDST("")
     R_00HEADER_CODACT("")
     R_00HEADER_IGLSIT("")
     R_00HEADER_EDISIT(build(number(tCentro_De_Custo)))
     R_00HEADER_IMAEXC("")  
     R_00HEADER_DISEXC("")
     
     flush(0,0,NL) >> tFileOutTemp   !ESCRITA DO HEADER M00.00
     nContadorLinhasEscritas++
   endif



   R_40HEADER_CODEXC("40")
   R_40HEADER_SEPEXC(".")
   R_40HEADER_SCOEXC("00")
   
   R_40HEADER_REFREC(tREFREC )
   R_40HEADER_CODTRE(tCODTRE )
   R_40HEADER_CODLDR(tCODLDR)
   R_40HEADER_EDIFOU(tEDIFOU )
   R_40HEADER_CODFOU(tEDIFOU )
R_40HEADER_CODACT(tCODACTConst )
R_40HEADER_DTIREC(tfConvertDate(tDTIREC, "DDMMYYYY" , "YYYYMMDD")) !(tfConvertDate(tDataHoraProtocoloNFE , "YYYY-MM-DDTHH:MM:SS" , "YYYYMMDD"))
!R_40HEADER_HEIREC(tfConvertDate(tDataHoraProtocoloNFE , "YYYY-MM-DDTHH:MM:SS" , "HHMMSS"))
R_40HEADER_MSGREC(tMSGREC)
    flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
nContadorLinhasEscritas++


   R_40_01ORDHEADER_CODEXC("40")
   R_40_01ORDHEADER_SEPEXC(".")
   R_40_01ORDHEADER_SCOEXC("01")
   
   R_40_01ORDHEADER_REFREC(tREFREC )
!R_40_01ORDHEADER_CODACT(tCODACTConst )
R_40_01ORDHEADER_DIPREC(tDIPREC)

    flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
nContadorLinhasEscritas++

      nContadorLinhasEncomenda := 0
      
      
         nContador := 8
         print("ve ",peel(taREGISTO[nContador+1],"\""),NL)

nContadorTmpTOTAL := 1
!tNumeroTotalProdutosPLUS
print("tNumeroTotalProdutosPLUS ",tNumeroTotalProdutosPLUS,NL)
!   while length(peel(taREGISTO[nContador+1],"\"")) > 0 then
 while nContadorTmpTOTAL <= nNumeroLinha do  
      ! fazer aqui um while e validar
   R_40_20M40_CODEXC("40")
   R_40_20M40_SEPEXC(".")
   R_40_20M40_SCOEXC("20")
   R_40_20M40_CODACT(tCODACTConst )

   R_40_20M40_REFREC(tREFREC )
   R_40_20M40_CODPRO(taCODPRO[nContadorTmpTOTAL ])
   
  R_40_20M40_NLIREC(build(number(taNLIREC[nContadorTmpTOTAL ]):R05)) 
  R_40_20M40_UNICDE(taUNICDE[nContadorTmpTOTAL] )
  if taUNICDE[nContadorTmpTOTAL] = "PT" then
	tCont:= build(number(taUVCREA[nContadorTmpTOTAL ]) * 1000)
	R_40_20M40_UVCREA(build(number(tCont):R09.0))
  else
  	tCont:= taUVCREA[nContadorTmpTOTAL ]
	R_40_20M40_UVCREA(build(number(tCont):R09.0))
  endif
!R_40_20M40_CODCLI("5457")   

 flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
nContadorLinhasEscritas++


/*
R_40_21M40_CODEXC("40")
   R_40_21M40_SEPEXC(".")
   R_40_21M40_SCOEXC("21")
  ! R_40_21M40_CODACT("ELG")

   R_40_21M40_REFREC(tREFREC )
R_40_21M40_EDICLI(tCentroDeCusto)
R_40_20M40_NLIREC(build(nContadorTmpTOTAL:R05))
 flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00

nContadorLinhasEscritas++
*/

   
   
   nContadorLinhasEncomenda++
   nContadorTmpTOTAL++
   endwhile


    
    
    
    R_40_99TRAILLER_CODEXC("40")
   R_40_99TRAILLER_SEPEXC(".")
   R_40_99TRAILLER_SCOEXC("99")
  ! R_40_99TRAILLER_CODACT("ELG")

   R_40_99TRAILLER_REFREC(tREFREC )
   R_40_99TRAILLER_CUMLIG(build(number(tCUMLIG) :R04.0)) !ver conversao e  por erro!!!!!
    flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
   nContadorLinhasEscritas++
   
   bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
   
   
endline

! Default statements section
default

enddefault

!===========================================================

! End statements section

end


!bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
    R_TRAILLER_CODEXC("99")
    R_TRAILLER_SEPEXC(".")
    R_TRAILLER_SCOEXC("00")
    R_TRAILLER_TRTEXC("")
    R_TRAILLER_EMTEXC("FM")
    R_TRAILLER_RCTEXC("")
    R_TRAILLER_DATEXC(time("now" ,"%Y%m%d"))
    R_TRAILLER_HEUEXC(time("now" ,"H%M%S"))
    R_TRAILLER_NUMEXC("")
    tContadorLinhasEscritas := build(nContadorLinhasEscritas)
    !print(tContadorLinhasEscritas) > "c:/influe/tContadorLinhasEscritas.txt"
    R_TRAILLER_CPTEXC(build(number(tContadorLinhasEscritas):R08.0)) !VER NUMERO DE REGISTOS EXEPTO HEADER E TRAILLER
    !R_TRAILLER_NOMSYS("")
    !R_TRAILLER_NOMDTQ("")
    !R_TRAILLER_BIBDTQ("")
    !R_TRAILLER_IDEMSG("")
    !R_TRAILLER_DISEXC("")

    flush(0,0,NL)  >> tFileOutTemp
    close(tFileOutTemp)

copy(tFileOutTemp,tFileOut)
    close(tFileOutTemp)
	remove(tFileOutTemp)
	    close(tFileOut)

exit(0)

endend


!===========================================================


!===========================================================



function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento

   TRACE.PERFIL := "MAKRO"
   TRACE.SENTIDO := "I"
   TRACE.MENSAGEM := "RECEBIMENTO E DEVOLUCAO"
   TRACE.NUMDOC := tREFREC 
   TRACE.DATDOC := tfConvertDate(tDTIREC, "DDMMYYYY" , "YYYY-MM-DD") 
   TRACE.MESSAGEID := build(nMessageID:R010)   

    TRACE.REDE := pEDISEND.ORIGINAL.NAME
!0AOCD_m40com.str00092.20180102164520.txt

  TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOut
  TRACE.LIBEXC := tLIBEXC

   if tStatus = "Recebida" then
    print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
    print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
    print("Traduzida com Sucesso",NL) >> TRACE.Detail
  
  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail
        endif
  endif
close(TRACE.Detail)


if nMainIndex = 0 then
close(SYSLOG.a)
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)

 
	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif





if tError="0" then
close(tFileOutTemp)
copy(tFileOutTemp,TRACE.Out)
close(tFileOutTemp)
close(TRACE.Out)
endif


flush(TRACE)
endfunction

