%@(#)  source_filename.rte     modif:21-11-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 21-11-2017  XX  Creation
! 21-11-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

! Message definition
schema "XML/FMBrasil/NFE/procNFe_v4.00.xsd" validating
message "XML/FMBrasil/nfeProc.dtd" receiving, passthru

base "../trace/trace.cfg" TRACE

!==============================================================================

#define TX_PROG_INFO "M40_M50_NFE_LOREAL_XML_IN"
#include "include/generix_func.inc"
#include "include/GEEXM40.inc"
#include "include/GEEXM30.inc"

!==============================================================================

! Initialization section
begin
    nPos := 1
    nRec := 1
	nMainIndex := 0
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
    nMessageID := cMessageID
	load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameSA2"]


	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	
	PROCESS_ERRONEOUS := TRUE
	pXML.INCONVIN := "UTF-8"
	pXML.ENCODING := "UTF-8"
 
   
	! Parametros do TRACE
		nMessageID := cMessageID
		tPerfil := "LOREAL"
		tSentido := "I"
		tMensagem := "XML - NFE - M40"
		tDataDocumento := time("now","%Y-%m-%d")

	!Inicio do processo
		log("------------------------------------------------------------", NL)
		log("Inicio: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
		log("Arquivo de entrada: ",pEDISEND.ORIGINAL.NAME, NL)
		log("------------------------------------------------------------", NL)

	!Variaveis Gerais
		nContadorItem := 0
		nQcomSomado := 0
	    nContadorLinhasEscritas := 0
		tCODCLI := ""
endbegin

!==============================================================================

segment Sserie gGnfeProc,gGNFe,gGinfNFe,gGide
	tNumeroSerie := eEserie
endsegment

segment SnNF gGnfeProc,gGNFe,gGinfNFe,gGide
	tNumeroDocumento := eEnNF 
endsegment

segment SdhEmi gGnfeProc,gGNFe,gGinfNFe,gGide
	tDATEXP := tfConvertDate(eEdhEmi, "YYYY-MM-DDTHH:MM:SS" , "YYYYMMDD") 
	tHEUEXP := tfConvertDate(eEdhEmi, "YYYY-MM-DDTHH:MM:SS" , "HHMMSS")  
endsegment

segment SdhSaiEnt gGnfeProc,gGNFe,gGinfNFe,gGide
	tSaiEnt := eEdhSaiEnt
	tDTIREC := tfConvertDate(eEdhSaiEnt, "YYYY-MM-DDTHH:MM:SS" , "YYYYMMDD") 
	tHEIREC := tfConvertDate(eEdhSaiEnt, "YYYY-MM-DDTHH:MM:SS" , "HHMMSS") 

	tDTILIV := tfConvertDate(eEdhSaiEnt, "YYYY-MM-DDTHH:MM:SS" , "YYYYMMDD") 
	tHEILIV := tfConvertDate(eEdhSaiEnt, "YYYY-MM-DDTHH:MM:SS" , "HHMMSS") 
endsegment

segment SCNPJ gGnfeProc,gGNFe,gGinfNFe,gGemit
	tEmitCNPJ := eECNPJ
	tCODFOU := tEmitCNPJ
	tEDIFOU := tEmitCNPJ
endsegment

segment SxNome gGnfeProc,gGNFe,gGinfNFe,gGemit
	tNOMFOU := eExNome
endsegment

segment SxLgr gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tAD1FOU := eExLgr
endsegment

segment Snro gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tAD1FOU := build(tAD1FOU," ",eEnro)
endsegment

segment SxCpl gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tAD2FOU := eExCpl
endsegment

segment SxBairro gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tAD2FOU := build(tAD2FOU," ",eExBairro)
endsegment

segment SxMun gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tVILFOU := eExMun
endsegment

segment SUF gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tVILFOU := build(tVILFOU,"/",eEUF)
endsegment

segment SCEP gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tCPIFOU := eECEP
endsegment

segment SxPais gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tPAYFOU := eExPais
endsegment

segment Sfone gGnfeProc,gGNFe,gGinfNFe,gGemit,gGenderEmit
	tTELFOU := eEfone
endsegment

segment SCNPJ gGnfeProc,gGNFe,gGinfNFe,gGdest
	tDestCNPJ := eECNPJ  
	tCODCLI  := tDestCNPJ
endsegment

segment SCPF gGnfeProc,gGNFe,gGinfNFe,gGdest
	tDestCPF  := eECPF
endsegment

segment SxNome gGnfeProc,gGNFe,gGinfNFe,gGdest
	tDestNome := eExNome  
	tNOMCLI := tDestNome
endsegment

segment SxLgr gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestLgr := eExLgr
	tAD1CLI := eExLgr   
endsegment

segment Snro gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestNRO := eEnro 
	tAD1CLI := build(tAD1CLI," ",eEnro)
endsegment

segment SxCpl gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestCpl := eExCpl  
	tAD2CLI := eExCpl
endsegment

segment SxBairro gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestBairro := eExBairro 
	tAD2CLI := build(tAD2CLI," ",eExBairro)
endsegment

segment SxMun gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestMun := eExMun 
	tVILCLI := eExMun
endsegment

segment SUF gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestUF := eEUF
	tVILCLI := build(tVILCLI,"/",eEUF)   
endsegment

segment SCEP gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestCEP := eECEP  
	tCPICLI := eECEP
endsegment

segment SxPais gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tPAYCLI := eExPais
endsegment

segment Sfone gGnfeProc,gGNFe,gGinfNFe,gGdest,gGenderDest
	tDestFone := eEfone  
	tTELCLI := eEfone
endsegment

segment SIE gGnfeProc,gGNFe,gGinfNFe,gGdest
	tIEdest := eEIE
endsegment

segment Semail gGnfeProc,gGNFe,gGinfNFe,gGdest
	tDestEmail := eEemail  
endsegment

segment Sdet gGnfeProc,gGNFe,gGinfNFe,gGdet
	nContadorItem++
	taNumeroItem[nContadorItem] := eAnItem
	taNLIREC[nContadorItem] := taNumeroItem[nContadorItem]  
	taNLILIV[nContadorItem] := taNumeroItem[nContadorItem] 
	baProdutoDuplicado[nContadorItem] := FALSE
endsegment

segment ScProd gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taCprod[nContadorItem] := eEcProd
	taCODPRO[nContadorItem] := eEcProd
endsegment

segment ScEAN gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taCean[nContadorItem] := eEcEAN 
endsegment

segment SxProd gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taProd[nContadorItem] := eExProd 
endsegment

segment SNCM gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taNCM[nContadorItem] := eENCM 
endsegment

segment SuCom gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taUcom[nContadorItem] := eEuCom 
	taUNICDE[nContadorItem] := taUcom[nContadorItem]
endsegment

segment SqCom gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taQcom[nContadorItem] := eEqCom 
	taUVCREA[nContadorItem] := taQcom[nContadorItem]
	taUVCCDE[nContadorItem] := taQcom[nContadorItem]
	nQcomSomado := nQcomSomado + number(eEqCom) 
endsegment

segment SvUnCom gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taUnCom[nContadorItem] := eEvUnCom 
endsegment

segment SxPed gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod
	taEmbarque[nContadorItem]   := eExPed
endsegment

segment SnLote gGnfeProc,gGNFe,gGinfNFe,gGdet,gGprod,gGrastro
	taNumeroLote[nContadorItem] := eEnLote 
endsegment

segment SvProd gGnfeProc,gGNFe,gGinfNFe,gGtotal,gGICMSTot
	tProd := eEvProd 
endsegment

segment SvFrete gGnfeProc,gGNFe,gGinfNFe,gGtotal,gGICMSTot
	tFrete := eEvFrete 
endsegment

segment SvOutro gGnfeProc,gGNFe,gGinfNFe,gGtotal,gGICMSTot
	tOutro := eEvOutro 
endsegment

segment SvNF gGnfeProc,gGNFe,gGinfNFe,gGtotal,gGICMSTot
	tTotalvNF := eEvNF 
endsegment

segment SCNPJ gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGtransporta
	tTransportaCNPJ := eECNPJ  
	tCODTRA := tTransportaCNPJ
endsegment

segment SxNome gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGtransporta
	tNomeIE := eExNome 
	tNOMTRA := eExNome     
endsegment

segment SIE gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGtransporta
	tTransportaIE := eEIE  
endsegment

segment Splaca gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGveicTransp
	tPlaca := eEplaca 
endsegment

segment SqVol gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGvol
	taDIPLIV5121[nContadorItem] := eEqVol
	tDIPLIV5121 := eEqVol
endsegment

segment SpesoL gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGvol
	tPesoL := eEpesoL
endsegment

segment SpesoB gGnfeProc,gGNFe,gGinfNFe,gGtransp,gGvol
	tPesoB := eEpesoB
endsegment

segment SchNFe gGnfeProc,gGprotNFe,gGinfProt
	tDIPREC := build("Ch NF:", eEchNFe)
	tDIPLIV := build("Ch NF:", eEchNFe)
endsegment

!==============================================================================

! Default statements section
default

enddefault

!==============================================================================

! End statements section
end

	!Abertura do banco de dados - WMS
		tDbBase		:= "FMWMS"
		tDbUsername	:= taPARAM["WMSDBUSER"]
		tDbPassword	:= taPARAM["WMSDBPASS"]
		tDbUrl		:= taPARAM["WMSDBURL"]

		bfSqlInit()
		if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
			bfSqlErro()
			exit(1)
		endif

		if bfValidaACT(tToInfologPrefixFilename, tEmitCNPJ) then
			log("------------------------------------------------------------", NL)
			log("CNPJ Emissor = ", tEmitCNPJ, NL)
			log("CNPJ Destinat√°rio = ", tDestCNPJ, NL)
			log("CODACT = ", tCODACT, NL)
			log("------------------------------------------------------------", NL)
		else
			tCODACT := "583"
		endif

	! Valida DESTINATARIO
		if tDestCNPJ <> "02462805000778" then 
			bfMajtrace(	"Erro de Traducao" \
						,"1" \
						,tNumeroDocumento \
						,tDataDocumento \
						,tFileInput \
						,tFileOut \
						,tMensagem \
						,build("Atividade (",tCODACT,") ou Destinatario (",tDestCNPJ,") invalido!"))
			exit(1)
		endif

	! Agrupando linhas de produtos repetitas
		nTempNumeroLinha := 1
		while nTempNumeroLinha  <= nContadorItem do
			nTempNumeroLinha2 := nTempNumeroLinha+1
			while nTempNumeroLinha2  <= nContadorItem do
				if  taCODPRO[nTempNumeroLinha2] = taCODPRO[nTempNumeroLinha] then !and taCODLOT[nTempNumeroLinha2] = taCODLOT[nTempNumeroLinha] then
					baProdutoDuplicado[nTempNumeroLinha2] := TRUE
					taUVCREA[nTempNumeroLinha] := build(number(taUVCREA[nTempNumeroLinha])+ number(taUVCREA[nTempNumeroLinha2]))
				endif
				nTempNumeroLinha2 ++
			endwhile
			nTempNumeroLinha ++
		endwhile

	! Cria√ß√£o dos arquivos
		tNameOut := build(tToInfologPrefixFilename,"40",build(nMessageID:R010),".DAT")
		tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tNameOut)
		tFileOut := build(sHOME,"/ToInfolog/",tNameOut)
		
	! Veriaveis
		tREFREC := build(number(tNumeroDocumento))
		tCUMLIG := build(nContadorItem)
		nContadorLinhasEncomenda := 0
		nContadorTmpTOTAL := 1

	! 00.00
		if nContadorLinhasEscritas = 0 then
			R_GEEX0000_CODEXC("00")
			R_GEEX0000_SEPEXC(".")
			R_GEEX0000_SCOEXC("00")
			R_GEEX0000_EMTEXC("FM") 
			R_GEEX0000_DATEXC(time("now" ,"%Y%m%d"))
			R_GEEX0000_HEUEXC(time("now" ,"%H%M%S"))
			R_GEEX0000_NUMEXC("0000000")
			R_GEEX0000_ACQEXC("0")
			R_GEEX0000_VEREXC("5.00") 
			R_GEEX0000_NOMDTQ("M40")
			R_GEEX0000_LIBEXC(build(nMessageID:R010))

			flush(0,0,NL) >> tFileOutTemp
			nContadorLinhasEscritas++
		endif
			   
	! 40.00
		R_GEEX4000_CODEXC("40")
		R_GEEX4000_SEPEXC(".")
		R_GEEX4000_SCOEXC("00")
		R_GEEX4000_REFREC(tREFREC)
		R_GEEX4000_CODTRE("583")
		R_GEEX4000_CODLDR(tCODLDR)
		R_GEEX4000_EDIFOU(tEDIFOU)
		R_GEEX4000_CODFOU(tCODFOU)
		R_GEEX4000_CODACT(tCODACT)
		R_GEEX4000_DTIREC(tDATEXP)
		R_GEEX4000_HEIREC(tHEUEXP)
		R_GEEX4000_MSGREC(tMSGREC)
		R_GEEX4000_CODTRA(tCODTRA)

		flush(0,0,NL) >> tFileOutTemp
		nContadorLinhasEscritas++

	! 40.20 e 21
		while nContadorTmpTOTAL <= nContadorItem do
			if baProdutoDuplicado[nContadorTmpTOTAL] = FALSE then
				R_GEEX4020_CODEXC("40")
				R_GEEX4020_SEPEXC(".")
				R_GEEX4020_SCOEXC("20")
				R_GEEX4020_CODACT(tCODACT)
				R_GEEX4020_REFREC(tREFREC)
				R_GEEX4020_CODPRO(taCODPRO[nContadorTmpTOTAL])
				R_GEEX4020_NLIREC(build(number(taNLIREC[nContadorTmpTOTAL]):R05)) 
				R_GEEX4020_UNICDE("UNI")
				R_GEEX4020_UVCREA(build(number(taUVCREA[nContadorTmpTOTAL]):R09.0))
				R_GEEX4020_MSGLIG(taEmbarque[nContadorTmpTOTAL])

				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++
				nContadorLinhasEncomenda++
			endif
			nContadorTmpTOTAL++
		endwhile

	! 40.99
		R_GEEX4099_CODEXC("40")
		R_GEEX4099_SEPEXC(".")
		R_GEEX4099_SCOEXC("99")
		R_GEEX4099_REFREC(tREFREC)
		R_GEEX4099_CUMLIG(build(number(tCUMLIG):R04.0))

		flush(0,0,NL) >> tFileOutTemp
		nContadorLinhasEscritas++

	!99.00
		R_GEEX9900_CODEXC("99")
		R_GEEX9900_SEPEXC(".")
		R_GEEX9900_SCOEXC("00")
		R_GEEX9900_EMTEXC("FM")
		R_GEEX9900_DATEXC(time("now" ,"%Y%m%d"))
		R_GEEX9900_HEUEXC(time("now" ,"%H%M%S"))
		R_GEEX9900_CPTEXC(build(nContadorLinhasEscritas:R08.0))

		flush(0,0,NL)  >> tFileOutTemp

	! Tratamento final dos arquivos
		close(tFileOutTemp)
		copy(tFileOutTemp,tFileOut)
		close(tFileOutTemp)
		remove(tFileOutTemp)
		close(tFileOut)

	! Finalizando com TRACE
		bfMajtrace(	"Recebida" \
					,"0" \
					,tREFREC \
					,tfConvertDate(substr(tDATEXP,1,10), "YYYYMMDD" , "YYYY-MM-DD") \
					,tFileInput \
					,tFileOut \
					,tMensagem \
					,"")

	! Enviar interface para o cliente
		bfToInfolog()

	bfSqlClose(tDbBase)

	log("------------------------------------------------------------", NL)
	log("Fim...: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
	log("------------------------------------------------------------", NL)

	exit(0)

endend

!==============================================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tFileInput,tFileOut,tTipoDocumento,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.PERFIL := tPerfil
	TRACE.SENTIDO := tSentido
	TRACE.NUMDOC := tNumDoc
	TRACE.DATDOC := tDataDoc
	TRACE.MESSAGEID := build(nMessageID:R010)  
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut
	TRACE.LIBEXC := tLIBEXC

	if tError = "0" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tError = "1" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)

	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	if tError = "0" then
		close(tFileOut)
		copy(tFileOut,TRACE.Out)
		close(tFileOut)
		close(TRACE.Out)
	endif

	flush(TRACE)
endfunction

!==============================================================================

function bfSqlErro()
    print("FATAL: ",tfSqlErrorStr())
    bfMajtrace(	"Erro de Traducao" \
                ,"1" \
                ,tNumeroDocumento \
                ,tDataDocumento \
                ,tFileInput \
                ,tFileOut \
                ,tMensagem \
                ,build("Erro no banco de dados: ",tfSqlErrorStr()))     
endfunction

!==============================================================================

function bfToInfolog()

	tCmd := build("edisend ToInfolog ", tFileOut)
	log("executando o comando - ", tCmd, NL)
	system(tCmd)

endfunction

!==============================================================================
function bfValidaACT(tToInfologPrefixFilename,tEmitCNPJ)

	bValidado := FALSE

	tQuery := build("SELECT CODACT", NL," "\
					"FROM FGE50FM",tToInfologPrefixFilename,".GEACRUB", NL," "\
					"WHERE CODRUB LIKE 'CNP%'", NL," "\
					"AND VALRUB = '",tEmitCNPJ,"'")  

    log("------------------------------------------------------------", NL)
    log(tQuery,NL)
    log("------------------------------------------------------------", NL)

    if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
		bfSqlErro()
		exit(1)
    endif

    if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
		bfSqlErro()
		exit(1)
    endif

    while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
		bValidado := TRUE
        tCODACT := peel(taDb2Array["CODACT"]," ")

        remove(taDb2Array)
    endwhile

    if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
		bfSqlErro()
		exit(1)
    endif

	return bValidado

endfunction
