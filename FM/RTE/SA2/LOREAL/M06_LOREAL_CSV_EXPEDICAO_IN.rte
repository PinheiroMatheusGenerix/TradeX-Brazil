%@(#)  source_filename.rte     modif:23-11-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 23-11-2017  XX  Creation
! 23-11-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================

! Input/output macros file
#include "include/M06_CSV_EXPEDICAO.inc"
#include "include/M06.inc"
!===========================================================

! Initialization section

begin
   !PROCESS_ERRONEOUS := TRUE
      nPos := 1
    nRec := 1
   SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
    nMessageID := cMessageID
 



 load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)

        tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameLOREAL"]

  tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"06",build(nMessageID:R015),".DAT")
  tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"06",build(nMessageID:R015),".DAT")
  !tFileOut := build(sHOME,"/rte/",tToInfologPrefixFilename,"30",build(nMessageID:R015),".DAT")
  tNameOut := build(tToInfologPrefixFilename,"06",build(nMessageID:R015),".DAT")
    


 
    
  
    nNumeroLinha := 0
    tCODACTConst := "001"
    nContadorLinhasEscritas  := 0
	
	
	
	
	tDbBase			:= "FMWMS"
	tDbUsername		:= taPARAM["WMSDBUSER"]
	tDbPassword		:= taPARAM["WMSDBPASS"]
	tDbUrl			:= taPARAM["WMSDBURL"]
	
	
	
bfSqlInit()
   if not bfSqlJdbc(tDbBase , tDbUsername,tDbPassword,tDbUrl) then
      print("FATAL ",tfSqlErrorStr())
      bfSqlClose(tDbBase)
	  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		
      exit(1)
   endif
   nNumeroAux := 0
   nLinhaArrayAux := 0
   nLinhaArrayAuxInsert := 0
   tTextoEmailGlobal := ""
endbegin

!===========================================================


!===========================================================



line(not "")
   S_REGISTRO
   !   S_REGISTRO_Atividade
   !   S_REGISTRO_CodPalete
   !   S_REGISTRO_MotImobilizacao
   !   S_REGISTRO_Qualidade
   nNumeroAux++
   if length(peel(S_REGISTRO_CodPalete," ")) > 0 and nNumeroAux > 1  and length(peel(S_REGISTRO_DO," ")) > 0 then
   
	tCODMOP := ""
	
	  if nContadorLinhasEscritas = 0 then
		 R_00HEADER_CODEXC("00")
		 R_00HEADER_SEPEXC(".")
		 R_00HEADER_SCOEXC("00")
		 R_00HEADER_TRTEXC("")
		 R_00HEADER_EMTEXC("FM") 
		 R_00HEADER_RCTEXC("")
		 R_00HEADER_DATEXC(time("now" ,"%Y%m%d"))
		 R_00HEADER_HEUEXC(time("now" ,"%H%M%S"))
		 R_00HEADER_NUMEXC("0000000")
		 R_00HEADER_ACQEXC("0")
		 R_00HEADER_VEREXC("5.00") 
		 R_00HEADER_NOMSYS("")  
		 R_00HEADER_NOMDTQ("M06")
		 R_00HEADER_BIBDTQ("")
		 R_00HEADER_LIBEXC(build(nMessageID:R010))
		 R_00HEADER_BIBDST("")
		 R_00HEADER_PGMDST("")
		 R_00HEADER_PARDST("")
		 R_00HEADER_CODACT("")
		 R_00HEADER_IGLSIT("")
		 R_00HEADER_EDISIT(build(number(tCentro_De_Custo)))
		 R_00HEADER_IMAEXC("")  
		 R_00HEADER_DISEXC("")
		 
		 flush(0,0,NL) >> tFileOutTemp   !ESCRITA DO HEADER M00.00
		 
	   endif
	   
	   
	   bFaz06VerificaQuery := TRUE
	    bTeveResultados := FALSE
	   !query de verificacao
	   
	   
	   
			tQuery := 	build("SELECT ZONSTS, ALLSTS, DPLSTS, NIVSTS, MOTIMM, NUMPAL,CODACT "\
			"FROM FGE50FM",tToInfologPrefixFilename,".GEPAL "\
			"WHERE CODPAL = '",S_REGISTRO_CodPalete,"'")





		log(tQuery,NL)


				if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
							 print("FATAL ", tfSqlErrorStr())
							 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
					
				endif

				if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
					 print("FATAL ", tfSqlErrorStr())
					  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)

				endif

				bFaz06VerificaQueryUmaVEZ := FALSE
				tTextoEmailComCODACTActErrado := ""
				
				while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
					bTeveResultados := TRUE
					bTeveResultadoPositivoPrimVez := FALSE
					
					
					if bFaz06VerificaQueryUmaVEZ = FALSE then !senao ignora as restantes linhas
						tZONSTS := peel(taDb2Array["ZONSTS"]," ")
						tMOTIMMAntigo := peel(taDb2Array["MOTIMM"]," ")
						tNUMPAL := peel(taDb2Array["NUMPAL"]," ")
						!tSNUPAL := peel(taDb2Array["SNUPAL"]," ")
						tCODACTQuery := peel(taDb2Array["CODACT"]," ")
						
						
						if substr(tMOTIMMAntigo,1,1) = "R" or number(substr(tMOTIMMAntigo,1,1)) > 0 or substr(tMOTIMMAntigo,1,1) = "0" or tMOTIMMAntigo = "EX" then
							bFaz06VerificaQuery := FALSE
						endif
						
						if bFaz06VerificaQuery = TRUE then
							if tZONSTS = "Q" or tZONSTS = "E" then
								bFaz06VerificaQuery := TRUE
								bFaz06VerificaQueryUmaVEZ := TRUE
								bTeveResultadoPositivoPrimVez := TRUE
							else
								bFaz06VerificaQuery := FALSE
							endif
						endif
					
					endif
					
					
					if bTeveResultadoPositivoPrimVez = FALSE then
						tTextoEmailComCODACTActErrado := build(tTextoEmailComCODACTActErrado,S_REGISTRO_CodPalete,NL)
					endif
					
					remove(taDb2Array)

				endwhile
				
				

				if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
					print("FATAL", tfSqlErrorStr())
					 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
				endif
	   
	   
	   
	   
	   
	   
	   if bFaz06VerificaQuery = TRUE and  bTeveResultados = TRUE then
	   
	   
	   !query de CODMOP
			tQuery := 	build("SELECT CODMOP "\
			"FROM FGE50FM",tToInfologPrefixFilename,".GELIVE "\
			"WHERE REFLIV LIKE '%",S_REGISTRO_DO,"%'")





		log(tQuery,NL)


				if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
							 print("FATAL ", tfSqlErrorStr())
							 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
					
				endif

				if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
					 print("FATAL ", tfSqlErrorStr())
					  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)

				endif

			
				while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
					
					tCODMOP := peel(taDb2Array["CODMOP"]," ")
					
					
						
					remove(taDb2Array)

				endwhile
				
				

				if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
					print("FATAL", tfSqlErrorStr())
					 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
				endif
	   if length(tCODMOP) > 0 then
				if length(tTextoEmailComCODACTActErrado) > 0 then
					if length(tTextoEmailGlobal) = 0 then
							tTextoEmailGlobal := build(NL,"Os seguintes SSCC estão duplicados no WMS e tiveram os Motivos de Imobilização alterados:",NL,NL,tTextoEmailComCODACTActErrado,NL)
					else
					   tTextoEmailGlobal := build(tTextoEmailGlobal,tTextoEmailComCODACTActErrado)
					endif
				endif
			   
			   R_M06_CODEXC("06")
			   R_M06_SEPEXC(".")
			   R_M06_SCOEXC("00")
			   R_M06_TRTEXC("2")
			   R_M06_CODACT(S_REGISTRO_Atividade )
			   R_M06_CODPAL(S_REGISTRO_CodPalete)
				R_M06_MOTIMM(tCODMOP)
			   R_M06_CODTRT("1")
			   R_M06_NUMPAL(tNUMPAL)
			  
			  
			   
			   flush(0,0,NL) >> tFileOutTemp   !ESCRITA DO HEADER M00.00
			  
			  
			  nContadorLinhasEscritas++
			  
			  
			  /*
					tQueryInsertCab := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GEPAL SET MOTIMM='",tCODMOP,"' WHERE CODACT='",tCODACTQuery,"' AND NUMPAL='",tNUMPAL,"'")
					nLinhaArrayAuxInsert++
					taStringQueryInsert[nLinhaArrayAuxInsert] := build(tQueryInsertCab,NL)
					log("tQueryInsertCab ",tQueryInsertCab,NL) 
					
					   if not bfSqlSet(tDbBase , "InsertCAB", tQueryInsertCab) then
						  log(tfSqlErrorStr(), NL)
						  tErroLocalTrace := build("Erro ao executar a query ",NL,tQueryInsertCab,NL,tfSqlErrorStr(),NL)
						  bfMajtrace("Erro de Traducao","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",tErroLocalTrace )
						  exit(1)
					   endif
					   if not bfSqlExec(tDbBase , "InsertCAB") then
						  log(tfSqlErrorStr(), NL)
						  tErroLocalTrace := build("Erro ao executar a query ",NL,tQueryInsertCab,NL,tfSqlErrorStr(),NL)
						  bfMajtrace("Erro de Traducao","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",tErroLocalTrace )
						  exit(1)
					   endif
						  if not bfSqlCommit(tDbBase , "InsertCAB") then
						  log(tfSqlErrorStr(), NL)
						  tErroLocalTrace := build("Erro ao executar a query ",NL,tQueryInsertCab,NL,tfSqlErrorStr(),NL)
						  bfMajtrace("Erro de Traducao","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",tErroLocalTrace )
						  exit(1)
					   endif
					   if not bfSqlFree(tDbBase , "InsertCAB") then
						  log(tfSqlErrorStr(), NL)
						  tErroLocalTrace := build("Erro ao executar a query ",NL,tQueryInsertCab,NL,tfSqlErrorStr(),NL)
						  bfMajtrace("Erro de Traducao","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",tErroLocalTrace )
						  exit(1)
					   endif

			  */
			   
			   nLinhaArrayAux++
			   taStringDetails[nLinhaArrayAux] := build(S_REGISTRO_CodPalete, " - SUCESSO - MOTIMM ",tMOTIMMAntigo," ZONSTS ",tZONSTS," e CODACT ",tCODACTQuery," para MOTIMM ",tCODMOP,NL)
			   
	    else
			nLinhaArrayAux++
			taStringDetails[nLinhaArrayAux] := build(S_REGISTRO_CodPalete, " - ERRO - MOTIMM ",tMOTIMMAntigo," ZONSTS ",tZONSTS," e CODACT ",tCODACTQuery,NL)
		endif	
	else
		nLinhaArrayAux++
		taStringDetails[nLinhaArrayAux] := build(S_REGISTRO_CodPalete, " - ERRO - MOTIMM ",tMOTIMMAntigo," ZONSTS ",tZONSTS," e CODACT ",tCODACTQuery,NL)
		
	endif
   endif
endline




! Default statements section
default

enddefault

!===========================================================

! End statements section

end





 bfSqlClose(tDbBase)
 
  if nContadorLinhasEscritas > 0 then
  


    R_99FILEFOOTER_CODEXC("99")
    R_99FILEFOOTER_SEPEXC(".")
    R_99FILEFOOTER_SCOEXC("00")
    R_99FILEFOOTER_TRTEXC("")
    R_99FILEFOOTER_EMTEXC("FM")
    R_99FILEFOOTER_RCTEXC("")
    R_99FILEFOOTER_DATEXC(time("now" ,"%Y%m%d"))
    R_99FILEFOOTER_HEUEXC(time("now" ,"H%M%S"))
    R_99FILEFOOTER_NUMEXC("")
    tContadorLinhasEscritas := build(nContadorLinhasEscritas)
    !print(tContadorLinhasEscritas) > "c:/influe/tContadorLinhasEscritas.txt"
    R_99FILEFOOTER_CPTEXC(build(number(tContadorLinhasEscritas):R08.0)) !VER NUMERO DE REGISTOS EXEPTO HEADER E TRAILLER
    !R_99FILEFOOTER_NOMSYS("")
    !R_99FILEFOOTER_NOMDTQ("")
    !R_99FILEFOOTER_BIBDTQ("")
    !R_99FILEFOOTER_IDEMSG("")
    !R_99FILEFOOTER_DISEXC("")

    flush(0,0,NL)  >> tFileOutTemp
    close(tFileOutTemp)
	
		
	copy(tFileOutTemp,tFileOut)
		close(tFileOutTemp)
		remove(tFileOutTemp)
			close(tFileOut)

	bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
	
	else
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Nao foi gerado arquivo de output"))
		close(tFileOutTemp)
		remove(tFileOutTemp)

	
	endif


exit(0)

endend

!===========================================================


!===========================================================



function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento

   TRACE.PERFIL := "LOREAL"
   TRACE.SENTIDO := "I"
   TRACE.MENSAGEM := "AGUARDANDO EXPEDIÇÃO PALETE"
   TRACE.NUMDOC := time("now","%Y-%m-%d")
   TRACE.DATDOC := time("now","%Y-%m-%d")
   TRACE.MESSAGEID := build(nMessageID:R010)   

    TRACE.REDE := pEDISEND.ORIGINAL.NAME

  TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOut

   if tStatus = "Recebida" then
    print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
    print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
    print("Traduzida com Sucesso",NL) >> TRACE.Detail
  
  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail
        endif
  endif
    nTempLinhaArrayAux := 1
  while nTempLinhaArrayAux  <= nLinhaArrayAux do
	print(taStringDetails[nTempLinhaArrayAux]) >> TRACE.Detail
	nTempLinhaArrayAux++
 endwhile
close(TRACE.Detail)
close(SYSLOG.a)
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)




/*
if tError="0" then
nTempLinhaArrayAuxInsert := 1
  while nTempLinhaArrayAuxInsert  <= nLinhaArrayAuxInsert do
	print(taStringQueryInsert[nTempLinhaArrayAuxInsert]) >> TRACE.Out
	nTempLinhaArrayAuxInsert++
 endwhile
 close(TRACE.Out)
endif
*/
if tError="0" then
close(tFileOut)
copy(tFileOut,TRACE.Out)
close(tFileOut)
close(TRACE.Out)



endif

flush(TRACE)


if length(tTextoEmailGlobal) > 0 then
	tArquivoEmailErro := build(sHOME,"/EmailsAEnviar/M06SSCCDuplicadoLoreal",nMessageID:R010,".txt")
	print(tTextoEmailGlobal) >>  tArquivoEmailErro
	close(tArquivoEmailErro)
	tSubjectEmail := build("Trace_",TRACE.INDEX,"_SSCC_Duplicado_Atualizado!")  
	tCmdEmailErro := build("edisend EMAIL.SUBJECT=\"",tSubjectEmail,"\" SSCCDupLoreal ",tArquivoEmailErro)
	log("executing command ",tCmdEmailErro,NL)
	nRet := system(tCmdEmailErro)
	close(tArquivoEmailErro)	
	remove(tArquivoEmailErro)
endif


endfunction


