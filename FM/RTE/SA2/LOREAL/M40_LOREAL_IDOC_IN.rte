%@(#)  source_filename.rte     modif:05-12-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 05-12-2017  XX  Creation
! 05-12-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off


!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M40_LOREAL_IDOC_IN"
#include "include/generix_func.inc"
#include "include/017FEXLOREAL.inc"
#include "include/M40.inc"
!===========================================================

! Initialization section


begin
   !PROCESS_ERRONEOUS := TRUE
   nPos := 1
    nRec := 1
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
    nMessageID := cMessageID
    
    
    
 load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)

        tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameLOREAL"]

  tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
  tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
  !tFileOut := build(sHOME,"/rte/",tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
  tNameOut := build(tToInfologPrefixFilename,"40",build(nMessageID:R015),".DAT")
    
tDbBase			:= "FMWMS"
	tDbUsername		:= taPARAM["WMSDBUSER"]
	tDbPassword		:= taPARAM["WMSDBPASS"]
	tDbUrl			:= taPARAM["WMSDBURL"]
	
	
	
bfSqlInit()
   if not bfSqlJdbc(tDbBase , tDbUsername,tDbPassword,tDbUrl) then
      print("FATAL ",tfSqlErrorStr())
      bfSqlClose(tDbBase)
	  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		
      exit(1)
   endif

   
   
   
   
   
   
   
   
   
    
    tCODACTConst := "001"
    nContadorLinhasEscritas  := 0
    nNumeroLinha := 0
	nMainIndex := 0
endbegin
!===========================================================


line(not "")
   
  
   if length(peel(pick(nPos, 22, 20), " ") ) > 0 then
   
		   nNumeroLinha++
		   
		   taDeliveryNumber[nNumeroLinha] := S_017HEADER_DeliveryNumber
		   taCustomercode[nNumeroLinha] := S_017HEADER_Customercode
		   taLineNumber_Itemnumber[nNumeroLinha] := S_017HEADER_LineNumber_Itemnumber_
		   taProductcode[nNumeroLinha] := S_017HEADER_Productcodereplacement_PFCCode_
		   taDeliverydate[nNumeroLinha] := S_017HEADER_Deliverydate
		   taHUidentification[nNumeroLinha] := S_017HEADER_HUidentification
		   taQuantity[nNumeroLinha] := S_017HEADER_Quantity
		   baConsideraHeader[nNumeroLinha] := TRUE
   
   
   else
   
		   
		   tShipmentNumber := S_017TRAILLER_ShipmentNumber
		   tTotalnumberofproductlines := S_017TRAILLER_Totalnumberofproductlines
   endif
   
   
endline



! Default statements section
default

enddefault

!===========================================================

! End statements section

end


nTempNumeroLinha := 1
while nTempNumeroLinha  <= nNumeroLinha do
   nTempNumeroLinha2 := nTempNumeroLinha+1
   while nTempNumeroLinha2  <= nNumeroLinha do
      if taDeliveryNumber[nTempNumeroLinha2] = taDeliveryNumber[nTempNumeroLinha] then
         baConsideraHeader[nTempNumeroLinha2] := FALSE
      endif
	  
	  !baProdutoDuplicado[nNumeroLinha] := FALSE
	  if taDeliveryNumber[nTempNumeroLinha2] = taDeliveryNumber[nTempNumeroLinha] and taProductcode[nTempNumeroLinha2] = taProductcode[nTempNumeroLinha] then 
			baProdutoDuplicado[nTempNumeroLinha2] := TRUE
			taQuantity[nTempNumeroLinha] := build(number(taQuantity[nTempNumeroLinha])+ number(taQuantity[nTempNumeroLinha2]))
	  endif

      nTempNumeroLinha2 ++
   endwhile
   
   nTempNumeroLinha ++
endwhile

nTempNumeroLinha := 1
while nTempNumeroLinha  <= nNumeroLinha do
if baConsideraHeader[nTempNumeroLinha] = TRUE then

  if nContadorLinhasEscritas = 0 then
     R_00HEADER_CODEXC("00")
     R_00HEADER_SEPEXC(".")
     R_00HEADER_SCOEXC("00")
     R_00HEADER_TRTEXC("")
     R_00HEADER_EMTEXC("FM") 
     R_00HEADER_RCTEXC("")
     R_00HEADER_DATEXC(time("now" ,"%Y%m%d"))
     R_00HEADER_HEUEXC(time("now" ,"%H%M%S"))
     R_00HEADER_NUMEXC("0000000")
     R_00HEADER_ACQEXC("0")
     R_00HEADER_VEREXC("5.00") 
     R_00HEADER_NOMSYS("")  
     R_00HEADER_NOMDTQ("M40")
     R_00HEADER_BIBDTQ("")
     R_00HEADER_LIBEXC(build(nMessageID:R010))
     R_00HEADER_BIBDST("")
     R_00HEADER_PGMDST("")
     R_00HEADER_PARDST("")
     R_00HEADER_CODACT("")
     R_00HEADER_IGLSIT("")
     R_00HEADER_EDISIT(build(number(tCentro_De_Custo)))
     R_00HEADER_IMAEXC("")  
     R_00HEADER_DISEXC("")
     
     flush(0,0,NL) >> tFileOutTemp   !ESCRITA DO HEADER M00.00
     nContadorLinhasEscritas++
   endif


   
   
   
   tQueryArg := ""
   
   if substr(pEDISEND.ORIGINAL.NAME,4,8) = "FEX25826"	then
		tQueryArg := "581"
   endif
    if substr(pEDISEND.ORIGINAL.NAME,4,8) = "FEX15826"	then
		tQueryArg := "583"
   endif
    if substr(pEDISEND.ORIGINAL.NAME,4,8) = "FEX16024"	then
		tQueryArg := "602"
   endif
   
   
   
 
   tQuery := build("SELECT ANAPRO FROM FGE50FM",tToInfologPrefixFilename,".GEPRO WHERE CODPRO='",taProductcode[nTempNumeroLinha],"' AND CODACT='",tQueryArg,"'")
  

			if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
						 print("FATAL ", tfSqlErrorStr())
						 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
				
			endif

			if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
				 print("FATAL ", tfSqlErrorStr())
				  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)

			endif

		
			while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
				bQueryTemResul := TRUE	
				
				tANAPRO := peel(taDb2Array["ANAPRO"]," ")
				

				remove(taDb2Array)

			endwhile
			
			

			if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
				print("FATAL", tfSqlErrorStr())
				 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
			endif


   
   
   tCODACTConst := substr(tANAPRO,1,3)
   

   R_40HEADER_CODEXC("40")
   R_40HEADER_SEPEXC(".")
   R_40HEADER_SCOEXC("00")
   
   R_40HEADER_REFREC(taDeliveryNumber[nTempNumeroLinha])
   if substr(tANAPRO,1,3) = "602" then
		tCODTRE := "NAC"
	else
		tCODTRE := "STD"
	endif
   
   R_40HEADER_CODTRE(tCODTRE )
   R_40HEADER_EDIFOU(taCustomercode[nTempNumeroLinha])
   R_40HEADER_CODFOU(taCustomercode[nTempNumeroLinha])
  ! R_40HEADER_CODTRA("33306929000798" )
R_40HEADER_CODACT(tCODACTConst )
R_40HEADER_DTIREC(build("20",taDeliverydate[nTempNumeroLinha]))

    flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
nContadorLinhasEscritas++



   R_40_01ORDHEADER_CODEXC("40")
   R_40_01ORDHEADER_SEPEXC(".")
   R_40_01ORDHEADER_SCOEXC("01")
   
   R_40_01ORDHEADER_REFREC(taDeliveryNumber[nTempNumeroLinha] )
!R_40_01ORDHEADER_CODACT(tCODACTConst )
R_40_01ORDHEADER_DIPREC(tShipmentNumber)

    flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
nContadorLinhasEscritas++



      nContadorLinhasEncomenda := 1
      
      
         




   nTempNumeroLinha2 := nTempNumeroLinha
   while nTempNumeroLinha2  <= nNumeroLinha do
   
   if taDeliveryNumber[nTempNumeroLinha2] = taDeliveryNumber[nTempNumeroLinha] then
   
   
			if baProdutoDuplicado[nTempNumeroLinha2] = FALSE then

					   ! fazer aqui um while e validar
					   R_40_20M40_CODEXC("40")
					   R_40_20M40_SEPEXC(".")
					   R_40_20M40_SCOEXC("20")
					   R_40_20M40_CODACT(tCODACTConst )

					   R_40_20M40_REFREC(taDeliveryNumber[nTempNumeroLinha2])
					   R_40_20M40_CODPRO(taProductcode[nTempNumeroLinha2])
					   R_40_20M40_UVCREA(build(number(taQuantity[nTempNumeroLinha2 ]):R09.0))
					   R_40_20M40_NLIREC(build(nContadorLinhasEncomenda:R05)) 
						nContadorLinhasEncomenda++
					
					 flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
					nContadorLinhasEscritas++
			endif



   endif
   
   
   
   nTempNumeroLinha2++ 
    
   endwhile


    
    
    
    R_40_99TRAILLER_CODEXC("40")
   R_40_99TRAILLER_SEPEXC(".")
   R_40_99TRAILLER_SCOEXC("99")
  ! R_40_99TRAILLER_CODACT("ELG")

   R_40_99TRAILLER_REFREC(taDeliveryNumber[nTempNumeroLinha] )
   nContadorLinhasEncomenda--
   R_40_99TRAILLER_CUMLIG(build(nContadorLinhasEncomenda:R04.0)) !ver conversao e  por erro!!!!!
    flush(0,0,NL) >> tFileOutTemp !ESCRITA DO HEADER M00.00
   nContadorLinhasEscritas++
   
   bfMajtrace("Recebida","0",taREFREC[nTempNumeroLinha],tDataDocumento,tFileInput,tFileOut,"Produtos","")
   
   endif
   
   
   nTempNumeroLinha++
endwhile
   

    R_TRAILLER_CODEXC("99")
    R_TRAILLER_SEPEXC(".")
    R_TRAILLER_SCOEXC("00")
    R_TRAILLER_TRTEXC("")
    R_TRAILLER_EMTEXC("FM")
    R_TRAILLER_RCTEXC("")
    R_TRAILLER_DATEXC(time("now" ,"%Y%m%d"))
    R_TRAILLER_HEUEXC(time("now" ,"H%M%S"))
    R_TRAILLER_NUMEXC("")
    tContadorLinhasEscritas := build(nContadorLinhasEscritas)
    !print(tContadorLinhasEscritas) > "c:/influe/tContadorLinhasEscritas.txt"
    R_TRAILLER_CPTEXC(build(number(tContadorLinhasEscritas):R08.0)) !VER NUMERO DE REGISTOS EXEPTO HEADER E TRAILLER
    !R_TRAILLER_NOMSYS("")
    !R_TRAILLER_NOMDTQ("")
    !R_TRAILLER_BIBDTQ("")
    !R_TRAILLER_IDEMSG("")
    !R_TRAILLER_DISEXC("")

    flush(0,0,NL)  >> tFileOutTemp
    close(tFileOutTemp)

copy(tFileOutTemp,tFileOut)
    close(tFileOutTemp)
	remove(tFileOutTemp)
	    close(tFileOut)

		
		bfSqlClose(tDbBase)
exit(0)

endend

!===========================================================


!===========================================================


!===========================================================



function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento

   TRACE.PERFIL := "LOREAL"
   TRACE.SENTIDO := "I"
   TRACE.MENSAGEM := "RECEBIMENTO E DEVOLUCAO"
   TRACE.NUMDOC := taDeliveryNumber[nTempNumeroLinha]
   TRACE.DATDOC := tfConvertDate(build("20",taDeliverydate[nTempNumeroLinha]), "YYYYMMDD" , "YYYY-MM-DD")
   TRACE.MESSAGEID := build(nMessageID:R010)   

    TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)

  TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOut

   if tStatus = "Recebida" then
    print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
    print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
    print("Traduzida com Sucesso",NL) >> TRACE.Detail
  
  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail
        endif
  endif
close(TRACE.Detail)



if nMainIndex = 0 then
close(SYSLOG.a)
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)

 
	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif




if tError="0" then
close(tFileOutTemp)
copy(tFileOutTemp,TRACE.Out)
close(tFileOutTemp)
close(TRACE.Out)
endif
flush(TRACE)
endfunction
