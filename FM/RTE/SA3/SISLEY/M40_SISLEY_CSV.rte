%@(#) $Id:  M40_SISLEY_CSV.rte,v 1.2 2020/04/23 17:02:20 gmt Exp $
!===========================================================================================================
% File         : $RCSfile: M40_SISLEY_CSV.rte $   $Revision: 1.2 $
!-----------------------------------------------------------------------------------------------------------
% Description   : M40_SISLEY_CSV
!-----------------------------------------------------------------------------------------------------------
% Author        : GMT - GENERIX BR
!===========================================================================================================
! 2020/04/23 GMT 1.2 Creation
!===========================================================================================================
!
! M40_SISLEY_CSV
!
!===========================================================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M40_SISLEY_CSV"
#include "include/generix_func.inc"
#include "include/M40_SISLEY_CSV.inc"
#include "include/GEEXM40.inc"
#include "include/GEEXM30.inc"

!===========================================================

! Initialization section

begin
	nPos := 1
	nRec := 1
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	nMessageID := cMessageID

	load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameGAMAITALY"]

	tDbBase		:= "FMWMS"
	tDbUsername	:= taPARAM["WMSDBUSER"]
	tDbPassword	:= taPARAM["WMSDBPASS"]
	tDbUrl		:= taPARAM["WMSDBURL"]

	bfSqlInit()
	
	if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase)
		bfMajtrace("Erro de Traducao", \
					"1", \
					"", \
					time("now","%Y-%m-%dT%H:%M:%S"), \
					"", \
					"RECEBIMENTO", \
					build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	nCurrLine := 0
endbegin

!===========================================================
line(not "")
	S_REGISTO

	nCurrLine++

	if nCurrLine > 1 then
		taREFREC[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] := S_REGISTO_NumeroOrdem
		taREFREC_REF[S_REGISTO_NumeroOrdem] := S_REGISTO_NumeroOrdem
		taCODPRO[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] := S_REGISTO_Produto
		taCODPRO_REF[S_REGISTO_NumeroOrdem] := S_REGISTO_Produto
		if taUVCREA[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] = "0" then
			taUVCREA[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] := build(0 + number(S_REGISTO_Quantidade))
		else
			taUVCREA[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] := build(number(taUVCREA[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)]) + number(S_REGISTO_Quantidade))
		endif
		taCODLOT[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] := S_REGISTO_Lote
		taDIPREC[S_REGISTO_NumeroOrdem] := S_REGISTO_Caminhao
		taDTIREC[S_REGISTO_NumeroOrdem] := tfConvertDate(S_REGISTO_DataEnvio, "DD/MM/YYYY" , "YYYYMMDD")
		if S_REGISTO_TipoOrdem <> "ENVIO" then
			taCODTRE[S_REGISTO_NumeroOrdem] := S_REGISTO_TipoOrdem
		else
			taCODTRE[S_REGISTO_NumeroOrdem] := "TR"
		endif
		taCODACT[S_REGISTO_NumeroOrdem] := S_REGISTO_Planta
		taMOTIMM[build(S_REGISTO_Produto, "-", S_REGISTO_NumeroOrdem)] := S_REGISTO_IMOBILIZACAO
	endif
endline

! Default statements section
default

enddefault

!===========================================================
! End statements section

end

	nCount4020 := 0
	nCountREFREC := 0

	bLine3000 := FALSE
	while tIndexREFREC in taREFREC_REF do
		nCountREFREC++
		tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"40",build(nMessageID:R010),time("now" ,"%H%M%S"),nCountREFREC,".DAT")
		tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"40",build(nMessageID:R010),time("now" ,"%H%M%S"),nCountREFREC,".DAT")
		tNameOut := build(tToInfologPrefixFilename,"40",build(nMessageID:R010),time("now" ,"%H%M%S"),nCountREFREC,".DAT")
		
		log("1- taREFREC_REF[",tIndexREFREC,"] = ", taREFREC_REF[tIndexREFREC], NL)
		R_GEEX0000_CODEXC("00")
		R_GEEX0000_SEPEXC(".")
		R_GEEX0000_SCOEXC("00")
		R_GEEX0000_EMTEXC("FM") 
		R_GEEX0000_DATEXC(time("now" ,"%Y%m%d"))
		R_GEEX0000_HEUEXC(time("now" ,"%H%M%S"))
		R_GEEX0000_NUMEXC("0000000")
		R_GEEX0000_ACQEXC("0")
		R_GEEX0000_VEREXC("5.00") 
		R_GEEX0000_NOMDTQ("M40")
		R_GEEX0000_LIBEXC(build(nMessageID:R010))

		flush(0,0,NL) >> tFileOutTemp

		while tIndexCODPRO2 in taCODPRO do
			if taCODPRO[build(taCODPRO[tIndexCODPRO2], "-", taREFREC_REF[tIndexREFREC])] <> "" then
				! QUERY M30
                    tQuery := build("SELECT  CODPRO", NL," "\
                                    "FROM FGE50FM",tToInfologPrefixFilename,".GEPRO", NL," "\
                                    "WHERE CODPRO = '",taCODPRO[tIndexCODPRO2],"'", NL," "\
                                    "AND CODACT = '",taCODACT[tIndexREFREC],"'")

                    log("------------------------------------------------------------", NL)
                    log(tQuery,NL)
                    log("------------------------------------------------------------", NL)

                    if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao", \
                                    "1", \
                                    "", \
                                    time("now","%Y-%m-%dT%H:%M:%S"), \
                                    "", \
                                    "RECEBIMENTO", \
                                    build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao", \
                                    "1", \
                                    "", \
                                    time("now","%Y-%m-%dT%H:%M:%S"), \
                                    "", \
                                    "RECEBIMENTO", \
                                    build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif
                    
                    if bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = FALSE then
                        if bLine3000 = FALSE then
                            bLine3000 := TRUE
                            
                            R_GEEX3000_CODEXC("30")
                            R_GEEX3000_SEPEXC(".")
                            R_GEEX3000_SCOEXC("00")
                            R_GEEX3000_CODACT(taCODACT[tIndexREFREC])

                            flush(0,0,NL) >> tFileOutTemp
                            nContLineEscritas++
                        endif

                        R_GEEX3020_CODEXC("30")
                        R_GEEX3020_SEPEXC(".")
                        R_GEEX3020_SCOEXC("20")
                        R_GEEX3020_CODACT(taCODACT[tIndexREFREC])
                        R_GEEX3020_CODPRO(taCODPRO[build(taCODPRO[tIndexCODPRO2], "-", taREFREC_REF[tIndexREFREC])])
                        R_GEEX3020_DS1PRO("*** PRODUTO NOVO ***")
                        R_GEEX3020_EDIPRO(taCODPRO_REF[tIndexCODPRO2])
                        R_GEEX3020_EDIPRM("1")
                        R_GEEX3020_EDIQLF("0")

                        flush(0,0,NL) >> tFileOutTemp
                        nContLineEscritas++
                        
                        remove(taDb2Array)
                    endif

                    if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
                        print("FATAL", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao", \
                                    "1", \
                                    "", \
                                    time("now","%Y-%m-%dT%H:%M:%S"), \
                                    "", \
                                    "RECEBIMENTO", \
                                    build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif
                ! FIM QUERY M30
			endif
		endwhile

        ! QUERY tLIBCPL     
            tQuery := build("SELECT  LIBCPL", NL," "\
                            "FROM FGE50FM",tToInfologPrefixFilename,".GEACT", NL," "\
                            "WHERE CODACT = '",taCODACT[tIndexREFREC],"'")

            log("------------------------------------------------------------", NL)
            log(tQuery,NL)
            log("------------------------------------------------------------", NL)

            if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
                print("FATAL ", tfSqlErrorStr())
                bfMajtrace("Erro de Traducao", \
                            "1", \
                            "", \
                            time("now","%Y-%m-%dT%H:%M:%S"), \
                            "", \
                            "RECEBIMENTO", \
                            build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                exit(1)
            endif

            if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
                print("FATAL ", tfSqlErrorStr())
                bfMajtrace("Erro de Traducao", \
                            "1", \
                            "", \
                            time("now","%Y-%m-%dT%H:%M:%S"), \
                            "", \
                            "RECEBIMENTO", \
                            build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                exit(1)
            endif
            
            if bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE then
                tLIBCPL := peel(taDb2Array["LIBCPL"]," ")
                remove(taDb2Array)
            endif

            if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
                print("FATAL", tfSqlErrorStr())
                bfMajtrace("Erro de Traducao", \
                            "1", \
                            "", \
                            time("now","%Y-%m-%dT%H:%M:%S"), \
                            "", \
                            "RECEBIMENTO", \
                            build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                exit(1)
            endif
        ! FIM QUERY tLIBCPL

		R_GEEX4000_CODEXC("40")
		R_GEEX4000_SEPEXC(".")
		R_GEEX4000_SCOEXC("00")
		R_GEEX4000_CODACT(taCODACT[tIndexREFREC])
		R_GEEX4000_REFREC(tIndexREFREC)
		R_GEEX4000_CODTRE(taCODTRE[tIndexREFREC])
		R_GEEX4000_DTIREC(taDTIREC[tIndexREFREC])
		if taCODACT[tIndexREFREC] = "SIS" then
			R_GEEX4000_CODFOU(tLIBCPL)
			R_GEEX4000_EDIFOU("0568")
		endif

		flush(0,0,NL) >> tFileOutTemp
		nContLineEscritas++

		R_GEEX4001_CODEXC("40")
		R_GEEX4001_SEPEXC(".")
		R_GEEX4001_SCOEXC("01")
		R_GEEX4001_REFREC(tIndexREFREC)
		R_GEEX4001_DIPREC(taDIPREC[tIndexREFREC])

		flush(0,0,NL) >> tFileOutTemp
		nContLineEscritas++

		while tIndexCODPRO in taCODPRO do
			nCount4020++

			if taCODPRO[build(taCODPRO[tIndexCODPRO], "-", taREFREC_REF[tIndexREFREC])] <> "" then
				R_GEEX4020_CODEXC("40")
				R_GEEX4020_SEPEXC(".")
				R_GEEX4020_SCOEXC("20")
				R_GEEX4020_CODACT(taCODACT[taREFREC_REF[tIndexREFREC]])
				R_GEEX4020_NLIREC(build(nCount4020:R05))
				R_GEEX4020_REFREC(taREFREC_REF[tIndexREFREC])
				R_GEEX4020_CODPRO(taCODPRO[build(taCODPRO[tIndexCODPRO], "-", taREFREC_REF[tIndexREFREC])])
				R_GEEX4020_UVCREA(build(number(taUVCREA[build(taCODPRO[tIndexCODPRO], "-", taREFREC_REF[tIndexREFREC])]):R09))
				R_GEEX4020_CODLOT(taCODLOT[build(taCODPRO[tIndexCODPRO], "-", taREFREC_REF[tIndexREFREC])])
				R_GEEX4020_MOTIMM(taMOTIMM[build(taCODPRO[tIndexCODPRO], "-", taREFREC_REF[tIndexREFREC])])
				R_GEEX4020_UNICDE("CAX")
				R_GEEX4020_INDUNI("1")
				
				flush(0,0,NL) >> tFileOutTemp
				nContLineEscritas++
			endif
		endwhile 

		R_GEEX9900_CODEXC("99")
		R_GEEX9900_SEPEXC(".")
		R_GEEX9900_SCOEXC("00")
		R_GEEX9900_EMTEXC("FM")
		R_GEEX9900_DATEXC(time("now" ,"%Y%m%d"))
		R_GEEX9900_HEUEXC(time("now" ,"H%M%S"))
		R_GEEX9900_CPTEXC(build(nContLineEscritas:R08))
	
		flush(0,0,NL) >> tFileOutTemp

		close(tFileOutTemp)
		copy(tFileOutTemp,tFileOut)
		close(tFileOutTemp)
		remove(tFileOutTemp)
		close(tFileOut)

		bfMajtrace("Recebida", \
					"0", \
					tIndexREFREC, \
					time("now","%Y-%m-%dT%H:%M:%S"), \
					tFileOut, \
					"RECEBIMENTO", \
					"")

		bLine3000 := FALSE
	endwhile

	close(tDbBase)

    tCmd := build("edisend ToInfolog ", tFileOut)
	log("executando o comando - ", tCmd, NL)
	system(tCmd)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tFileOut,tMensagem,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := "SISLEY"
	TRACE.SENTIDO := "I"
	TRACE.MENSAGEM := tMensagem
	TRACE.NUMDOC := tNumDoc
	TRACE.DATDOC := tDataDoc
	TRACE.MESSAGEID := build(nMessageID)
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	close(TRACE.Detail)

    if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
        endif
	endif

	close(TRACE.Detail)

	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	if tError="0" then
		close(tFileOut)
		copy(tFileOut,TRACE.Out)
		close(tFileOut)
		close(TRACE.Out)
	endif
    flush(TRACE)
endfunction

!===========================================================
