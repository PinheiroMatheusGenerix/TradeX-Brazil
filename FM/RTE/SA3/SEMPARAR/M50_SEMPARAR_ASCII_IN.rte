%@(#)  M50_SEMPARAR_ASCII_IN.rte     modif:01-12-2017
!==============================================================================
% File          : M50_SEMPARAR_ASCII_IN.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 01-12-2017  XX  Creation
! 01-12-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M50_SEMPARAR_ASCII_IN"
#include "include/generix_func.inc"
#include "include/NfVendaSemParar.inc"
#include "include/GEEXM50.inc"
#include "include/GEEXM20.inc"
!===========================================================

! Initialization section

begin
    !PROCESS_ERRONEOUS := TRUE
    nPos := 1
    nRec := 1
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))

    load(0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
    tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameGAMAITALY"]

    tDbBase		:= "FMWMS"
    tDbUsername	:= taPARAM["WMSDBUSER"]
    tDbPassword	:= taPARAM["WMSDBPASS"]
    tDbUrl		:= taPARAM["WMSDBURL"]

    nContadorLinhasEscritas  := 0
    nContadorHeader := 0
    nContadorItems := 0
    nMainIndex := 0
    bProd_sem_PCB := FALSE
    bClienteNovo := FALSE

	bfSqlInit()
	
	if not bfSqlJdbc(tDbBase ,tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif
endbegin

!===========================================================
line(1:"0")
    ! QUERY bClienteNovo
        tQuery := build("SELECT  CODACT", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GEACRUB", NL," "\
                        "WHERE CODRUB LIKE 'CNP%'", NL," "\
                        "AND VALRUB = '",substr(S_Header_CNPJORIGEM, 2, 14),"'")  

        log("------------------------------------------------------------", NL)
        log(tQuery,NL)
        log("------------------------------------------------------------", NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)					
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do	
            tCODACT := peel(taDb2Array["CODACT"], " ")

            remove(taDb2Array)
        endwhile

        if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif
    ! FIM QUERY bClienteNovo

    tDIPLIV := S_Header_CNPJORIGEM
    tCODCLI := S_Header_CLIPROPRI
endline

line(1:"1")
    tCODTLI := S_HeaderOrdemCarga_TipoOperacao
    tCODTRA := substr(S_HeaderOrdemCarga_CNPJTRANSPORTADORA,2,14)
    tCRILIV := S_HeaderOrdemCarga_OrdemCarga
endline

line(1:"2")
    nContadorHeader++
    
    taMSGPRP1[nContadorHeader] := S_HeaderPedido_OrdemVendaCliente	
    taCODTLI[nContadorHeader] := tCODTLI	
    taCODTRA[nContadorHeader] := tCODTRA	
    taREFLIV[nContadorHeader] := S_HeaderPedido_NumeroPedido
    taDTILIV[nContadorHeader] := S_HeaderPedido_DataPedido
    taNOMCLI[nContadorHeader] := S_HeaderPedido_Nome
    taEnderecoCompleto[nContadorHeader] := build(S_HeaderPedido_Endereco,S_HeaderPedido_ContEndereco," ",S_HeaderPedido_ComplementoEndereco)
    taAD1CLI[nContadorHeader] := substr(taEnderecoCompleto[nContadorHeader],1,38)
    taAD2CLI[nContadorHeader] := substr(taEnderecoCompleto[nContadorHeader],39,38)
    taAD3CLI[nContadorHeader] := substr(taEnderecoCompleto[nContadorHeader],77,38)
    taFAXCLI[nContadorHeader] := substr(taEnderecoCompleto[nContadorHeader],116,20)
    taVILCLI[nContadorHeader] := substr(build(S_HeaderPedido_Municipio," / ",S_HeaderPedido_Estado),1,26)
    taCPICLI[nContadorHeader] := build(substr(S_HeaderPedido_Cep,1,5),"-",substr(S_HeaderPedido_Cep,6,3))
    taCLILIV[nContadorHeader] := S_HeaderPedido_EmissorCNPJ
    taEMLADR[nContadorHeader] := S_HeaderPedido_BairroEnd

    ! QUERY bClienteNovo
        tQuery := build("SELECT CODCLI ", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GECLI ", NL," "\
                        "WHERE CODCLI='",S_HeaderPedido_EmissorCNPJ,"' ", NL," "\
                        "AND CODACT = '",tCODACT,"'")   

        log("------------------------------------------------------------", NL)
        log(tQuery,NL)
        log("------------------------------------------------------------", NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)					
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do	
            if length(taDb2Array["CODCLI"]) = 0 then
                bClienteNovo := TRUE
            endif

            remove(taDb2Array)
        endwhile

        if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif
    ! FIM QUERY bClienteNovo
endline

line(1:"3")
    nContadorItems++

    taITEMS_ReferenciaHeaer[nContadorItems] := build(nContadorHeader)
    taNLILIV[nContadorItems] := substr(build(number(S_DetalhePedido_ItemdoPedido)), 1, 5)
    taCODPRO[nContadorItems] := S_DetalhePedido_Produto 
    taQTECDE[nContadorItems] := S_DetalhePedido_Quantidade
    taPRILIV[nContadorItems] := substr(S_DetalhePedido_ValorUnitario,12,8)
    taDIPLIV5021[nContadorItems] := S_DetalhePedido_InstrucaoEmbalagem
    taDeposito[nContadorItems] := S_DetalhePedido_Deposito
    taCODLOT[nContadorItems] := S_DetalhePedido_Lote
    taPRILIV[nContadorItems] := S_DetalhePedido_ValorUnitario
endline

line(1:"9")
    tCUMLIG := S_Trailler_TotalLinhas

    nMessageID := cMessageID
    tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
    tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
    tNameOut := build(tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")

    nContadorHeaderTmp := 1

    while nContadorHeaderTmp <= nContadorHeader do
        if nContadorLinhasEscritas = 0 then
            R_GEEX0000_CODEXC("00")
            R_GEEX0000_SEPEXC(".")
            R_GEEX0000_SCOEXC("00")
            R_GEEX0000_EMTEXC("FM") 
            R_GEEX0000_DATEXC(time("now" ,"%Y%m%d"))
            R_GEEX0000_HEUEXC(time("now" ,"%H%M%S"))
            R_GEEX0000_NUMEXC("0000000")
            R_GEEX0000_ACQEXC("0")
            R_GEEX0000_VEREXC("5.00") 
            R_GEEX0000_NOMDTQ("M50")
            R_GEEX0000_LIBEXC(build(nMessageID:R010))
         
            flush(0,0,NL) >> tFileOutTemp  
            nContadorLinhasEscritas++
        endif
        
        R_GEEX2000_CODEXC("20")
        R_GEEX2000_SEPEXC(".")
        R_GEEX2000_SCOEXC("00")
        R_GEEX2000_TRTEXC("2")
        R_GEEX2000_CODACT(tCODACT)
        R_GEEX2000_CODCLI(taCLILIV[nContadorHeaderTmp])
        R_GEEX2000_CATCLI("STD")
        R_GEEX2000_CLILIV("STD")
        R_GEEX2000_NOMCLI(substr(taNOMCLI[nContadorHeaderTmp],1,30))
        R_GEEX2000_VILCLI(taVILCLI[nContadorHeaderTmp])
        R_GEEX2000_FAXCLI(taFAXCLI[nContadorHeaderTmp])
        R_GEEX2000_AD1CLI(substr(taAD1CLI[nContadorHeaderTmp],1,30))
        R_GEEX2000_PAYCLI("BRA")

        nContadorLinhasEscritas++
        flush(0,0,NL)  >> tFileOutTemp

        R_GEEX2001_CODEXC("20")
        R_GEEX2001_SEPEXC(".")
        R_GEEX2001_SCOEXC("01")
        R_GEEX2001_TRTEXC("2")
        R_GEEX2001_CODACT(tCODACT)
        R_GEEX2001_CODCLI(taCLILIV[nContadorHeaderTmp])
        R_GEEX2001_CPICLI(taCPICLI[nContadorHeaderTmp])

        nContadorLinhasEscritas++
        flush(0,0,NL)  >> tFileOutTemp

        R_GEEX2002_CODEXC("20")
        R_GEEX2002_SEPEXC(".")
        R_GEEX2002_SCOEXC("02")
        R_GEEX2002_TRTEXC("2")
        R_GEEX2002_CODACT(tCODACT)
        R_GEEX2002_CODCLI(taCLILIV[nContadorHeaderTmp])
        R_GEEX2002_EMLADR(taEMLADR[nContadorHeaderTmp])

        nContadorLinhasEscritas++
        flush(0,0,NL)  >> tFileOutTemp

        R_GEEX2004_CODEXC("20")
        R_GEEX2004_SEPEXC(".")
        R_GEEX2004_SCOEXC("04")
        R_GEEX2004_TRTEXC("2")
        R_GEEX2004_CODACT(tCODACT)
        R_GEEX2004_CODCLI(taCLILIV[nContadorHeaderTmp])
        R_GEEX2004_NOMCLI(substr(taNOMCLI[nContadorHeaderTmp],1,30))
        R_GEEX2004_AD1CLI(taAD1CLI[nContadorHeaderTmp])
        R_GEEX2004_AD2CLI(taAD2CLI[nContadorHeaderTmp])
        R_GEEX2004_AD3CLI(taAD3CLI[nContadorHeaderTmp])
        R_GEEX2004_VILCLI(taVILCLI[nContadorHeaderTmp])

        nContadorLinhasEscritas++
        flush(0,0,NL)  >> tFileOutTemp
    
        R_GEEX5000_CODEXC("50")
        R_GEEX5000_SEPEXC(".")
        R_GEEX5000_SCOEXC("00")
        R_GEEX5000_CODACT(tCODACT)
        R_GEEX5000_CODCLI(tCODCLI)  
        R_GEEX5000_CLILIV(taCLILIV[nContadorHeaderTmp])  
        R_GEEX5000_REFLIV(taREFLIV[nContadorHeaderTmp])
        R_GEEX5000_DTILIV(tfConvertDate(taDTILIV[nContadorHeaderTmp], "DDMMYYYY" , "YYYYMMDD"))
        R_GEEX5000_CODTRA(taCODTRA[nContadorHeaderTmp])
        R_GEEX5000_CODTLI(taCODTLI[nContadorHeaderTmp])
        R_GEEX5000_MSGPRP1(taMSGPRP1[nContadorHeaderTmp])

        if taCODTLI[nContadorHeaderTmp] = "VD" then
            R_GEEX5000_CODMOP("SEM")
        else
            R_GEEX5000_CODMOP(build("S",taCODTLI[nContadorHeaderTmp]))
        endif
    
        flush(0,0,NL) >> tFileOutTemp  
        nContadorLinhasEscritas++

        R_GEEX5001_CODEXC("50")
        R_GEEX5001_SEPEXC(".")
        R_GEEX5001_SCOEXC("01")
        R_GEEX5001_TRTEXC("2")
        R_GEEX5001_CODACT(tCODACT)
        R_GEEX5001_CODCLI(tCODCLI)
        R_GEEX5001_CRILIV(tCRILIV)
        R_GEEX5001_REFLIV(taREFLIV[nContadorHeaderTmp])
        R_GEEX5001_DIPLIV(tDIPLIV)

        flush(0,0,NL) >> tFileOutTemp  
        nContadorLinhasEscritas++

        R_GEEX5011_CODEXC("50")
        R_GEEX5011_SEPEXC(".")
        R_GEEX5011_SCOEXC("11")
        R_GEEX5011_CODACT(tCODACT)
        R_GEEX5011_CODCLI(tCODCLI)
        R_GEEX5011_REFLIV(taREFLIV[nContadorHeaderTmp])
        R_GEEX5011_EMLADR(taEMLADR[nContadorHeaderTmp])
        R_GEEX5011_AD1CLI(taAD1CLI[nContadorHeaderTmp])
        R_GEEX5011_AD2CLI(taAD2CLI[nContadorHeaderTmp])
        R_GEEX5011_AD3CLI(taAD3CLI[nContadorHeaderTmp])

        flush(0,0,NL) >> tFileOutTemp  
        nContadorLinhasEscritas++

        nContadorLinhasEncomenda := 0      
        nContador := 8
        print("ve ",peel(taREGISTO[nContador+1],"\""),NL)
        nContadorTmpTOTAL := 1

        while nContadorTmpTOTAL <= nContadorItems do
            if taITEMS_ReferenciaHeaer[nContadorTmpTOTAL] = build(nContadorHeaderTmp) then
                ! QUERY bProd_sem_PCB
                    tQuery := build("SELECT PCBPRO ", NL," "\
                                    "FROM FGE50FM",tToInfologPrefixFilename,".GEPRO ", NL," "\
                                    "WHERE CODPRO='",taCODPRO[nContadorTmpTOTAL],"' ", NL," "\
                                    "AND CODACT = '",tCODACT,"'")   

                    log("------------------------------------------------------------", NL)
                    log(tQuery,NL)
                    log("------------------------------------------------------------", NL)

                    if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)					
                    endif

                    if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do	
                        if length(taDb2Array["PCBPRO"]) = 0 then
                            bProd_sem_PCB := TRUE
                            bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Produto ", taCODPRO[nContadorTmpTOTAL], " com cadastro incompleto."))
                            exit(1)
                        endif

                        remove(taDb2Array)
                    endwhile

                    if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
                        print("FATAL", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif
                ! QUERY bProd_sem_PCB

                R_GEEX5020_CODEXC("50")
                R_GEEX5020_SEPEXC(".")
                R_GEEX5020_SCOEXC("20")
                R_GEEX5020_CODACT(tCODACT)
                R_GEEX5020_CODCLI(tCODCLI)
                R_GEEX5020_NLILIV(build(number(taNLILIV[nContadorTmpTOTAL]):R05.0))
                R_GEEX5020_CODPRO(taCODPRO[nContadorTmpTOTAL])
                R_GEEX5020_UNICDE("UNI")
                nNumeroAuxTemp := number(substr(taQTECDE[nContadorTmpTOTAL],4,16)) / 1000
                R_GEEX5020_UVCCDE(build(nNumeroAuxTemp:R09))
                R_GEEX5020_REFLIV(taREFLIV[nContadorHeaderTmp])
                R_GEEX5020_PRILIV(build(number(taPRILIV[nContadorTmpTOTAL]):R08.0))
                R_GEEX5020_AIGPRI("1")
                R_GEEX5020_IMMFRG(taDeposito[nContadorTmpTOTAL])
                R_GEEX5020_CODLOT(taCODLOT[nContadorTmpTOTAL])
                R_GEEX5020_TYPSTK("2")

                flush(0,0,NL) >> tFileOutTemp
                nContadorLinhasEscritas++
			
                R_GEEX5021_CODEXC("50")
                R_GEEX5021_SEPEXC(".")
                R_GEEX5021_SCOEXC("21")
                R_GEEX5021_CODACT(tCODACT)
                R_GEEX5021_CODCLI(tCODCLI)
                R_GEEX5021_REFLIV(taREFLIV[nContadorHeaderTmp])
                R_GEEX5021_NLILIV(build(number(taNLILIV[nContadorTmpTOTAL]):R05.0))
                R_GEEX5021_DIPLIV(tDIPLIV)
                R_GEEX5021_PRILIV(taPRILIV[nContadorTmpTOTAL])
                        
                flush(0,0,NL) >> tFileOutTemp
                nContadorLinhasEscritas++
                
                if length(taDeposito[nContadorTmpTOTAL]) > 0 then
                    R_GEEX5025_CODEXC("50")
                    R_GEEX5025_SEPEXC(".")
                    R_GEEX5025_SCOEXC("25")
                    R_GEEX5025_CODACT(tCODACT)
                    R_GEEX5025_CODCLI(tCODCLI)
                    R_GEEX5025_REFLIV(taREFLIV[nContadorHeaderTmp])
                    R_GEEX5025_NLILIV(build(number(taNLILIV[nContadorTmpTOTAL]):R05.0))
                    R_GEEX5025_CODRUB("DEPO") 
                    R_GEEX5025_VALRUB(taDeposito[nContadorTmpTOTAL])

                    flush(0,0,NL) >> tFileOutTemp 
                    nContadorLinhasEscritas++
                endif
            endif
            nContadorLinhasEncomenda++
            nContadorTmpTOTAL++
        endwhile
        
        R_GEEX5099_CODEXC("50")
        R_GEEX5099_SEPEXC(".")
        R_GEEX5099_SCOEXC("99")
        R_GEEX5099_CUMLIG(build(nContadorLinhasEncomenda))
        R_GEEX5099_CODACT(tCODACT)
        R_GEEX5099_CODCLI(tCODCLI)
        R_GEEX5099_REFLIV(taREFLIV[nContadorHeaderTmp])

        flush(0,0,NL) >> tFileOutTemp
        nContadorLinhasEscritas++

        bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
        nContadorHeaderTmp++
    endwhile
   
    R_GEEX9900_CODEXC("99")
    R_GEEX9900_SEPEXC(".")
    R_GEEX9900_SCOEXC("00")
    R_GEEX9900_TRTEXC("")
    R_GEEX9900_EMTEXC("FM")
    R_GEEX9900_DATEXC(time("now" ,"%Y%m%d"))
    R_GEEX9900_HEUEXC(time("now" ,"H%M%S"))
    tContadorLinhasEscritas := build(nContadorLinhasEscritas)
    R_GEEX9900_CPTEXC(build(number(tContadorLinhasEscritas):R08.0))

    flush(0,0,NL) >> tFileOutTemp
    close(tFileOutTemp)

    copy(tFileOutTemp,tFileOut)
    close(tFileOutTemp)
    remove(tFileOutTemp)
    close(tFileOut)

    bfSqlClose(tDbBase)

    exit(0)
endline

! Default statements section
default

enddefault

!===========================================================

! End statements section

end
   exit(0)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.PERFIL := "SEM PARAR"
   TRACE.SENTIDO := "I"
   TRACE.MENSAGEM := "PEDIDO"
   TRACE.NUMDOC := taREFLIV[nContadorHeaderTmp] 
   TRACE.DATDOC := tfConvertDate(substr(taDTILIV[nContadorHeaderTmp],1,8), "DDMMYYYY" , "YYYYMMDD") 
   TRACE.MESSAGEID := build(nMessageID:R010)   
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
   TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
   TRACE.FICHEIROSAIDA := tNameOut
   TRACE.LIBEXC := tLIBEXC

   if tStatus = "Recebida" then
      print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
      print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
      print("Traduzida com Sucesso",NL) >> TRACE.Detail
   else
      if tStatus = "Erro de Traducao" then
         print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
         print("Erro de Traducao",NL) >> TRACE.Detail
         print(tMensagemErrro,NL) >> TRACE.Detail
      endif
   endif

   close(TRACE.Detail)

   if nMainIndex = 0 then
      close(SYSLOG.a)
      copy(SYSLOG.a,TRACE.In)
      close(SYSLOG.a)
      close(TRACE.In)

      nMainIndex := TRACE.INDEX
   else
      tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
      system(tCmd)
   endif

   if tError="0" then
      close(tFileOutTemp)
      copy(tFileOutTemp,TRACE.Out)
      close(tFileOutTemp)
      close(TRACE.Out)
   endif

   flush(TRACE)
endfunction
