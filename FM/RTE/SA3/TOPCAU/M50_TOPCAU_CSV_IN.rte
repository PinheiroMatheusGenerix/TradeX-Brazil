%@(#) $Id:  M50_TOPCAU_CSV_IN.rte,v 1.2 2020/04/23 17:02:20 gmt Exp $
!===========================================================================================================
% File         : $RCSfile: M50_TOPCAU_CSV_IN.rte $   $Revision: 1.2 $
!-----------------------------------------------------------------------------------------------------------
% Description   : M50_TOPCAU_CSV_IN
!-----------------------------------------------------------------------------------------------------------
% Author        : GMT - GENERIX BR
!===========================================================================================================
! 2020/04/23 GMT 1.2 Creation
!===========================================================================================================
!
! M50_TOPCAU_CSV_IN
!
!===========================================================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================================================================

! Input/output macros file
#define PROG_NAME "$RCSfile: $"
#define PROG_VER  "$Revision: $"
#define PROG_DATE "$Date: $"
#define TX_PROG_INFO "M50_TOPCAU_CSV_IN"
#include "include/generix_func.inc"
#include "include/M50_HENKEL_CSV_IN.inc"
#include "include/M50.inc"
#include "include/M35.inc"
#include "include/M41_LASA_TXT.inc"

!===========================================================================================================

! Initialization section

begin
	nPos := 1
	nRec := 1
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	nMessageID := cMessageID

	load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)

	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameTOPCAU"]

	tDbBaseUpdate := "FMWMSUP"
	tDbBase3	  := "FMWMS3"
	tDbBase2	  := "FMWMS2"
	tDbBase		  := "FMWMS"

	tDbUsername	  := taPARAM["WMSDBUSER"]
	tDbPassword	  := taPARAM["WMSDBPASS"]
	tDbUrl		  := taPARAM["WMSDBURL"]

	tDbUsernameUPDATES	:= taPARAM["WMSDBUSERUPDATES"]
	tDbPasswordUPDATES	:= taPARAM["WMSDBPASSUPDATES"]
	tDbUrlUPDATES		:= taPARAM["WMSDBURLUPDATES"]

	bfSqlInit()
	if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	if not bfSqlJdbc(tDbBase2, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase2)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	if not bfSqlJdbc(tDbBase3, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase2)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	if not bfSqlJdbc(tDbBaseUpdate, tDbUsernameUPDATES, tDbPasswordUPDATES, tDbUrlUPDATES) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBaseUpdate)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif


	tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
	tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
	tNameOut := build(tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")

	nContadorLinhasEscritas  := 0
	nContadorHeader := 0
	nContadorItems := 0
	nMainIndex := 0
	nNumeroMonoRegisto := 0
	bHeader := TRUE
endbegin

!===========================================================================================================

line(not "")
	S_Registo
	if length (S_Registo_TipoTrataramento) > 0 then 
		if bHeader = TRUE then
			bHeader := FALSE
		else
			nNumeroMonoRegisto++
			if S_Registo_TipoTrataramento = "0" then
				taTRTEXC[nNumeroMonoRegisto] := ""
			endif
			if S_Registo_TipoTrataramento = "1" then
				taTRTEXC[nNumeroMonoRegisto] := "7"
			endif
			taCODACT[nNumeroMonoRegisto] := S_Registo_Planta
			taCODTLIAntesQuery[nNumeroMonoRegisto] := S_Registo_TipoPedido
			taPTYCLI[nNumeroMonoRegisto] := S_Registo_Prioridade
			taPTYDES[nNumeroMonoRegisto] := S_Registo_Prioridade
			taDIPLIV5001[nNumeroMonoRegisto] := S_Registo_Prioridade
			taCODCLIAntesQuery[nNumeroMonoRegisto] := S_Registo_CNPJDestinatario
			taPAYCLI[nNumeroMonoRegisto] := S_Registo_Pais
			taNFPedido[nNumeroMonoRegisto] := S_Registo_Pedido
			taNOMCLI[nNumeroMonoRegisto] := S_Registo_RazSocial
			taAD1CLI[nNumeroMonoRegisto] := S_Registo_Endereco
			taAD2CLI[nNumeroMonoRegisto] := S_Registo_Endereco
			taUNICDE[nNumeroMonoRegisto] := S_Registo_Unidade
			taVILCLI[nNumeroMonoRegisto] := build(S_Registo_Municipio,"/",S_Registo_UF)
			taCPICLI[nNumeroMonoRegisto] := S_Registo_CEP
			if length(S_Registo_Serie) > 0 then
				taSerie[nNumeroMonoRegisto] := build(number(S_Registo_Serie))
			endif
			if length(S_Registo_Serie) = 0 or number(S_Registo_Serie) = 0 then
				taREFLIV[nNumeroMonoRegisto] := S_Registo_Pedido
			else
				taREFLIV[nNumeroMonoRegisto] := build(S_Registo_Pedido,".",number(S_Registo_Serie))
			endif
			
			if S_Registo_TipoTrataramento = "1" then
				tQuery := 	build("SELECT CODCLI ", NL," "\
								"  FROM FGE50FM",tToInfologPrefixFilename,".GELIVE ", NL," "\
								"  WHERE REFLIV LIKE  '%",S_Registo_Pedido,"%'")   

				log("------------------------------------------------------------", NL)
				log(tQuery,NL)
				log("------------------------------------------------------------", NL)

				if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif
				if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif
				while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
					taCODCLI[nNumeroMonoRegisto] := peel(taDb2Array["CODCLI"]," ")
					remove(taDb2Array)
				endwhile
				if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
					print("FATAL", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif
			else
				if S_Registo_TipoTrataramento = "0" and length(taCODCLIAntesQuery[nNumeroMonoRegisto]) > 0 then
					taCODCLI[nNumeroMonoRegisto] := taCODCLIAntesQuery[nNumeroMonoRegisto]
				endif
			endif

			if S_Registo_TipoTrataramento = "1" and length(taCODTLIAntesQuery[nNumeroMonoRegisto]) = 0 then
				tQuery := 	build("SELECT CODTLI ", NL," "\
								"  FROM FGE50FM",tToInfologPrefixFilename,".GELIVE ", NL," "\
								"  WHERE REFLIV LIKE  '%",S_Registo_Pedido,"%'")   

				log("------------------------------------------------------------", NL)
				log(tQuery,NL)
				log("------------------------------------------------------------", NL)

				if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
					taCODTLI[nNumeroMonoRegisto] := peel(taDb2Array["CODTLI"]," ")
					remove(taDb2Array)
				endwhile

				if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
					print("FATAL", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif
			endif
			
			taTOULIV[nNumeroMonoRegisto] := S_Registo_Agrupador1
			taCODRGT[nNumeroMonoRegisto] := S_Registo_Agrupador2
			taDATEXP[nNumeroMonoRegisto] := tfConvertDate(S_Registo_DataAgendament, "DD/MM/YYYY" , "YYYYMMDD")
			taHEUEXP[nNumeroMonoRegisto] := tfConvertDate(S_Registo_HoraAgendamento, "HH:MM" , "HHMM")			
			taCODTRA[nNumeroMonoRegisto] := S_Registo_CodigoTransportadora
			taCRILIV[nNumeroMonoRegisto] := S_Registo_CriterioExtracao
			taCODPRO[nNumeroMonoRegisto] := S_Registo_CodigoProduto
			taUVCCDE[nNumeroMonoRegisto] := S_Registo_Quantidade
			taCODLOT[nNumeroMonoRegisto] := S_Registo_Lote
			taIMMFRG[nNumeroMonoRegisto] := S_Registo_Status
			taCODPAL[nNumeroMonoRegisto] := S_Registo_SSCC

			tQuery := build("SELECT CODMRQ ", NL," "\
					"  FROM FGE50FM",tToInfologPrefixFilename,".GEPRO ", NL," "\
					"  WHERE CODPRO='",taCODPRO[nNumeroMonoRegisto],"'")

			log("------------------------------------------------------------", NL)
			log("tQuery ",tQuery,NL)
			log("------------------------------------------------------------", NL)

			if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)					
			endif

			if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
				if length(peel(taDb2Array["CODMRQ"], " ")) > 0 then
					tCODMRQ := peel(taDb2Array["CODMRQ"], " ")
					bEscreve5005 := TRUE
				endif

				remove(taDb2Array)
			endwhile

			if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
				print("FATAL", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			tQuery := build("SELECT CODMOP ", NL," "\
							"  FROM FGE50FM",tToInfologPrefixFilename,".GECLI ", NL, " " \
							"  WHERE CODCLI = '",taCODCLI[nNumeroMonoRegisto],"'", NL, " " \
							,"   AND CODACT = '",taCODACT[nNumeroMonoRegisto],"'")

			log("------------------------------------------------------------", NL)
			log("tQuery ",tQuery,NL)
			log("------------------------------------------------------------", NL)

			if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)					
			endif

			if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
				if length(taDb2Array["CODMOP"]) > 0 then
					taCODMOP[nNumeroMonoRegisto] := peel(taDb2Array["CODMOP"], " ")
				else
					taCODMOP[nNumeroMonoRegisto] := "TOP"
				endif

				remove(taDb2Array)
			endwhile

			if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
				print("FATAL", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			if nNumeroMonoRegisto >= 2 then
				taREFLIVAnterior[nNumeroMonoRegisto] := taREFLIV[nNumeroMonoRegisto-1]
			endif
			taReferenciaRefgisto[nNumeroMonoRegisto] := build(nNumeroMonoRegisto)
		endif
	endif
endline

! Default statements section
default

enddefault

!===========================================================================================================

! End statements section

end
	nContadorHeaderTmp := 1

	while nContadorHeaderTmp <= nNumeroMonoRegisto do
		if nContadorLinhasEscritas = 0 then
			nContadorNLILIV := 0

			R_0000HEADER_CODEXC("00")
			R_0000HEADER_SEPEXC(".")
			R_0000HEADER_SCOEXC("00")
			R_0000HEADER_TRTEXC("")
			R_0000HEADER_EMTEXC("FM") 
			R_0000HEADER_RCTEXC("")
			R_0000HEADER_DATEXC(time("now" ,"%Y%m%d"))
			R_0000HEADER_HEUEXC(time("now" ,"%H%M%S"))
			R_0000HEADER_NUMEXC("0000000")
			R_0000HEADER_ACQEXC("0")
			R_0000HEADER_VEREXC("5.00") 
			R_0000HEADER_NOMSYS("")  
			R_0000HEADER_NOMDTQ("M50")
			R_0000HEADER_BIBDTQ("")
			R_0000HEADER_LIBEXC(build(nMessageID:R010))
			R_0000HEADER_BIBDST("")
			R_0000HEADER_PGMDST("")
			R_0000HEADER_PARDST("")
			R_0000HEADER_CODACT("")
			R_0000HEADER_IGLSIT("")
			R_0000HEADER_EDISIT(build(number(tCentro_De_Custo)))
			R_0000HEADER_IMAEXC("")  

			flush(0,0,NL) >> tFileOutTemp
			nContadorLinhasEscritas++
		endif
   
		if nContadorHeaderTmp = 1 or taREFLIVAnterior[nContadorHeaderTmp] <> taREFLIV[nContadorHeaderTmp] then
			if nContadorHeaderTmp > 1 then
				nContadorNLILIV := 0
				R_5099ORDERFOOTER_CODEXC("50")
				R_5099ORDERFOOTER_SEPEXC(".")
				R_5099ORDERFOOTER_SCOEXC("99")
				R_5099ORDERFOOTER_TRTEXC(taTRTEXC[nContadorHeaderTmp-1])
				R_5099ORDERFOOTER_CUMLIG(build(nContadorLinhasEncomenda))
				R_5099ORDERFOOTER_CODACT(taCODACT[nContadorHeaderTmp-1])
				R_5099ORDERFOOTER_CODCLI(taCODCLI[nContadorHeaderTmp-1])
				R_5099ORDERFOOTER_REFLIV(taREFLIV[nContadorHeaderTmp-1])

				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++
				bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")	
			endif

			tQuery := build("SELECT CATCLI ", NL," "\
						"    FROM FGE50FM",tToInfologPrefixFilename,".GECLI ", NL," "\
						"    WHERE CODCLI='",taCODCLI[nContadorHeaderTmp],"'")   

			log("------------------------------------------------------------", NL)
			log("tQuery ",tQuery,NL)
			log("------------------------------------------------------------", NL)

			if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)					
			endif

			if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do	
				taCATCLI[nContadorHeaderTmp] := taDb2Array["CATCLI"]

				remove(taDb2Array)
			endwhile

			if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
				print("FATAL", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			if taTRTEXC[nNumeroMonoRegisto] = "" then
				R_2000COSTUMERIDENTIFICATION_CODEXC("20")
				R_2000COSTUMERIDENTIFICATION_SEPEXC(".")
				R_2000COSTUMERIDENTIFICATION_SCOEXC("00")
				R_2000COSTUMERIDENTIFICATION_TRTEXC(taTRTEXC[nContadorHeaderTmp])
				R_2000COSTUMERIDENTIFICATION_CODACT(taCODACT[nContadorHeaderTmp])
				R_2000COSTUMERIDENTIFICATION_CODCLI(taCODCLI[nContadorHeaderTmp])
				if length(taCATCLI[nContadorHeaderTmp]) > 0 then
					R_2000COSTUMERIDENTIFICATION_CATCLI(taCATCLI[nContadorHeaderTmp])
				else
					R_2000COSTUMERIDENTIFICATION_CATCLI("STD")
				endif
				R_2000COSTUMERIDENTIFICATION_NOMCLI(taNOMCLI[nContadorHeaderTmp])
				if length(taAD1CLI[nContadorHeaderTmp]) > 30 then
					R_2000COSTUMERIDENTIFICATION_AD1CLI(taAD1CLI[nContadorHeaderTmp])
					R_2000COSTUMERIDENTIFICATION_AD2CLI(substr(taAD1CLI[nContadorHeaderTmp], 31, length(taAD1CLI[nContadorHeaderTmp]) - 30))
				else
					R_2000COSTUMERIDENTIFICATION_AD1CLI(taAD1CLI[nContadorHeaderTmp])
				endif
				R_2000COSTUMERIDENTIFICATION_VILCLI(taVILCLI[nContadorHeaderTmp])
				R_2000COSTUMERIDENTIFICATION_PAYCLI(taPAYCLI[nContadorHeaderTmp])
				R_2000COSTUMERIDENTIFICATION_CODDEV("")
				R_2000COSTUMERIDENTIFICATION_ETACLI("")

				nContadorLinhasEscritas++
				flush(0,0,NL)  >> tFileOutTemp

				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_CODEXC("20")
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_SEPEXC(".")
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_SCOEXC("01")
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_TRTEXC(taTRTEXC[nContadorHeaderTmp])
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_CODACT(taCODACT[nContadorHeaderTmp])
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_CODCLI(taCODCLI[nContadorHeaderTmp])
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_CPICLI(taCPICLI[nContadorHeaderTmp])
				R_2001COSTUMERIDENTIFICATION_COMPLEMENT_PTYDES(taPTYDES[nContadorHeaderTmp])

				nContadorLinhasEscritas++
				flush(0,0,NL)  >> tFileOutTemp

				R_2002COSTUMERIDENTIFICATION_COMPLEMENT_CODEXC("20")
				R_2002COSTUMERIDENTIFICATION_COMPLEMENT_SEPEXC(".")
				R_2002COSTUMERIDENTIFICATION_COMPLEMENT_SCOEXC("02")
				R_2002COSTUMERIDENTIFICATION_COMPLEMENT_TRTEXC(taTRTEXC[nContadorHeaderTmp])
				R_2002COSTUMERIDENTIFICATION_COMPLEMENT_CODACT(taCODACT[nContadorHeaderTmp])
				R_2002COSTUMERIDENTIFICATION_COMPLEMENT_CODCLI(taCODCLI[nContadorHeaderTmp])

				nContadorLinhasEscritas++
				flush(0,0,NL)  >> tFileOutTemp
			endif

			tQuery := build("SELECT CODCLI ", NL," "\
						"    FROM FGE50FM",tToInfologPrefixFilename,".GECLI ", NL," "\
						"    WHERE CODCLI='",taCODCLI[nContadorHeaderTmp],"'")   

			log("------------------------------------------------------------", NL)
			log("tQuery ",tQuery,NL)
			log("------------------------------------------------------------", NL)

			if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)					
			endif

			if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do	
				taCODCLI2[nContadorHeaderTmp] := taDb2Array["CODCLI"]

				remove(taDb2Array)
			endwhile

			if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
				print("FATAL", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			if length(taCODCLI2[nContadorHeaderTmp]) = 0 then
				R_3500_CODEXC("35")
				R_3500_SEPEXC(".")
				R_3500_SCOEXC("00")
				R_3500_TRTEXC("1")
				R_3500_CODACT(taCODACT[nContadorHeaderTmp])
				R_3500_TYPCTD("3")
				R_3500_CODCLI(taCODCLI[nContadorHeaderTmp])
				R_3500_NBJCTD("540")

				nContadorLinhasEscritas++
				flush(0,0,NL)  >> tFileOutTemp
			endif

			! M41
			tQuery := build("SELECT  NUMREC", NL," "\
							"FROM FGE50FM",tToInfologPrefixFilename,".GERECE", NL," "\
							"WHERE REFREC = '",taREFLIV[nContadorHeaderTmp],"'", NL," "\
							"AND CODTRE = 'TOP'", NL," "\
							"AND CODACT = 'LAS'")

			log("------------------------------------------------------------", NL)
			log(tQuery,NL)
			log("------------------------------------------------------------", NL)

			if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)					
			endif

			if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			if bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE then
				tQueryM41 := build("SELECT  EDIFOU", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GEFOU", NL," "\
									"WHERE CODFOU = (", NL," "\
									"	SELECT CODFOU", NL," "\
									"	FROM FGE50FM",tToInfologPrefixFilename,".GERECE", NL," "\
									"	WHERE REFREC = '",taREFLIV[nContadorHeaderTmp],"')")

				log("------------------------------------------------------------", NL)
				log(tQueryM41,NL)
				log("------------------------------------------------------------", NL)

				if bfSqlSet(tDbBase3, "SELECTdb2", tQueryM41) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQueryM41_2," do banco de dados: ",tfSqlErrorStr()))
					exit(1)					
				endif

				if bfSqlOpen(tDbBase3, "SELECTdb2") = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQueryM41_2," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				while bfSqlFetchArray(tDbBase3, "SELECTdb2", taDb2Array2) = TRUE do	
					tEDIFOU := build(number(peel(taDb2Array2["EDIFOU"], " ")))

					remove(taDb2Array2)
				endwhile

				if bfSqlFree(tDbBase3, "SELECTdb2") = FALSE then
					print("FATAL", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQueryM41_2," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				tFileOutM41 := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,"LAS_contagem_LC2.L",tEDIFOU,".PR.",time("now","%y%m%d.%H%M%S"),".txt")
				tFileOutTempM41 := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,"LAS_contagem_LC2.L",tEDIFOU,".PR.",time("now","%y%m%d.%H%M%S"),".txt")
				tNameOutM41 := build("FM",tToInfologPrefixFilename,"LAS_contagem_LC2.L",tEDIFOU,".PR.",time("now","%y%m%d.%H%M%S"),".txt")			
				
				if taCODTLIAntesQuery[nContadorHeaderTmp] = "TRF" then
					taCODMOP[nContadorHeaderTmp] := "TLA"

					tQueryUpdate := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GERECE", NL," "\
											"SET ETAREC = 50", NL," "\
											"WHERE REFREC = '",taREFLIV[nContadorHeaderTmp],"'", NL," "\
											"AND CODACT = 'LAS' WITH NONE")

					log("QUERY UPDATE -------------------------------------", NL)
					log(tQueryUpdate,NL)
					log("--------------------------------------------------", NL, NL)

					if not bfSqlSet(tDbBaseUpdate, "UPDATEdb2", tQueryUpdate) then
						log(tfSqlErrorStr(), NL)
						exit(27)
					endif

					if not bfSqlExec(tDbBaseUpdate, "UPDATEdb2") then
						log(tfSqlErrorStr(), NL)
						exit(28)
					endif

					if not bfSqlCommit(tDbBaseUpdate, "UPDATEdb2") then
						log(tfSqlErrorStr(), NL)
						exit(29)
					endif

					if not bfSqlFree(tDbBaseUpdate, "UPDATEdb2") then
						log(tfSqlErrorStr(), NL)
						exit(30)
					endif

					bfSqlClose(tDbBaseUpdate)
				endif

				tQueryM41 := build("SELECT  A.CODFOU", NL," "\
								"          ,A.CMTREC1", NL," "\
								"          ,B.CODPRO", NL," "\
								"          ,SUM(B.UVCREA) AS UVCREA", NL," "\
								"          ,B.PCBPRO", NL," "\
								"FROM FGE50FM",tToInfologPrefixFilename,".GERECE A", NL," "\
								"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GERECD B", NL," "\
								"ON A.NUMREC = B.NUMREC", NL," "\
								"WHERE A.REFREC = '",taREFLIV[nContadorHeaderTmp],"'", NL," "\
								"AND A.CODACT = 'LAS'", NL," "\
								"GROUP BY B.CODPRO", NL," "\
								"         ,A.CODFOU", NL," "\
								"         ,A.CMTREC1", NL," "\
								"         ,B.PCBPRO", NL," "\
								"         ,B.UVCREA")

				log("------------------------------------------------------------", NL)
				log(tQueryM41,NL)
				log("------------------------------------------------------------", NL)

				if bfSqlSet(tDbBase2, "SELECTdb2", tQueryM41) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)					
				endif

				if bfSqlOpen(tDbBase2, "SELECTdb2") = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				while bfSqlFetchArray(tDbBase2, "SELECTdb2", taDb2ArrayM41) = TRUE do

					log("tQueryM41_2 = TRUE", NL)

					tQueryM41_2 := build("SELECT  FO.EDIFOU", NL," "\
									"       ,RB.VALRUB", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GERECE AS RE", NL," "\
									"JOIN FGE50FM",tToInfologPrefixFilename,".GEFOU AS FO", NL," "\
									"ON RE.CODFOU = FO.CODFOU", NL," "\
									"JOIN FGE50FM",tToInfologPrefixFilename,".GERERUB AS RB", NL," "\
									"ON RE.NUMREC = RB.NUMREC", NL," "\
									"WHERE RE.REFREC = '",taREFLIV[nContadorHeaderTmp],"'", NL," "\
									"AND RB.CODRUB = 'APPT'")

					log("------------------------------------------------------------", NL)
					log(tQueryM41_2,NL)
					log("------------------------------------------------------------", NL)

					if bfSqlSet(tDbBase3, "SELECTdb2", tQueryM41_2) = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQueryM41_2," do banco de dados: ",tfSqlErrorStr()))
						exit(1)					
					endif

					if bfSqlOpen(tDbBase3, "SELECTdb2") = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQueryM41_2," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					while bfSqlFetchArray(tDbBase3, "SELECTdb2", taDb2Array2) = TRUE do	
						tEDIFOU := taDb2Array2["EDIFOU"]
						tVALRUB := taDb2Array2["VALRUB"]

						remove(taDb2Array2)
					endwhile

					if bfSqlFree(tDbBase3, "SELECTdb2") = FALSE then
						print("FATAL", tfSqlErrorStr())
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQueryM41_2," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif
					
					R_HEADER_LOCATION(tEDIFOU)
					R_HEADER_APPT_NBR(tVALRUB)

					if tCODTRE = "TOP" then
						R_HEADER_ITEM_ID(build(number(taDb2ArrayM41["CODPRO"]):R016))
						R_HEADER_UNIT_QTY(build(number(taDb2ArrayM41["UVCREA"]) / number(taDb2ArrayM41["PCBPRO"]):R011))
						R_HEADER_ZEROS_UNIT_QTY("000")
						R_HEADER_IT_PALLET("01")

						flush(0,0,NL) >> tFileOutTempM41
					else
						R_HEADER_ITEM_ID(build(number(taDb2ArrayM41["CODPRO"]):R016))
						R_HEADER_UNIT_QTY(build(number(taDb2ArrayM41["UVCREA"]) / number(taDb2ArrayM41["PCBPRO"]):R011))
						R_HEADER_ZEROS_UNIT_QTY("000")
						R_HEADER_IT_PALLET("01")

						flush(0,0,NL) >> tFileOutTempM41
					endif
				endwhile

				if bfSqlFree(tDbBase2, "SELECTdb2") = FALSE then
					print("FATAL", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				close(tFileOutTempM41)
				copy(tFileOutTempM41,tFileOutM41)
				close(tFileOutTempM41)
				remove(tFileOutTempM41)
				close(tFileOutM41)

				bfMajtraceM41("Recebida", \
							"0", \
							taREFLIV[nContadorHeaderTmp], \
							time("now","%Y-%m-%dT%H:%M:%S"), \
							tFileOutM41, \
							"CONFIRMAÇÃO DE RECEBIMENTO", \
							"")

				bfSqlClose(tDbBase2)
				bfSqlClose(tDbBase3)

				remove(taDb2ArrayM41)
			endif

			if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
				print("FATAL", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			R_5000ORDERHEADER_CODEXC("50")
			R_5000ORDERHEADER_SEPEXC(".")
			R_5000ORDERHEADER_SCOEXC("00")
			R_5000ORDERHEADER_TRTEXC(taTRTEXC[nContadorHeaderTmp])
			R_5000ORDERHEADER_CODACT(taCODACT[nContadorHeaderTmp])
			R_5000ORDERHEADER_CODTLI(taCODTLIAntesQuery[nNumeroMonoRegisto])
			R_5000ORDERHEADER_CODCLI(taCODCLI[nContadorHeaderTmp])  
			R_5000ORDERHEADER_REFLIV(taREFLIV[nContadorHeaderTmp])
			R_5000ORDERHEADER_CODTRA(taCODTRA[nContadorHeaderTmp])
			R_5000ORDERHEADER_TOULIV(taTOULIV[nContadorHeaderTmp])
			R_5000ORDERHEADER_CODRGT(taCODRGT[nContadorHeaderTmp])
			R_5000ORDERHEADER_DTILIV(taDATEXP[nContadorHeaderTmp])
			R_5000ORDERHEADER_HEILIV(taHEUEXP[nContadorHeaderTmp])
			R_5000ORDERHEADER_MSGLIV1(taCODTRA[nContadorHeaderTmp])
			R_5000ORDERHEADER_CODMOP(taCODMOP[nContadorHeaderTmp])	
	
			tQuery := build("SELECT NOMTRA ", NL," "\
							"FROM FGE50FM",tToInfologPrefixFilename,".GETRA ", NL," "\
							"WHERE CODTRA='",taCODTRA[nContadorHeaderTmp],"'")

			log("------------------------------------------------------------", NL)
			log(tQuery,NL)
			log("------------------------------------------------------------", NL)
  
			if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)					
			endif

			if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do	
				R_5000ORDERHEADER_MSGLIV2(peel(taDb2Array["NOMTRA"]," "))

				remove(taDb2Array)
			endwhile

			if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
				print("FATAL", tfSqlErrorStr())
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif
			   
			flush(0,0,NL) >> tFileOutTemp
			nContadorLinhasEscritas++

			R_5001ORDERHEADER_COMPLEMENT_CODEXC("50")
			R_5001ORDERHEADER_COMPLEMENT_SEPEXC(".")
			R_5001ORDERHEADER_COMPLEMENT_SCOEXC("01")
			R_5001ORDERHEADER_COMPLEMENT_TRTEXC(taTRTEXC[nContadorHeaderTmp])
			R_5001ORDERHEADER_COMPLEMENT_CODACT(taCODACT[nContadorHeaderTmp])
			R_5001ORDERHEADER_COMPLEMENT_CODCLI(taCODCLI[nContadorHeaderTmp])  
			R_5001ORDERHEADER_COMPLEMENT_DIPLIV(taDIPLIV5001[nContadorHeaderTmp]) 
			R_5001ORDERHEADER_COMPLEMENT_REFLIV(taREFLIV[nContadorHeaderTmp])
			R_5001ORDERHEADER_COMPLEMENT_CRILIV(taCRILIV[nContadorHeaderTmp])
			R_5001ORDERHEADER_COMPLEMENT_PTYCLI(taPTYCLI[nContadorHeaderTmp])

			flush(0,0,NL) >> tFileOutTemp
			nContadorLinhasEscritas++		   
			   
			taNFPedido[nNumeroMonoRegisto] := S_Registo_Pedido
			taSerie[nNumeroMonoRegisto] := build(number(S_Registo_Serie))

			if bEscreve5005 = TRUE then		   
				R_GEEX5005_CODEXC("50")
				R_GEEX5005_SEPEXC(".")
				R_GEEX5005_SCOEXC("05")
				R_GEEX5005_CODACT(taCODACT[nContadorHeaderTmp])
				R_GEEX5005_CODCLI(taCODCLI[nContadorHeaderTmp])
				R_GEEX5005_REFLIV(taREFLIV[nContadorHeaderTmp]) 
				R_GEEX5005_CODRUB("ZMRQ")
				R_GEEX5005_VALRUB(tCODMRQ)

				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++
			endif

		endif

		nContadorLinhasEncomenda := 0
		nContadorTmpTOTAL := 1

		while nContadorTmpTOTAL <= nNumeroMonoRegisto do  
			if taReferenciaRefgisto[nContadorTmpTOTAL] = build(nContadorHeaderTmp) and taTRTEXC[nContadorHeaderTmp] <> "7" then
				R_5020ORDERLINE_CODEXC("50")
				R_5020ORDERLINE_SEPEXC(".")
				R_5020ORDERLINE_SCOEXC("20")
				R_5020ORDERLINE_TRTEXC(taTRTEXC[nContadorTmpTOTAL])
				R_5020ORDERLINE_CODACT(taCODACT[nContadorTmpTOTAL])
				R_5020ORDERLINE_CODCLI(taCODCLI[nContadorTmpTOTAL])
				R_5020ORDERLINE_CODPRO(taCODPRO[nContadorTmpTOTAL])
				R_5020ORDERLINE_UNICDE(taUNICDE[nContadorTmpTOTAL])
				R_5020ORDERLINE_CODLOT(taCODLOT[nContadorTmpTOTAL])
				R_5020ORDERLINE_QTECDE(taUVCCDE[nContadorTmpTOTAL])
				R_5020ORDERLINE_REFLIV(taREFLIV[nContadorTmpTOTAL])
				nContadorNLILIV++
				R_5020ORDERLINE_NLILIV(build(nContadorNLILIV:R05.0))
				R_5020ORDERLINE_IMMFRG(taIMMFRG[nContadorTmpTOTAL])
				
				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++
			
				if length(taCODPAL[nContadorTmpTOTAL]) > 0 then
					R_5025ORDERLINE_CODEXC("50")
					R_5025ORDERLINE_SEPEXC(".")
					R_5025ORDERLINE_SCOEXC("25")
					R_5025ORDERLINE_TRTEXC(taTRTEXC[nContadorTmpTOTAL])
					R_5025ORDERLINE_CODACT(taCODACT[nContadorTmpTOTAL])
					R_5025ORDERLINE_CODCLI(taCODCLI[nContadorTmpTOTAL])
					R_5025ORDERLINE_REFLIV(taREFLIV[nContadorTmpTOTAL])
					R_5025ORDERLINE_CODPAL(taCODPAL[nContadorTmpTOTAL])
					R_5025ORDERLINE_NLILIV(build(nContadorNLILIV:R05.0))
					
					flush(0,0,NL) >> tFileOutTemp
					nContadorLinhasEscritas++
				endif			
			endif
			nContadorTmpTOTAL++
		endwhile

		nContadorHeaderTmp++
	endwhile
   
	R_5099ORDERFOOTER_CODEXC("50")
	R_5099ORDERFOOTER_SEPEXC(".")
	R_5099ORDERFOOTER_SCOEXC("99")
	R_5099ORDERFOOTER_TRTEXC(taTRTEXC[nContadorHeaderTmp-1])
	R_5099ORDERFOOTER_CUMLIG(build(nContadorLinhasEncomenda))
	R_5099ORDERFOOTER_CODACT(taCODACT[nContadorHeaderTmp-1])
	R_5099ORDERFOOTER_CODCLI(taCODCLI[nContadorHeaderTmp-1])
	R_5099ORDERFOOTER_REFLIV(taREFLIV[nContadorHeaderTmp-1])

	flush(0,0,NL) >> tFileOutTemp
	nContadorLinhasEscritas++
   
    R_9900FILEFOOTER_CODEXC("99")
    R_9900FILEFOOTER_SEPEXC(".")
    R_9900FILEFOOTER_SCOEXC("00")
    R_9900FILEFOOTER_TRTEXC("")
    R_9900FILEFOOTER_EMTEXC("FM")
    R_9900FILEFOOTER_RCTEXC("")
    R_9900FILEFOOTER_DATEXC(time("now" ,"%Y%m%d"))
    R_9900FILEFOOTER_HEUEXC(time("now" ,"H%M%S"))
    R_9900FILEFOOTER_NUMEXC("")
    tContadorLinhasEscritas := build(nContadorLinhasEscritas)
	R_9900FILEFOOTER_CPTEXC(build(number(tContadorLinhasEscritas):R08.0))

    flush(0,0,NL)  >> tFileOutTemp
	nContadorLinhasEscritas++
    
	bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")

	close(tFileOutTemp)

	copy(tFileOutTemp,tFileOut)
	close(tFileOutTemp)
	remove(tFileOutTemp)
	close(tFileOut)
			
	bfSqlClose(tDbBase)

	exit(0)
endend

!===========================================================================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.PERFIL := "TOPCAU"
	TRACE.SENTIDO := "I"
	TRACE.MENSAGEM := "PEDIDO"
	TRACE.NUMDOC := taREFLIV[nContadorHeaderTmp-1] 
	TRACE.DATDOC := tfConvertDate(substr(taDATEXP[nContadorHeaderTmp-1],1,8), "YYYYMMDD" , "YYYY-MM-DD") 
	TRACE.MESSAGEID := build(nMessageID)
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut
	TRACE.LIBEXC := tLIBEXC

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)

	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)

		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	if tError="0" then
		close(tFileOutTemp)
		copy(tFileOutTemp,TRACE.Out)
		close(tFileOutTemp)
		close(TRACE.Out)
	endif

	flush(TRACE)
endfunction

!===========================================================================================================

function bfMajtraceM41(tStatus,tError,tNumDoc,tDataDoc,tFileOutDoc,tMensagem,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tMensagem
	TRACE.PERFIL := "LASA"
	TRACE.SENTIDO := "O"
	TRACE.NUMDOC := tNumDoc
	TRACE.DATDOC := tDataDoc
	TRACE.MESSAGEID := build(nMessageID:R010)   
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.FICHEIROSAIDA := tNameOutM41
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)

	SYSLOG.REFERENCE := build(nMessageID)

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)

	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	if tError="0" then
		close(tFileOutM41)
		copy(tFileOutM41,TRACE.Out)
		close(tFileOutM41)
		close(TRACE.Out)
	endif

	flush(TRACE)
endfunction
