%@(#)  source_filename.rte     modif:17-09-2018
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 17-09-2018  XX  Creation
! 17-09-2018  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

! Message definition
schema "XML/FMBrasil/SHIP_CONFIRM-BR_FMLOG-SAP-IWAY_INP - v01.xsd" validating
message "XML/FMBrasil/SHIP_CONFIRM-BR_FMLOG-SAP-IWAY_INP.dtd" building

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off
base "../fmbrasil_dlvnumcoty/fmbrasil_dlvnumcoty.cfg" fmbrasil_dlvnumcoty, readonly

! Input/output macros file
#define TX_PROG_INFO "M97_COTY_SAP_OUT"
#include "include/generix_func.inc"
#include "include/GEEXM97.inc"
#include "include/ExpedicaoGamaItaly.inc"
#include "include/ConfSeparacaoGamaItaly.inc"
#include "include/ConfSeparacaoSYSLEY.inc"
#include "include/ConfSeparacaoFM.inc"
#include "include/SERIAL_SEM_PARAR_TXT.inc"
!==============================================================================

! Initialization section

begin
	nPos := 1
	nRec := 1
	nMainIndex := 0
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameSA3"]

	! Parametros do TRACE
		nMessageID := cMessageID
		tPerfil := ""
		tSentido := "O"
		tMensagem := "M97 - UPDATE"
		tDataDocumento := time("now","%Y-%m-%d")

	!Inicio do processo
		log("------------------------------------------------------------", NL)
		log("Inicio: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
		log("Arquivo de entrada: ",pEDISEND.ORIGINAL.NAME, NL)
		log("------------------------------------------------------------", NL)

	!Abertura do banco de dados - WMS
		tDbBase		:= "FMWMS"
		tDbBase2	:= "FMWMS2"
		tDbBase3	:= "FMWMS3"
		tDbUsername	:= taPARAM["WMSDBUSER"]
		tDbPassword	:= taPARAM["WMSDBPASS"]
		tDbUrl		:= taPARAM["WMSDBURL"]

		bfSqlInit()
		if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
			bfSqlErro()
			exit(1)
		endif
		
		if not bfSqlJdbc(tDbBase2, tDbUsername, tDbPassword, tDbUrl) then
			bfSqlErro()
			exit(1)
		endif
		
		if not bfSqlJdbc(tDbBase3, tDbUsername, tDbPassword, tDbUrl) then
			bfSqlErro()
			exit(1)
		endif

	!Variaveis Gerais
		tCODACTConst := "001"
		nContadorLinhasEscritas  := 0
		
endbegin

!==============================================================================

line(1:"00.00")

	tREFLIV := ""
	bGeraArquivo := FALSE

endline

!==============================================================================

line(1:"97.50")
	
	! Variaveis
		tCODACTLido := S_GEEX9750_CODACT

	! GAMMA
		if S_GEEX9750_CODACT = "GIC" or S_GEEX9750_CODACT = "GIM" or S_GEEX9750_CODACT = "GIS" or S_GEEX9750_CODACT = "GIE" then
			bGeraArquivo := FALSE
			tCODACTLidoConvertido := "GAM"
			tAmbiente := "GAMA ITALY"

			if S_GEEX9750_ETALIV = "30" then
				tPickingStaDate := S_GEEX9750_DATEXC
				tPickingStaTime := S_GEEX9750_HEUEXC
				bGeraArquivo := TRUE
				tMensagemTrace := "INICIO PICKING"
				tREFLIV := S_GEEX9750_REFLIV
				tNUMLIV := S_GEEX9750_NUMLIV
			endif
			
			if bGeraArquivo = TRUE then
				
				tQuery := build("SELECT SD.NUMSUP "\
								",SE.TYPSUP "\
								",SD.SEQSUP "\
								",SE.CIRPIC "\
								",SD.CODPRO "\
								",SD.UVCSRV "\
								",SD.UVCLIV "\
								",SD.PCBPRO,SD.PRPPIC "\
								",CASE "\
								"WHEN SD.PRPPIC=5 THEN CEILING(SUM(BANC.VOL)) "\
								"ELSE (SD.UVCSRV/SD.PCBPRO) "\
								"END VOLUMES "\
								",TRIM(SD.MSGLIG) MSGLIG,TRIM(SD.DIPLIV) DIPLIV		   "\
								"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD, "\
								"(SELECT   "\
								"CASE "\
								"WHEN SD.PRPPIC=5 THEN (((SD.UVCSRV*PD.VOLUVC)/0.03654)/1000) "\
								"ELSE 0 "\
								"END VOL	 "\
								"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, "\
								"FGE50FM",tToInfologPrefixFilename,".GESUPD SD, "\
								"FGE50FM",tToInfologPrefixFilename,".GEPRO PD "\
								"WHERE SE.NUMSUP=SD.NUMSUP "\
								"AND SE.CODACT=SD.CODACT "\
								"AND SD.CODPRO=PD.CODPRO "\
								"AND SD.CODACT=PD.CODACT "\
								"AND SD.NUMLIV='",tNUMLIV,"'  "\
								"AND SE.TYPSUP<>3) BANC "\
								"WHERE SE.NUMSUP=SD.NUMSUP  "\
								"AND SE.CODACT=SD.CODACT    "\
								"AND SD.CODPRO=PD.CODPRO    "\
								"AND SD.CODACT=PD.CODACT    "\
								"AND SD.NUMLIV='",tNUMLIV,"' "\
								"AND SE.TYPSUP<>3   "\
								"GROUP BY SD.NUMSUP "\
										",SE.TYPSUP "\
										",SD.SEQSUP "\
										",SE.CIRPIC "\
										",SD.CODPRO "\
										",SD.UVCSRV "\
										",SD.UVCLIV "\
										",SD.PCBPRO "\
										",SD.MSGLIG "\
										",SD.DIPLIV "\
										",SD.PRPPIC "\
								"ORDER BY SE.TYPSUP DESC, SD.NUMSUP ASC, SD.SEQSUP ASC")

				log(tQuery,NL)

				if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				tVOLUMES    := ""
				nContadorResultadosQuery := 0
				
				bJaTemPRPPICIgualCinco := FALSE
						
				while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
					nContadorResultadosQuery++
					
					taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
					taMSGLIGOriginal[nContadorResultadosQuery] := peel(taDb2Array["MSGLIG"]," ")
					split(taMSGLIGOriginal[nContadorResultadosQuery],taDIPLIVCalculadoSplitado,"/")
					taDIPLIVCalculado[nContadorResultadosQuery] := peel(taDb2Array["DIPLIV"]," ")
					taPRPPIC[nContadorResultadosQuery] := peel(taDb2Array["PRPPIC"]," ")
					
					if taPRPPIC[nContadorResultadosQuery] = "5"  then
						if bJaTemPRPPICIgualCinco = FALSE then
							bJaTemPRPPICIgualCinco := TRUE
							if nContadorResultadosQuery = 1 then
								taVOLUMES[nContadorResultadosQuery] := "1"
							else
								taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1])+number(taVOLUMESAux[nContadorResultadosQuery-1]))
							endif
						else
							taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1]))
						endif
					else
						if nContadorResultadosQuery = 1 then
							taVOLUMES[nContadorResultadosQuery] := "1"
						else
							taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1])+number(taVOLUMESAux[nContadorResultadosQuery-1]))
						endif
					endif
							
					taQueryUpdade[nContadorResultadosQuery] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD "\
					"SET MSGLIG='",build(number(taVOLUMES[nContadorResultadosQuery]):R06),"/",build(number(taVOLUMESAux[nContadorResultadosQuery]):R06),"'  "\
					"WHERE NUMSUP='",peel(taDb2Array["NUMSUP"]," "),"' "\
					"AND SEQSUP='",peel(taDb2Array["SEQSUP"]," "),"' "\
					"AND CODPRO='",peel(taDb2Array["CODPRO"]," "),"' "\
					"AND UVCSRV='",peel(taDb2Array["UVCSRV"]," "),"' WITH NONE")
					
					log(taQueryUpdade[nContadorResultadosQuery],NL)
					
					!colocar aqui o update
					if not bfSqlSet(tDbBase2, "Updatedb2", taQueryUpdade[nContadorResultadosQuery]) then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("1 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(27)
					endif

					if not bfSqlExec(tDbBase2, "Updatedb2") then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("2 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(28)
					endif

					if not bfSqlCommit(tDbBase2, "Updatedb2") then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("3 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(29)
					endif

					if not bfSqlFree(tDbBase2, "Updatedb2") then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("4 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(30)
					endif
							
					remove(taDb2Array)
				endwhile

				if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
					print("FATAL", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif
			
				if nContadorResultadosQuery > 0 then
					bfMajtrace("Recebida","0",build(tPlacaVeiculo,"-",tRomaneio),tDataDocumento,tFileInput,tFileOut,"Produtos","")
				endif
			endif
					
			if S_GEEX9750_ETALIV = "60" then !gera arquivo expedicao
				tPickingStaDate := S_GEEX9750_DATEXC
				tPickingStaTime := S_GEEX9750_HEUEXC
				!bGeraArquivo := TRUE
				!tMensagemTrace := "INICIO PICKING"
				tREFLIV := S_GEEX9750_REFLIV
				!tNUMLIV := S_GEEX9750_NUMLIV
				split(tREFLIV,taREFLIVSplitExp,".")
				
				TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIV,MENSAGEM="M97 - EXPEDIÇÃO") !alterar aqui
			
				if valid(TRACE) then
					!nao faz nada porque é duplicado
				else
					nMessageID := cMessageID

					if S_GEEX9750_CODACT = "GIC" then
						tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GICXPEDICAO",time("now" ,"%Y%m%d%H%M%S"),"_",taREFLIVSplitExp[1],".txt")
						tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GICXPEDICAO",time("now" ,"%Y%m%d%H%M%S"),"_",taREFLIVSplitExp[1],".txt")
						tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GICXPEDICAO",time("now" ,"%Y%m%d%H%M%S"),"_",taNumSerie[1],".txt")
					else
						tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GIEXPEDICAO",time("now" ,"%Y%m%d%H%M%S"),"_",taREFLIVSplitExp[1],".txt")
						tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GIEXPEDICAO",time("now" ,"%Y%m%d%H%M%S"),"_",taREFLIVSplitExp[1],".txt")
						tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GIEXPEDICAO",time("now" ,"%Y%m%d%H%M%S"),"_",taNumSerie[1],".txt")
					endif
					
					R_CabecalhoArquivo_IDArquivo("COL")
					flush(0,0,NL) >> tFileOutTemp
					
					R_CabelhoDocumento_NF(taREFLIVSplitExp[1])
					R_CabelhoDocumento_DataColeta(tPickingStaDate)
					R_CabelhoDocumento_HoraColeta(tPickingStaTime)
					R_CabelhoDocumento_SerieNF(build(number(taREFLIVSplitExp[2]):R03))
					
					if S_GEEX9750_CODACT = "GIC" then 
						R_CabelhoDocumento_CNPJempOrigem("07293118000790")
					endif
					
					if S_GEEX9750_CODACT = "GIM" then 
						R_CabelhoDocumento_CNPJempOrigem("07293118000102")
					endif

					if S_GEEX9750_CODACT = "GIS" then 
						R_CabelhoDocumento_CNPJempOrigem("07293118000285")
					endif

					if S_GEEX9750_CODACT = "GIE" then 
						R_CabelhoDocumento_CNPJempOrigem("07293118000609")
					endif
					
					flush(0,0,NL) >> tFileOutTemp
					close(tFileOutTemp)
					bfMajtraceExpedicao("Recebida","0",build(tPlacaVeiculo,"-",tRomaneio),tDataDocumento,tFileInput,tFileOut,"Produtos","")
					
					close(tFileOutTemp)
					copy(tFileOutTemp,tFileOut)
					close(tFileOutTemp)
					remove(tFileOutTemp)
					close(tFileOut)
				endif
			endif
			
			if S_GEEX9750_ETALIV = "50" then !gera arquivo CONFIMACAO SEPARACAO
				tPickingStaDate := S_GEEX9750_DATEXC
				tPickingStaTime := S_GEEX9750_HEUEXC
				!bGeraArquivo := TRUE
				!tMensagemTrace := "INICIO PICKING"
				tREFLIV := S_GEEX9750_REFLIV
				tNUMLIV := S_GEEX9750_NUMLIV
				split(tREFLIV,taREFLIVSplitExp,".")
				TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIV,MENSAGEM="M97 - CONF SEPARAÇÃO")
				
				if valid(TRACE) then
					!nao faz nada porque é duplicado
				else
					nMessageID := cMessageID

					if S_GEEX9750_CODACT = "GIC" then
						tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GICCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",replace(taREFLIVSplitExp[1], " ", "_"),".txt")
						tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GICCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",replace(taREFLIVSplitExp[1], " ", "_"),".txt")
						tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GICCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",replace(taREFLIVSplitExp[1], " ", "_"),".txt")
					else
						tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GISCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",replace(taREFLIVSplitExp[1], " ", "_"),".txt")
						tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GISCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",replace(taREFLIVSplitExp[1], " ", "_"),".txt")
						tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"GISCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",replace(taREFLIVSplitExp[1], " ", "_"),".txt")
					endif
					
					R_CabecalhoArquivo_IdArquivo("EXP")
					flush(0,0,NL) >> tFileOutTemp
					
					tCODPRO := ""
					
					tQuery := build("SELECT CODPRO FROM FGE50FM",tToInfologPrefixFilename,".GELIVD WHERE NUMLIV='",tNUMLIV,"'")
					
					log(NL,tQuery,NL)
					
					if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtraceSeparacao("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtraceSeparacao("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					tVOLUMES    := ""
					nContadorResultadosQuery := 0
					
					while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
						nContadorResultadosQuery++
						
						tCODPRO := peel(taDb2Array["CODPRO"]," ")
						R_CabecalhoDocumento_NF(taREFLIVSplitExp[1])
						R_CabecalhoDocumento_DataLibertacao(tPickingStaDate)
						R_CabecalhoDocumento_HoraLibertacao(tPickingStaTime)
						R_CabecalhoDocumento_SeriaNF(build(number(taREFLIVSplitExp[2]):R03))
						
						if S_GEEX9750_CODACT = "GIC" then 
							R_CabecalhoDocumento_CNPJRemetente("07293118000790")
						endif
						
						if S_GEEX9750_CODACT = "GIM" then 
							R_CabecalhoDocumento_CNPJRemetente("07293118000102")
						endif

						if S_GEEX9750_CODACT = "GIS" then 
							R_CabecalhoDocumento_CNPJRemetente("07293118000285")
						endif

						if S_GEEX9750_CODACT = "GIE" then 
							R_CabecalhoDocumento_CNPJRemetente("07293118000609")
						endif
						
						R_CabecalhoDocumento_CodigoProduto(tCODPRO)
								
						tQuery := build("SELECT CODPRO, SUM (UVCSRV) UVCSRV, SUM (UVCLIV) UVCLIV FROM FGE50FM",tToInfologPrefixFilename,".GESUPD WHERE NUMLIV='",tNUMLIV,"' AND CODPRO='",tCODPRO,"' GROUP BY CODPRO")
						
						log(NL,tQuery,NL)
						
						if bfSqlSet( tDbBase3 ,"SELECTdb2"  , tQuery) = FALSE then
							print("FATAL ", tfSqlErrorStr())
							bfMajtraceSeparacao("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
						endif

						if bfSqlOpen( tDbBase3 , "SELECTdb2" ) = FALSE then
							print("FATAL ", tfSqlErrorStr())
							bfMajtraceSeparacao("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
						endif

						tVOLUMES    := ""
						nContadorResultadosQuery := 0
						tUVCSRV := ""
						tUVCLIV := ""

						while bfSqlFetchArray( tDbBase3 , "SELECTdb2" ,taDb2Array) = TRUE do
							nContadorResultadosQuery++
							
							tCODPRO2 := peel(taDb2Array["CODPRO"]," ")
							tUVCSRV := peel(taDb2Array["UVCSRV"]," ")
							tUVCLIV := peel(taDb2Array["UVCLIV"]," ")
							remove(taDb2Array)
						endwhile

						if bfSqlFree( tDbBase3 , "SELECTdb2"  ) = FALSE then
							print("FATAL", tfSqlErrorStr())
							bfMajtraceSeparacao("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
						endif
						
						if length(tUVCLIV) > 0  and length(tUVCSRV) > 0 then
							if  number(tUVCLIV) < number(tUVCSRV) then
								R_CabecalhoDocumento_Status("0")
							endif
						
							if  number(tUVCLIV) = number(tUVCSRV) then
								R_CabecalhoDocumento_Status("1")
							endif
						else
							R_CabecalhoDocumento_Status("")
						endif
						
						flush(0,0,NL) >> tFileOutTemp
						remove(taDb2Array)
					endwhile

					if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
						print("FATAL", tfSqlErrorStr())
						bfMajtraceSeparacao("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif
					
					close(tFileOutTemp)
					bfMajtraceSeparacao("Recebida","0",build(tPlacaVeiculo,"-",tRomaneio),tDataDocumento,tFileInput,tFileOut,"Produtos","")
					
					close(tFileOutTemp)
					copy(tFileOutTemp,tFileOut)
					close(tFileOutTemp)
					remove(tFileOutTemp)
					close(tFileOut)
				endif
			endif
		endif

	! SYSLEY
		if S_GEEX9750_CODACT = "SIS" then
			if S_GEEX9750_ETALIV = "30" then !and S_GEEX9750_CODLDP = "PCK" then !gera arquivo CONFIMACAO SEPARACAO
				tPickingStaDate := S_GEEX9750_DATEXC
				tPickingStaTime := S_GEEX9750_HEUEXC
				!bGeraArquivo := TRUE
				!tMensagemTrace := "INICIO PICKING"
				tREFLIV := S_GEEX9750_REFLIV
				tNUMLIV := S_GEEX9750_NUMLIV
				split(tREFLIV,taREFLIVSplitExp,".")
				TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIV,MENSAGEM="M97 - CONF SEPARAÇÃO",PERFIL="SISLEY")
				
				if valid(TRACE) then
					!nao faz nada porque é duplicado
					log("duplicado!",NL)
				else
					nMessageID := cMessageID
					tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",taREFLIVSplitExp[1],".txt")
					tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",taREFLIVSplitExp[1],".txt")
					tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEP",time("now" ,"%Y%m%d%H%M%S"),"_",taNumSerie[1],".txt")
					
					tCODPRO := ""
					tQuery := build("SELECT CASE SE.CODACT ", NL," "\
									"		WHEN 'SIS' THEN '016587166000439' END CNPJ_ORIGEM ", NL," "\
									"	,'002462805000778' CNPJ_DESTINATARIO ", NL," "\
									"	,LE.CODTLI AS TIPO_OPERACAO ", NL," "\
									"	,SE.DATPRP AS DATA_SEPARACAO ", NL," "\
									"	,SE.REFLIV AS PEDIDO ", NL," "\
									"	,SE.NUMSUP AS VOLUME ", NL," "\
									"	,SE.CUMPOI AS TOTAL_PESO_BRUTO ", NL," "\
									"	,SD.PDNUVC * SD.UVCLIV AS TOTAL_PESO_LIQUIDO ", NL," "\
									"	,SD.NLILIV AS ITEM ", NL," "\
									"	,SD.CODPRO AS CODIGO_DO_PRODUTO ", NL," "\
									"	,SD.UVCLIV AS QUANTIDADE ", NL," "\
									"	,AC.VALRUB AS DEPOSITO_DO_CLIENTE ", NL," "\
									"	,CASE  ", NL," "\
									"		WHEN GP.CODLOT = '' THEN 'NOLOT' ", NL," "\
									"		WHEN LENGTH(TRIM(GP.CODLOT)) > 6 THEN SUBSTR(GP.CODLOT,7,6) ", NL," "\
									"		ELSE TRIM(GP.CODLOT) END LOTE ", NL," "\
									"	,SE.CODLDP CODLDP ", NL," "\
									"	,SD.CODPAL CODPAL ", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GELIVE       AS LE ", NL," "\
									"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE  AS SE ", NL," "\
									"	ON LE.NUMLIV = SE.NUMLIV AND LE.SNULIV = SE.SNULIV AND LE.CODACT = SE.CODACT ", NL," "\
									"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD  AS SD ", NL," "\
									"	ON SE.NUMSUP = SD.NUMSUP AND SE.CODACT = SD.CODACT ", NL," "\
									"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPAL   AS GP ", NL," "\
									"	ON GP.NUMPAL = SD.NUMPAL AND GP.CODPAL = SD.CODPAL AND GP.CODACT = SD.CODACT ", NL," "\
									"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEACRUB AS AC ", NL," "\
									"	ON AC.CODACT = SD.CODACT ", NL," "\
									"WHERE SE.NUMLIV = ",tNUMLIV," ", NL," "\
									"AND SE.LIBSUP NOT IN ('Support de manquants (packing)' , 'Faltantes' , 'Manquants') ", NL," "\
									"AND SD.UVCLIV > 0 ", NL," "\
									"ORDER BY 6, 10 ")

					log(NL,tQuery,NL)
					
					if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
						bfSqlErro()
						exit(1)	
					endif

					if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
						bfSqlErro()
						exit(1)	
					endif

					tVOLUMES    := ""
					nContadorResultadosQuery := 0
					nPesoBrutoTotal := 0
					nPesoLiquidoTotal := 0
					nNumeroLinhasVolume := 0
					nNumeroSupVirtual := 0
					bTemDiferenteDeCODLDP := FALSE
					while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
						nContadorResultadosQuery++
						tCODPRO := peel(taDb2Array["CODPRO"]," ")
						
						if peel(taDb2Array["CODLDP"]," ") <> "PCK" then
							bTemDiferenteDeCODLDP := TRUE
							!break
						endif

						if nContadorResultadosQuery = 1 then
							nMessageID := cMessageID
							if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
								tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEPEC",time("now" ,"%Y%m%d%H%M%S"),"_",S_GEEX9750_REFLIV,".txt")
								tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEPEC",time("now" ,"%Y%m%d%H%M%S"),"_",S_GEEX9750_REFLIV,".txt")
								tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEPEC",time("now" ,"%Y%m%d%H%M%S"),"_",S_GEEX9750_REFLIV,".txt")
							endif

							if peel(taDb2Array["TIPO_OPERACAO"]," ") = "VD" then
								tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEPVD",time("now" ,"%Y%m%d%H%M%S"),"_",S_GEEX9750_REFLIV,".txt")
								tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEPVD",time("now" ,"%Y%m%d%H%M%S"),"_",S_GEEX9750_REFLIV,".txt")
								tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLidoConvertido,"SISCONFSEPVD",time("now" ,"%Y%m%d%H%M%S"),"_",S_GEEX9750_REFLIV,".txt")
							endif	
						
							R_HeaderSIS_TIPODEREGISTRO("0")
							R_HeaderSIS_CNPJORIGEM(peel(taDb2Array["CNPJ_ORIGEM"]," "))
							R_HeaderSIS_CNPJDESTINATARIO(peel(taDb2Array["CNPJ_DESTINATARIO"]," "))
							R_HeaderSIS_COMPLHEADER("                                                              ")
							
							if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
								flush(0,0,"\r\n") >> tFileOutTemp
							else
								flush(0,0,NL) >> tFileOutTemp
							endif
							
							R_HeaderOCSIS_TIPODEREGISTRO("1")
							R_HeaderOCSIS_TIPOOPERACAO(peel(taDb2Array["TIPO_OPERACAO"]," "))
							R_HeaderOCSIS_DATASEPARACAO(tfConvertDate(S_GEEX9750_DATEXC, "YYYYMMDD" , "DDMMYYYY"))
							R_HeaderOCSIS_ORDEMCARGA(build("00000",build(number(S_GEEX9750_REFLIV):R015)))
							R_HeaderOCSIS_esp("                                               ")
							
							if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
								flush(0,0,"\r\n") >> tFileOutTemp
							else
								flush(0,0,NL) >> tFileOutTemp
							endif
							
							R_HeaderPedSIS_Identificacaodoregistro("2")
							R_HeaderPedSIS_NumerodoPedidodeCompra(build("00000",build(number(S_GEEX9750_REFLIV):R015)))
							R_HeaderPedSIS_comnf("                                                                        ")
							
							if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
								flush(0,0,"\r\n") >> tFileOutTemp
							else
								flush(0,0,NL) >> tFileOutTemp
							endif					
						endif
						
						taDb2Array["TOTAL_PESO_LIQUIDO"] := replace(taDb2Array["TOTAL_PESO_LIQUIDO"],",",".")
						taDb2Array["TOTAL_PESO_LIQUIDO"] := build(number(taDb2Array["TOTAL_PESO_LIQUIDO"])*1000)
						taDb2Array["TOTAL_PESO_BRUTO"] := replace(taDb2Array["TOTAL_PESO_BRUTO"],",",".")
						taDb2Array["TOTAL_PESO_BRUTO"] := build(number(taDb2Array["TOTAL_PESO_BRUTO"])*1000)
						
						if nContadorResultadosQuery = 1 or tVolumeAnterior <> peel(taDb2Array["VOLUME"]," ") then
							R_HeaderVolSIS_Identificacaodoregistro("3")
							nNumeroSupVirtual++
							R_HeaderVolSIS_IdentVolume(build(S_GEEX9750_REFLIV,nNumeroSupVirtual:R06))
							R_HeaderVolSIS_CodEmb("EMBALAGEM VIRTUAL")
							R_HeaderVolSIS_PesoBrutoVol(build(number(peel(taDb2Array["TOTAL_PESO_BRUTO"]," ")):R08))
							nPesoBrutoTotal := nPesoBrutoTotal + number(peel(taDb2Array["TOTAL_PESO_BRUTO"]," "))
							R_HeaderVolSIS_PesoLiqVol(build(number(peel(taDb2Array["TOTAL_PESO_LIQUIDO"]," ")):R08))
							nPesoLiquidoTotal := nPesoLiquidoTotal + number(peel(taDb2Array["TOTAL_PESO_LIQUIDO"]," "))
							R_HeaderVolSIS_TipoVol("CA")
							R_HeaderVolSIS_comnf("            ")
							nNumeroLinhasVolume++
							if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
								flush(0,0,"\r\n") >> tFileOutTemp
							else
								flush(0,0,NL) >> tFileOutTemp
							endif
						endif
						
						R_DetalheSIS_Identificacaodoregistro("4")
						R_DetalheSIS_SequenciadoprodutonaNotaFiscal(build(number(peel(taDb2Array["ITEM"]," ")):R06))
						R_DetalheSIS_CodigodoSKU(peel(taDb2Array["CODIGO_DO_PRODUTO"]," "))
						tContAux := build(number(peel(taDb2Array["QUANTIDADE"]," ")) * 1000)
						R_DetalheSIS_QuantidadeSeparada(build(number(tContAux):R07))
						R_DetalheSIS_Deposito(peel(taDb2Array["DEPOSITO_DO_CLIENTE"]," "))
						R_DetalheSIS_Lote(peel(taDb2Array["LOTE"]," "))
						R_DetalheSIS_UnidadedeMedidadoproduto("EA")
						
						if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
							flush(0,0,"\r\n") >> tFileOutTemp
						else
							flush(0,0,NL) >> tFileOutTemp
						endif
						
						tVolumeAnterior := peel(taDb2Array["VOLUME"]," ")
						tTipoOeracaoQueryAux := peel(taDb2Array["TIPO_OPERACAO"]," ")
						remove(taDb2Array)
					endwhile
					
					if nContadorResultadosQuery > 0 then
						R_TraillerSIS_Identificacaodoregistro("9")
						R_TraillerSIS_Totaldelinhasdodetalhe(build(nContadorResultadosQuery:R03))
						R_TraillerSIS_TotalPesoBruto(build(nPesoBrutoTotal:R09))
						R_TraillerSIS_TotalPesoLiq(build(nPesoLiquidoTotal:R09))
						R_TraillerSIS_QtdVolumes(build(nNumeroLinhasVolume:R07,"00"))
						R_TraillerSIS_COMPLHEADER3("                                                              ")
						
						if tTipoOeracaoQueryAux = "EC" then
							flush(0,0,"\r\n") >> tFileOutTemp
						else
							flush(0,0,NL) >> tFileOutTemp
						endif
					
						if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
							print("FATAL", tfSqlErrorStr())
							bfMajtraceSeparacaoSISLEY("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
							exit(1)
						endif
					
						close(tFileOutTemp)
						bfMajtraceSeparacaoSISLEY("Recebida","0",build(tPlacaVeiculo,"-",tRomaneio),tDataDocumento,tFileInput,tFileOut,"Produtos","")
						
						close(tFileOutTemp)
						copy(tFileOutTemp,tFileOut)
						close(tFileOutTemp)
						remove(tFileOutTemp)
						close(tFileOut)
					endif
				endif
			endif
		endif

	! SEM PARAR
		if S_GEEX9750_CODACT = "SEM" then
			tAmbiente := "SEM PARAR"
			tPerfil := "SEM PARAR"

			if peel(S_GEEX9750_CODCLI, " ") <> "ETIQUETA" then

				! Variaveis
					bGeraArquivo := FALSE
					tVOLUMES := ""
					nContadorResultadosQuery := 0
					bJaTemPRPPICIgualCinco := FALSE
					bPrimeiroKAILIV := TRUE

					tPickingStaDate := S_GEEX9750_DATEXC
					tPickingStaTime := S_GEEX9750_HEUEXC
					tREFLIV := S_GEEX9750_REFLIV
					tNUMLIV := S_GEEX9750_NUMLIV

				! UPDATE
					tMensagem := "M97 - UPDATE"
					if S_GEEX9750_ETALIV = "30" then
						! Criacao do Arquivo
							tNameOut := build("FM",tToInfologPrefixFilename,"SEM_",time("now" ,"%Y%m%d%H%M%S"),".txt")
							tFileOut := build(sHOME,"/FMBR_AS2/",tNameOut)
							tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/",tNameOut)

						tQuery := build("SELECT  SD.NUMSUP ", NL," "\
										"       ,SE.TYPSUP ", NL," "\
										"       ,SE.KAILIV ", NL," "\
										"       ,SE.TOPMNQ ", NL," "\
										"       ,VG.ETAVAG ", NL," "\
										"       ,SD.SEQSUP ", NL," "\
										"       ,SE.CIRPIC ", NL," "\
										"       ,SD.CODPRO ", NL," "\
										"       ,SD.UVCSRV ", NL," "\
										"       ,SD.UVCLIV ", NL," "\
										"       ,SD.PCBPRO ", NL," "\
										"       ,SD.PRPPIC ", NL," "\
										"       ,CASE WHEN SD.PRPPIC=5 THEN CEILING(SUM(BANC.VOL)) ", NL," "\
										"             WHEN SD.PRPPIC=1 THEN CEILING (SD.UVCSRV/SD.PCBPRO)  ELSE (SD.UVCSRV/SD.PCBPRO) END VOLUMES ", NL," "\
										"       ,TRIM(SD.MSGLIG) MSGLIG ", NL," "\
										"       ,TRIM(SD.DIPLIV) DIPLIV ", NL," "\
										"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD, FGE50FM",tToInfologPrefixFilename,".GEVAG VG, ", NL," "\
										"( ", NL," "\
										"	SELECT  CASE WHEN SD.PRPPIC=5 THEN (((SD.UVCSRV*PD.VOLUVC)/0.03654)/1000)  ELSE 0 END VOL ", NL," "\
										"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD ", NL," "\
										"	WHERE SE.NUMSUP=SD.NUMSUP ", NL," "\
										"	AND SE.CODACT=SD.CODACT ", NL," "\
										"	AND SD.CODPRO=PD.CODPRO ", NL," "\
										"	AND SD.CODACT=PD.CODACT ", NL," "\
										"	AND SD.NUMLIV='",tNUMLIV,"' ", NL," "\
										"	AND SE.TYPSUP<>3 ", NL," "\
										") BANC ", NL," "\
										"WHERE SE.NUMSUP=SD.NUMSUP ", NL," "\
										"AND SE.NUMVAG=VG.NUMVAG ", NL," "\
										"AND SE.CODACT=SD.CODACT ", NL," "\
										"AND SD.CODPRO=PD.CODPRO ", NL," "\
										"AND SD.CODACT=PD.CODACT ", NL," "\
										"AND SD.NUMLIV='",tNUMLIV,"' ", NL," "\
										"AND SE.TYPSUP<>3 ", NL," "\
										"GROUP BY  SD.NUMSUP ", NL," "\
										"         ,SE.TYPSUP ", NL," "\
										"         ,SE.KAILIV ", NL," "\
										"         ,SE.TOPMNQ ", NL," "\
										"         ,VG.ETAVAG ", NL," "\
										"         ,SD.SEQSUP ", NL," "\
										"         ,SE.CIRPIC ", NL," "\
										"         ,SD.CODPRO ", NL," "\
										"         ,SD.UVCSRV ", NL," "\
										"         ,SD.UVCLIV ", NL," "\
										"         ,SD.PCBPRO ", NL," "\
										"         ,SD.MSGLIG ", NL," "\
										"         ,SD.DIPLIV ", NL," "\
										"         ,SD.PRPPIC ", NL," "\
										"ORDER BY SE.TOPMNQ ", NL," "\
										"         ,SE.TYPSUP DESC ", NL," "\
										"         ,SE.KAILIV DESC ", NL," "\
										"         ,SD.NUMSUP ", NL," "\
										"         ,SD.SEQSUP ASC ")

						log("------------------------------------------------------------", NL)
						log(tQuery,NL)
						log("------------------------------------------------------------", NL)

						if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
							bfSqlErro()
							exit(1)	
						endif

						if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
							bfSqlErro()
							exit(1)	
						endif

						while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
							nContadorResultadosQuery++

							taPRPPIC[nContadorResultadosQuery] := peel(taDb2Array["PRPPIC"]," ")
							taMSGLIGOriginal[nContadorResultadosQuery] := peel(taDb2Array["MSGLIG"]," ")
							split(taMSGLIGOriginal[nContadorResultadosQuery],taDIPLIVCalculadoSplitado,"/")
							taDIPLIVCalculado[nContadorResultadosQuery] := peel(taDb2Array["DIPLIV"]," ")
							taNUMSUP[nContadorResultadosQuery] := peel(taDb2Array["NUMSUP"]," ")
							taTOPMNQ[nContadorResultadosQuery] := peel(taDb2Array["TOPMNQ"]," ")
							taETAVAG[nContadorResultadosQuery] := peel(taDb2Array["ETAVAG"]," ")
							taKAILIV[nContadorResultadosQuery] := peel(taDb2Array["KAILIV"]," ")
							taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
							log("taVOLUMESAux1[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
							log("taVOLUMESAux1[",nContadorResultadosQuery,"] = ",build(number(peel(taDb2Array["VOLUMES"]," "))),NL)
							log("taVOLUMESAux1[",nContadorResultadosQuery,"] = ",build(number(taVOLUMESAux[nContadorResultadosQuery])),NL)

							if taETAVAG[nContadorResultadosQuery] = "30" and taTOPMNQ[nContadorResultadosQuery] <> "1" then
								log("nContadorResultadosQuery = ",nContadorResultadosQuery,NL)
								if nContadorResultadosQuery = 1 then
									if peel(taDb2Array["KAILIV"]," ") = "1" then
										taVOLUMES[nContadorResultadosQuery] := "1"
										log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
										taVOLUMESAux[nContadorResultadosQuery] := "1"
										log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
									else
										taVOLUMES[nContadorResultadosQuery] := "1"
										log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
										taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
										log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
									endif
									if peel(taDb2Array["KAILIV"]," ") = "1" then
										bPrimeiroKAILIV := FALSE
									endif
								else
									log("peel(taDb2Array[KAILIV]," ") = ",peel(taDb2Array["KAILIV"]," "),NL)
									if peel(taDb2Array["KAILIV"]," ") = "1" then
										if bPrimeiroKAILIV = TRUE then
											bPrimeiroKAILIV := FALSE
											taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery - 1]) + number(taVOLUMESAux[nContadorResultadosQuery - 1]))
											log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
											taVOLUMESAux[nContadorResultadosQuery] := "1"
											log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
										else
											taVOLUMES[nContadorResultadosQuery] := taVOLUMES[nContadorResultadosQuery - 1]
											log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
											taVOLUMESAux[nContadorResultadosQuery] := "1"
											log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
										endif
									else
										taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery - 1]) + number(taVOLUMESAux[nContadorResultadosQuery - 1]))
										log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
										taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
										log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
									endif
								endif
							else
								taVOLUMES[nContadorResultadosQuery] := "0"
								taVOLUMESAux[nContadorResultadosQuery] := "0"
							endif
							
							taQueryUpdade[nContadorResultadosQuery] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD ", NL," "\
																			"SET MSGLIG='",build(number(taVOLUMES[nContadorResultadosQuery]):R06),"/",build(number(taVOLUMESAux[nContadorResultadosQuery]):R06),"' ", NL," "\
																			"WHERE NUMSUP='",peel(taDb2Array["NUMSUP"]," "),"' ", NL," "\
																			"AND SEQSUP='",peel(taDb2Array["SEQSUP"]," "),"' ", NL," "\
																			"AND CODPRO='",peel(taDb2Array["CODPRO"]," "),"' ", NL," "\
																			"AND UVCSRV='",peel(taDb2Array["UVCSRV"]," "),"' WITH NONE")
							
							log("------------------------------------------------------------", NL)
							log(taQueryUpdade[nContadorResultadosQuery],NL)
							log("------------------------------------------------------------", NL)

							!colocar aqui o update
							
							if not bfSqlSet(tDbBase2, "Updatedb2", taQueryUpdade[nContadorResultadosQuery]) then
								bfSqlErro()
								exit(1)	
							endif
							if not bfSqlExec(tDbBase2, "Updatedb2") then
								bfSqlErro()
								exit(1)	
							endif
							if not bfSqlCommit(tDbBase2, "Updatedb2") then
								bfSqlErro()
								exit(1)	
							endif
							if not bfSqlFree(tDbBase2, "Updatedb2") then
								bfSqlErro()
								exit(1)	
							endif

							remove(taDb2Array)
						endwhile

						if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
							bfSqlErro()
							exit(1)	
						endif

						if nContadorResultadosQuery > 0 then
							bfMajtrace( "Recebida" \
										,"0" \
										,build(tPlacaVeiculo,"-",tRomaneio) \
										,tDataDocumento \
										,tFileInput \
										,tFileOut \
										,tMensagem \
										,"")
						endif
					endif

				! CONFSEP/SERIE
					tMensagem := "M97 - CONF SEPARAÇÃO"
					if S_GEEX9750_ETALIV = "50" then
						! Variaveis
							tVolumeAnterior := ""
							tCODPRO := ""
							bValSQL := FALSE
							bNaoGeraSCO := FALSE
							split(tREFLIV,taREFLIVSplitExp,".")

						! Duplicidade
							TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIV,MENSAGEM="M97 - CONF SEPARAÇÃO",PERFIL="SEM PARAR")
						
						if valid(TRACE) then
							!nao faz nada porque é duplicado
							log("M97 - CONF SEPARAÇÃO duplicado!",NL)
						else
							tQuery := build("SELECT  CASE WHEN SE.CODACT='SEM' THEN '02462805000778' END CNPJ_ORIGEM  ",NL," "\
											"       ,'02462805000778' CNPJ_DESTINATARIO ",NL," "\
											"       ,LE.CODTLI TIPO_OPERACAO ",NL," "\
											"       ,SE.DATPRP DATA_SEPARACAO ",NL," "\
											"       ,LE.CRILIV ORDEM_CARGA ",NL," "\
											"       ,SE.REFLIV PEDIDO ",NL," "\
											"       ,SE.KAILIV KAILIV ",NL," "\
											"       ,LE.DIPLIV DIPLIV ",NL," "\
											"       ,SE.CODEMB EMBALAGEM ",NL," "\
											"       ,LE.CODTRA CNPJ_TRANSPORTADORA ",NL," "\
											"       ,SE.NUMSUP VOLUME ",NL," "\
											"       ,CASE WHEN SE.KAILIV <> ('1') THEN TRIM(SE.CUMPOI/(SD.UVCLIV/SD.PCBPRO)) ELSE SE.CUMPOI END TOTAL_PESO_BRUTO ",NL," "\
											"       ,SUM (SD.PDNUVC*SD.UVCLIV) TOTAL_PESO_LIQUIDO ",NL," "\
											"       ,SD.NLILIV ITEM ",NL," "\
											"       ,SD.PCBPRO PCBPRO ",NL," "\
											"       ,SD.CODPRO CODIGO_DO_PRODUTO ",NL," "\
											"       ,SUM(SD.UVCLIV) QUANTIDADE ",NL," "\
											"       ,SD.MOTIMM IMMO ",NL," "\
											"       ,AC.VALRUB DEPOSITO_DO_CLIENTE ",NL," "\
											"       ,CASE WHEN SD.CODLOT= '' THEN '00000000000000000000'  ELSE SD.CODLOT END LOTE ",NL," "\
											"       ,BANC.VOLUMES VOLUMESTOTAL ",NL," "\
											"       ,SD.PRPPIC PRPPIC ",NL," "\
											"       ,SE.CODLDP CODLDP ",NL," "\
											"       ,EM.PROEMB TIP_EMB ",NL," "\
											"       ,CASE WHEN SE.CODLDP='PCK' THEN EM.HAUSCL  ELSE PR.HAUCOL END ALT_VOL ",NL," "\
											"       ,CASE WHEN SE.CODLDP='PCK' THEN EM.LRGPAL  ELSE PR.LRGCOL END LRG_VOL ",NL," "\
											"       ,CASE WHEN SE.CODLDP='PCK' THEN EM.LNGPAL  ELSE PR.LNGCOL END PRF_VOL ",NL," "\
											"FROM FGE50FM",tToInfologPrefixFilename,".GELIVE LE ",NL," "\
											"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE ",NL," "\
											"ON LE.NUMLIV=SE.NUMLIV AND LE.CODACT=SE.CODACT ",NL," "\
											"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ",NL," "\
											"ON SE.NUMSUP=SD.NUMSUP AND SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT ",NL," "\
											"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEACRUB AC ",NL," "\
											"ON AC.CODACT=SD.CODACT ",NL," "\
											"LEFT JOIN ",NL," "\
											"( ",NL," "\
											"    SELECT  S.NUMLIV ",NL," "\
											"            ,SUM(CASE ",NL," "\
											"                    WHEN S.CODLDP = 'PCK' THEN 1 ",NL," "\
											"                    WHEN S.CODLDP <> 'PCK' AND S.CUMCOL = 0 THEN SUPD.TOTCOL ",NL," "\
											"                    ELSE S.CUMCOL ",NL," "\
											"                END) AS VOLUMES ",NL," "\
											"    FROM FGE50FM",tToInfologPrefixFilename,".GESUPE S ",NL," "\
											"    JOIN ",NL," "\
											"            (SELECT Z.NUMSUP AS SUP, Z.CODLDP AS PAK, SUM (T.UVCLIV/T.PCBPRO) AS TOTCOL ",NL," "\
											"            FROM FGE50FM",tToInfologPrefixFilename,".GESUPE Z ",NL," "\
											"            JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD T ",NL," "\
											"            ON Z.NUMSUP=T.NUMSUP ",NL," "\
											"            AND Z.NUMLIV='",tNUMLIV,"' ",NL," "\
											"            AND Z.CODACT='",S_GEEX9750_CODACT,"' ",NL," "\
											"            AND Z.TYPSUP<>'3' ",NL," "\
											"            GROUP BY Z.NUMSUP, Z.CODLDP) SUPD ",NL," "\
											"    ON S.NUMSUP = SUPD.SUP ",NL," "\
											"    WHERE S.TYPSUP <> '3' ",NL," "\
											"    AND S.NUMLIV='",tNUMLIV,"' ",NL," "\
											"    AND S.CODACT='",S_GEEX9750_CODACT,"' ",NL," "\
											"    GROUP BY S.NUMLIV ",NL," "\
											") BANC ",NL," "\
											"ON BANC.NUMLIV = SE.NUMLIV ",NL," "\
											"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEZEMB EM ",NL," "\
											"ON SE.CODEMB=EM.CODEMB ",NL," "\
											"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PR ",NL," "\
											"ON SD.CODPRO=PR.CODPRO ",NL," "\
											"WHERE SE.NUMLIV='",tNUMLIV,"' ",NL," "\
											"AND AC.VALRUB = '",S_GEEX9750_CODCLI,"' ",NL," "\
											"AND SE.TOPMNQ <> '1' ",NL," "\
											"GROUP BY  SE.CODACT ",NL," "\
											"         ,EM.PROEMB ",NL," "\
											"         ,EM.HAUSCL ",NL," "\
											"         ,EM.LRGPAL ",NL," "\
											"         ,EM.LNGPAL ",NL," "\
											"         ,PR.HAUCOL ",NL," "\
											"         ,PR.LNGCOL ",NL," "\
											"         ,PR.LRGCOL ",NL," "\
											"         ,LE.CODTLI ",NL," "\
											"         ,SE.DATPRP ",NL," "\
											"         ,LE.CRILIV ",NL," "\
											"         ,SE.REFLIV ",NL," "\
											"         ,SE.KAILIV ",NL," "\
											"         ,LE.DIPLIV ",NL," "\
											"         ,SE.CODEMB ",NL," "\
											"         ,LE.CODTRA ",NL," "\
											"         ,SE.NUMSUP ",NL," "\
											"         ,SE.CUMPOI ",NL," "\
											"         ,SD.PRPPIC ",NL," "\
											"         ,SE.CODLDP ",NL," "\
											"         ,SD.NLILIV ",NL," "\
											"         ,SD.CODPRO ",NL," "\
											"         ,SD.UVCLIV ",NL," "\
											"         ,SD.MOTIMM ",NL," "\
											"         ,AC.VALRUB ",NL," "\
											"         ,SD.CODLOT ",NL," "\
											"         ,BANC.VOLUMES ",NL," "\
											"         ,SD.PCBPRO ",NL," "\
											"ORDER BY 11, 14 ")
							
							log("Query CONFSEP ------------------------------------------",NL)		
							log(tQuery,NL)
							log("--------------------------------------------------------",NL)		
							
							if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
								bfSqlErro()
								exit(1)	
							endif

							if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
								bfSqlErro()
								exit(1)	
							endif

							while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
								bValSQL := TRUE
								nContadorResultadosQuery++
								tDIPLIV := peel(taDb2Array["DIPLIV"]," ")
								taDb2Array["TOTAL_PESO_LIQUIDO"] := replace(taDb2Array["TOTAL_PESO_LIQUIDO"],",",".")
								taDb2Array["TOTAL_PESO_LIQUIDO"] := build(number(taDb2Array["TOTAL_PESO_LIQUIDO"])*1000)
								if nContadorResultadosQuery = 1 or tVolumeAnterior <> peel(taDb2Array["VOLUME"]," ") then
									naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")] := number(taDb2Array["TOTAL_PESO_LIQUIDO"])
								else
									naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")] := naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")] + number(taDb2Array["TOTAL_PESO_LIQUIDO"])
								endif
								
								log("--------------------------------------------------------",NL)	
								log("KAILIV: ",taDb2Array["KAILIV"], NL)
								log("CODLDP: ",taDb2Array["CODLDP"], NL)	
								log("--------------------------------------------------------",NL)	
								
								if peel(taDb2Array["KAILIV"]," ") = "1" then
									if peel(taDb2Array["CODLDP"]," ") = "PCK" then
										!gera normalmente
									else
										log("Contem suporte <> de PCK",NL)
										exit(1)
										bNaoGeraSCO := TRUE
									endif
								endif

								tVolumeAnterior := peel(taDb2Array["VOLUME"]," ")
								remove(taDb2Array)
							endwhile

							if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
								bfSqlErro()
								exit(1)	
							endif

							if bNaoGeraSCO = FALSE and bValSQL = TRUE then
								if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
									bfSqlErro()
									exit(1)	
								endif

								if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
									bfSqlErro()
									exit(1)	
								endif

								tVOLUMES := ""
								nContadorResultadosQuery := 0
								nPesoBrutoTotal := 0
								nPesoLiquidoTotal := 0
								nNumeroLinhasVolume := 0
								nNumeroSupVirtual := 0
								bTemDiferenteDeCODLDP := FALSE
								bTemDiferenteCIRPIC_UNI := FALSE
								bTemPeloMenoUM_CIRPIC_UNI := FALSE
								
								while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
									nContadorResultadosQuery++						
									tCODPRO := peel(taDb2Array["CODPRO"]," ")								
									if nContadorResultadosQuery = 1 then
										! Criacao do Arquivo
											tNameOutSep := build("FM",tToInfologPrefixFilename,"SEM_SESCONFSEP_",time("now" ,"%Y%m%d%H%M%S"),".txt")
											tFileOut := build(sHOME,"/FMBR_AS2/",tNameOutSep)
											tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/",tNameOutSep)
									
										R_HeaderFM_TIPODEREGISTRO("0")
										R_HeaderFM_CNPJORIGEM(peel(taDb2Array["DIPLIV"]," "))
										R_HeaderFM_CNPJDESTINATARIO("002462805000778")
										R_HeaderFM_CLIPROP(S_GEEX9750_CODCLI)
										R_HeaderFM_COMPHEADER("                                              ")
										
										if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
											flush(0,0,"\r\n") >> tFileOutTemp
										else
											flush(0,0,NL) >> tFileOutTemp
										endif
													
										R_HeaderOCFM_TIPODEREGISTRO("1")
										R_HeaderOCFM_TIPOOPERACAO(peel(taDb2Array["TIPO_OPERACAO"]," "))
										R_HeaderOCFM_DATASEPARACAO(tfConvertDate(peel(taDb2Array["DATA_SEPARACAO"]," "), "YYYYMMDD" , "DDMMYYYY"))
										R_HeaderOCFM_ORDEMCARGA(peel(taDb2Array["ORDEM_CARGA"]," "))
										R_HeaderOCFM_CNPJTRANSP(peel(taDb2Array["CNPJ_TRANSPORTADORA"]," "))
										R_HeaderOCFM_esp("                                               ")
										
										if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
											flush(0,0,"\r\n") >> tFileOutTemp
										else
											flush(0,0,NL) >> tFileOutTemp
										endif
										
										R_HeaderPedFM_Identificacaodoregistro("2")
										R_HeaderPedFM_NumerodoPedidodeCompra(tREFLIV)
										R_HeaderPedFM_comnf("                                                                        ")
										
										if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
											flush(0,0,"\r\n") >> tFileOutTemp
										else
											flush(0,0,NL) >> tFileOutTemp
										endif
									endif
																		
									if (nContadorResultadosQuery = 1 or tVolumeAnterior <> peel(taDb2Array["VOLUME"]," ")) and peel(taDb2Array["KAILIV"]," ") = "1" then
										log("nContadorResultadosQuery = ",nContadorResultadosQuery,NL)
										log("tVolumeAnterior = ",tVolumeAnterior,NL)
										log("peel(taDb2Array[VOLUME]," ") = ",peel(taDb2Array["VOLUME"]," "),NL)

										R_HeaderVolFM_Identificacaodoregistro("3")
										nNumeroSupVirtual++
										R_HeaderVolFM_IdentVolume(build(nNumeroSupVirtual:R06))
										R_HeaderVolFM_CodEmb(peel(taDb2Array["EMBALAGEM"]," "))
										
										taDb2Array["TOTAL_PESO_BRUTO"] := replace(taDb2Array["TOTAL_PESO_BRUTO"],",",".")
										taDb2Array["TOTAL_PESO_BRUTO"] := build(number(taDb2Array["TOTAL_PESO_BRUTO"])*1000)
										
										R_HeaderVolFM_PesoBrutoVol(build(number(peel(taDb2Array["TOTAL_PESO_BRUTO"]," ")):R08))
										nPesoBrutoTotal := nPesoBrutoTotal + number(peel(taDb2Array["TOTAL_PESO_BRUTO"]," "))
										R_HeaderVolFM_PesoLiqVol(build(naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")]:R08))
										nPesoLiquidoTotal := nPesoLiquidoTotal + naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")]
										
										R_HeaderVolFM_TipoVol(peel(taDb2Array["TIP_EMB"]," "))
										R_HeaderVolFM_AlturaVolume(build(number(build(replace(peel(taDb2Array["ALT_VOL"]," "),".",""),"0")):R010))
										R_HeaderVolFM_LarguraVolume(build(number(build(replace(peel(taDb2Array["LRG_VOL"]," "),".",""),"0")):R010))
										R_HeaderVolFM_ProfundidadeVolume(build(number(build(replace(peel(taDb2Array["PRF_VOL"]," "),".",""),"0")):R010))
										R_HeaderVolFM_comnf("            ")

										if peel(taDb2Array["CODLDP"]," ") = "PCK" then
											nNumeroLinhasVolume := nNumeroLinhasVolume + 1
										else
											if peel(taDb2Array["CODLDP"]," ") = "STD" then
												nNumeroLinhasVolume := nNumeroLinhasVolume + number(peel(taDb2Array["VOLUME"]," "))
											else
												nNumeroLinhasVolume := nNumeroLinhasVolume
											endif
										endif
										if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
											flush(0,0,"\r\n") >> tFileOutTemp
										else
											flush(0,0,NL) >> tFileOutTemp
										endif
									endif
												
									if peel(taDb2Array["KAILIV"]," ") = "1" then
										R_DetalheFM_Identificacaodoregistro("4")
										R_DetalheFM_SequenciadoprodutonaNotaFiscal(build(number(peel(taDb2Array["ITEM"]," ")):R06))
										R_DetalheFM_CodigodoSKU(peel(taDb2Array["CODIGO_DO_PRODUTO"]," "))
										tContAux := build(number(peel(taDb2Array["QUANTIDADE"]," ")) * 1000)
										R_DetalheFM_QuantidadeSeparada(build(number(tContAux):R012))
										R_DetalheFM_Deposito(peel(taDb2Array["IMMO"]," "))
										R_DetalheFM_Lote(peel(taDb2Array["LOTE"]," "))
										R_DetalheFM_UnidadedeMedidadoproduto("EA")
										R_DetalheFM_INSTRUCAOEMBALAGEM(peel(taDb2Array["INSTRUCAO_EMBALAGEM"]," "))
										
										if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
											flush(0,0,"\r\n") >> tFileOutTemp
										else
											flush(0,0,NL) >> tFileOutTemp
										endif
									endif
												
									if peel(taDb2Array["KAILIV"]," ") <> "1" then
										nContAuxtttmp := number(peel(taDb2Array["QUANTIDADE"]," ")) / number(peel(taDb2Array["PCBPRO"]," "))
										nContAuxQNT := number(peel(taDb2Array["QUANTIDADE"]," "))
										nContaAux := 1
										while nContaAux <= nContAuxtttmp do
											R_HeaderVolFM_Identificacaodoregistro("3")
											nNumeroSupVirtual++
											R_HeaderVolFM_IdentVolume(build(nNumeroSupVirtual:R06))
											R_HeaderVolFM_CodEmb(peel(taDb2Array["EMBALAGEM"]," "))
											
											R_HeaderVolFM_PesoBrutoVol(build(number(peel(replace(taDb2Array["TOTAL_PESO_BRUTO"],",",".")," ")) * 1000:R08))
											nPesoBrutoTotal := nPesoBrutoTotal + number(peel(replace(taDb2Array["TOTAL_PESO_BRUTO"],",",".")," ")) * 1000
											if naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")] > (number(peel(replace(taDb2Array["TOTAL_PESO_BRUTO"],",",".")," ")) * 1000) then
												R_HeaderVolFM_PesoLiqVol(build(number(peel(replace(taDb2Array["TOTAL_PESO_BRUTO"],",",".")," ")) * 1000:R08))
											else
												R_HeaderVolFM_PesoLiqVol(build(naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")]:R08))
											endif
											nPesoLiquidoTotal := nPesoLiquidoTotal + naPesoTotalLiquidoVolume[peel(taDb2Array["VOLUME"]," ")]
											
											R_HeaderVolFM_TipoVol(peel(taDb2Array["TIP_EMB"]," "))
											R_HeaderVolFM_AlturaVolume(build(number(build(replace(peel(taDb2Array["ALT_VOL"]," "),".",""),"0")):R010))
											R_HeaderVolFM_LarguraVolume(build(number(build(replace(peel(taDb2Array["LRG_VOL"]," "),".",""),"0")):R010))
											R_HeaderVolFM_ProfundidadeVolume(build(number(build(replace(peel(taDb2Array["PRF_VOL"]," "),".",""),"0")):R010))
											R_HeaderVolFM_comnf("            ")
											if peel(taDb2Array["CODLDP"]," ") = "PCK" then
												nNumeroLinhasVolume := nNumeroLinhasVolume + 1
											else
												if peel(taDb2Array["CODLDP"]," ") = "STD" then
													nNumeroLinhasVolume := nNumeroLinhasVolume + number(peel(taDb2Array["VOLUME"]," "))
												else
													nNumeroLinhasVolume := nNumeroLinhasVolume
												endif
											endif
											
											if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
												flush(0,0,"\r\n") >> tFileOutTemp
											else
												flush(0,0,NL) >> tFileOutTemp
											endif
														
											R_DetalheFM_Identificacaodoregistro("4")
											R_DetalheFM_SequenciadoprodutonaNotaFiscal(build(number(peel(taDb2Array["ITEM"]," ")):R06))
											R_DetalheFM_CodigodoSKU(peel(taDb2Array["CODIGO_DO_PRODUTO"]," "))
											if number(peel(taDb2Array["PCBPRO"]," ")) = 1 then
												tContAux := "1000"
											else
												tContAux := build((nContAuxQNT / nContAuxtttmp) * 1000)
											endif
											R_DetalheFM_QuantidadeSeparada(build(number(tContAux):R012))
											R_DetalheFM_Deposito(peel(taDb2Array["IMMO"]," "))
											R_DetalheFM_Lote(peel(taDb2Array["LOTE"]," "))
											R_DetalheFM_UnidadedeMedidadoproduto("EA")
											R_DetalheFM_INSTRUCAOEMBALAGEM(peel(taDb2Array["INSTRUCAO_EMBALAGEM"]," "))
											
											if peel(taDb2Array["TIPO_OPERACAO"]," ") = "EC" then
												flush(0,0,"\r\n") >> tFileOutTemp
											else
												flush(0,0,NL) >> tFileOutTemp
											endif
											nContaAux++
										endwhile
									endif
									tVolumeAnterior := peel(taDb2Array["VOLUME"]," ")
									tTipoOeracaoQueryAux := peel(taDb2Array["TIPO_OPERACAO"]," ")
									tVolumesTotal := peel(taDb2Array["VOLUMESTOTAL"]," ")
									remove(taDb2Array)
								endwhile
											
								R_TraillerFM_Identificacaodoregistro("9")
								R_TraillerFM_Totaldelinhasdodetalhe(build(nContadorResultadosQuery:R03))
								R_TraillerFM_TotalPesoBruto(build(nPesoBrutoTotal:R09))
								R_TraillerFM_TotalPesoLiq(build(nPesoLiquidoTotal:R09))
								R_TraillerFM_QtdVolumes(build(number(tVolumesTotal):R06,"000"))
								R_TraillerFM_COMPLHEADER3("                                                              ")
								
								if tTipoOeracaoQueryAux = "EC" then
									flush(0,0,"\r\n") >> tFileOutTemp
								else
									flush(0,0,NL) >> tFileOutTemp
								endif
								
								if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
									bfSqlErro()
									exit(1)	
								endif

								! Tratamento final dos arquivos
									close(tFileOutTemp)
									copy(tFileOutTemp,tFileOut)
									close(tFileOutTemp)
									remove(tFileOutTemp)
									close(tFileOut)
								
								! Finalizando com TRACE
									bfMajtraceSeparacaoSEM( "Recebida" \
															,"0" \
															,build(tPlacaVeiculo,"-",tRomaneio) \
															,tDataDocumento \
															,tFileInput \
															,tFileOut \
															,tMensagem \
															,"")
							else
								log("--------------------------------------------------------",NL)		
								log("SQL nao retornou resultado ou Nao entrou em condições validas.",NL)
								log("--------------------------------------------------------",NL)		
							endif

							! SERIE
								tMensagem := "M97 - CONF SERIE"
								if bNaoGeraSCO = FALSE then
									split(tREFLIV,taREFLIVSplitExp,".")
									TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIV,MENSAGEM="M97 - CONF SERIE",PERFIL="SEM PARAR")
									
									if valid(TRACE) then
										!nao faz nada porque é duplicado
										log("M97 - CONF SERIE duplicado!",NL)
									else
										! Variavel
											bFezMsgSerie := FALSE
										
										! Criacao do Arquivo
											tNameOutSerie := build("FM",tToInfologPrefixFilename,"SEM_SESSERIAL_",time("now" ,"%Y%m%d%H%M%S"),"_",tREFLIV,".txt")
											tFileOut := build(sHOME,"/FMBR_AS2/",tNameOutSerie)
											tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/",tNameOutSerie)
																
										tQuery := build("SELECT  S.CODPRO",NL," "\
														"       ,S.CODSER",NL," "\
														"       ,S.CODCLI",NL," "\
														"       ,D.DATPRB2",NL," "\
														"       ,D.HEUPRB2",NL," "\
														"       ,D.MSGLIG",NL," "\
														"FROM FGE50FM",tToInfologPrefixFilename,".GESERI S",NL," "\
														"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD D",NL," "\
														"ON S.NUMPAL = D.NUMPAL AND S.NUMLIV = D.NUMLIV AND S.SERSUP = D.SERSUP",NL," "\
														"WHERE S.CODACT = 'SEM'",NL," "\
														"AND S.NUMLIV = '",tNUMLIV,"'",NL," "\
														"GROUP BY  S.CODPRO",NL," "\
														"         ,S.CODSER",NL," "\
														"         ,S.CODCLI",NL," "\
														"         ,D.DATPRB2",NL," "\
														"         ,D.HEUPRB2",NL," "\
														"		  ,D.MSGLIG ")
										
										log(NL,tQuery,NL)
										
										! 1a passagem para determinar volumas
										if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
											bfSqlErro()
											exit(1)	
										endif

										if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
											bfSqlErro()
											exit(1)	
										endif
														
										nContadorResultadosQuery := 0
										tVolumeAnterior := ""
										while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
											nContadorResultadosQuery++
											taCODPROSerie[nContadorResultadosQuery] := peel(taDb2Array["CODPRO"]," ")
											taCODSERSerie[nContadorResultadosQuery] := peel(taDb2Array["CODSER"]," ")
											
											if bFezMsgSerie = FALSE then
												bFezMsgSerie := TRUE
												
												R_LINE0_TIPO_REGISTRO("0")
												R_LINE0_CNPJ_ORIGEM(tDIPLIV)
												R_LINE0_CNPJ_DEST("02462805000778")
												R_LINE0_CLIENTE_PROPRI(peel(taDb2Array["CODCLI"]," "))

												flush(0,0,NL) >> tFileOutTemp
											endif
															
											R_LINE1_TIPO_REGISTRO("1")
											R_LINE1_NUMERO_DOCUMENTO(tREFLIV)
											R_LINE1_CODIGO_PRODUTO(peel(taDb2Array["CODPRO"]," "))
											R_LINE1_SERIAL(peel(taDb2Array["CODSER"]," "))
											R_LINE1_DATA_ESCANEAMENTO(tfConvertDate(peel(taDb2Array["DATPRB2"]," "), "YYYYMMDD" , "DDMMYYYY"))
											R_LINE1_HORA_ESCANEAMENTO(peel(taDb2Array["HEUPRB2"]," "))

											flush(0,0,NL) >> tFileOutTemp
										
											remove(taDb2Array)
										endwhile

										if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
											bfSqlErro()
											exit(1)	
										endif
														
										if bFezMsgSerie = TRUE then

											! Tratamento final dos arquivos
												close(tFileOutTemp)
												copy(tFileOutTemp,tFileOut)
												close(tFileOutTemp)
												remove(tFileOutTemp)
												close(tFileOut)
											
											! Finalizando com TRACE
												bfMajtraceSerieSEM( "Recebida" \
																	,"0" \
																	,build(tPlacaVeiculo,"-",tRomaneio) \
																	,tDataDocumento \
																	,tFileInput \
																	,tFileOut \
																	,tMensagem \
																	,"")
											
										endif
									endif
								endif
						endif
					endif
			endif
		endif
	! LASA
		if S_GEEX9750_CODACT = "LAS" then
			bGeraArquivo := FALSE

			tAmbiente := "LASA"

			if S_GEEX9750_ETALIV = "30" then
				bGeraArquivo := TRUE
				tREFLIV := S_GEEX9750_REFLIV
				tNUMLIV := S_GEEX9750_NUMLIV
			endif
			
			if bGeraArquivo = TRUE then
				
				tQuery := build("SELECT  SD.NUMSUP", NL," "\
								"       ,SE.TYPSUP", NL," "\
								"       ,SD.SEQSUP", NL," "\
								"       ,SE.CIRPIC", NL," "\
								"       ,SD.CODPRO", NL," "\
								"       ,SD.UVCSRV", NL," "\
								"       ,SD.UVCLIV", NL," "\
								"       ,SD.PCBPRO", NL," "\
								"       ,SD.PRPPIC", NL," "\
								"       ,CASE WHEN SD.PRPPIC = 5 THEN CEILING(SUM(BANC.VOL))  ELSE (SD.UVCSRV/SD.PCBPRO) END VOLUMES", NL," "\
								"       ,SE.NUMLIV", NL," "\
								"       ,SE.SNULIV", NL," "\
								"       ,TRIM(SD.DIPLIV) DIPLIV", NL," "\
								"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD,", NL," "\
								"(", NL," "\
								"	SELECT  CASE WHEN SD.PRPPIC = 5 THEN (((SD.UVCSRV*PD.VOLUVC)/0.03654)/1000)  ELSE 0 END VOL", NL," "\
								"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD", NL," "\
								"	WHERE SE.NUMSUP = SD.NUMSUP", NL," "\
								"	AND SE.CODACT = SD.CODACT", NL," "\
								"	AND SD.CODPRO = PD.CODPRO", NL," "\
								"	AND SD.CODACT = PD.CODACT", NL," "\
								"	AND SD.NUMLIV = '",tNUMLIV,"'", NL," "\
								"	AND SE.TYPSUP <> 3", NL," "\
								") BANC", NL," "\
								"WHERE SE.NUMSUP = SD.NUMSUP", NL," "\
								"AND SE.CODACT = SD.CODACT", NL," "\
								"AND SD.CODPRO = PD.CODPRO", NL," "\
								"AND SD.CODACT = PD.CODACT", NL," "\
								"AND SD.NUMLIV = '",tNUMLIV,"'", NL," "\
								"AND SE.TYPSUP <> 3", NL," "\
								"GROUP BY  SD.NUMSUP", NL," "\
								"         ,SE.TYPSUP", NL," "\
								"         ,SD.SEQSUP", NL," "\
								"         ,SE.CIRPIC", NL," "\
								"         ,SD.CODPRO", NL," "\
								"         ,SD.UVCSRV", NL," "\
								"         ,SD.UVCLIV", NL," "\
								"         ,SD.PCBPRO", NL," "\
								"         ,SE.NUMLIV", NL," "\
								"         ,SE.SNULIV", NL," "\
								"         ,SD.DIPLIV", NL," "\
								"         ,SD.PRPPIC", NL," "\
								"ORDER BY SE.SNULIV", NL," "\
								"         ,SE.TYPSUP DESC", NL," "\
								"         ,SD.NUMSUP ASC", NL," "\
								"         ,SD.SEQSUP ASC")

				log(tQuery, NL)

				if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao", \
								"1", \
								tNumeroDocumento, \
								tDataDocumento, \
								tFileInput, \
								tFileOut, \
								"M97 - UPDATE", \
								build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
					print("FATAL ", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao", \
								"1", \
								tNumeroDocumento, \
								tDataDocumento, \
								tFileInput, \
								tFileOut, \
								"M97 - UPDATE", \
								build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				nContadorResultadosQuery := 0
				
				bJaTemPRPPICIgualCinco := FALSE
						
				while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
					nContadorResultadosQuery++
					
					taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
					taDIPLIVCalculado[nContadorResultadosQuery] := peel(taDb2Array["DIPLIV"]," ")
					taPRPPIC[nContadorResultadosQuery] := peel(taDb2Array["PRPPIC"]," ")
					taSNULIV[nContadorResultadosQuery] := peel(taDb2Array["SNULIV"]," ")
					
					if taPRPPIC[nContadorResultadosQuery] = "5" then
						if bJaTemPRPPICIgualCinco = FALSE then
							bJaTemPRPPICIgualCinco := TRUE
							if nContadorResultadosQuery = 1 then
								taVOLUMES[nContadorResultadosQuery] := "1"
							else
								taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1])+number(taVOLUMESAux[nContadorResultadosQuery-1]))
							endif
						else
							if taSNULIV[nContadorResultadosQuery - 1] = taSNULIV[nContadorResultadosQuery] then
								taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1]))
							else
								taVOLUMES[nContadorResultadosQuery] := "1"
							endif
						endif
					else
						if nContadorResultadosQuery = 1 then
							taVOLUMES[nContadorResultadosQuery] := "1"
						else
							if taSNULIV[nContadorResultadosQuery - 1] = taSNULIV[nContadorResultadosQuery] then
								taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1])+number(taVOLUMESAux[nContadorResultadosQuery-1]))
							else
								taVOLUMES[nContadorResultadosQuery] := "1"
							endif
						endif
					endif
							
					taQueryUpdade[nContadorResultadosQuery] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD "\
																	"SET MSGLIG='",build(number(taVOLUMES[nContadorResultadosQuery]):R06),"/",build(number(taVOLUMESAux[nContadorResultadosQuery]):R06),"'  "\
																	"WHERE NUMSUP='",peel(taDb2Array["NUMSUP"]," "),"' "\
																	"AND SEQSUP='",peel(taDb2Array["SEQSUP"]," "),"' "\
																	"AND CODPRO='",peel(taDb2Array["CODPRO"]," "),"' "\
																	"AND UVCSRV='",peel(taDb2Array["UVCSRV"]," "),"' WITH NONE")
					
					log(taQueryUpdade[nContadorResultadosQuery],NL)
					
					if not bfSqlSet(tDbBase2, "Updatedb2", taQueryUpdade[nContadorResultadosQuery]) then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("1 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(27)
					endif

					if not bfSqlExec(tDbBase2, "Updatedb2") then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("2 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(28)
					endif

					if not bfSqlCommit(tDbBase2, "Updatedb2") then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("3 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(29)
					endif

					if not bfSqlFree(tDbBase2, "Updatedb2") then
						log(tfSqlErrorStr(), NL)
						bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("4 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
						exit(30)
					endif
							
					remove(taDb2Array)
				endwhile

				if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
					print("FATAL", tfSqlErrorStr())
					bfMajtrace("Erro de Traducao", \
								"1", \
								tNumeroDocumento, \
								tDataDocumento, \
								tFileInput, \
								tFileOut, \
								"M97 - UPDATE", \
								build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif
			
				if nContadorResultadosQuery > 0 then
					bfMajtrace("Recebida", \
								"0", \
								build(tPlacaVeiculo,"-",tRomaneio), \
								tDataDocumento, \
								tFileInput, \
								tFileOut, \
								"M97 - UPDATE", \
								"")
				endif
			endif
		endif

	! VIKING
		if S_GEEX9750_CODACT = "VIK" then
	
			bGeraArquivo := FALSE
			tAmbiente := "VIKING"

			if S_GEEX9750_ETALIV = "30" and S_GEEX9750_CODCLI <> "ETIQUETA" then
				bGeraArquivo := TRUE
				tNUMLIV := S_GEEX9750_NUMLIV
				tNUMVAG := S_GEEX9750_NUMVAG
				tREFLIV := S_GEEX9750_REFLIV
				tCODACT := "VIK"
			endif

			if bGeraArquivo = TRUE then

				! QUERY nTYPMAS
					tQuery := build("SELECT  NUMVAG", NL," "\
									"       ,TYPMAS", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GEVAG", NL," "\
									"WHERE NUMVAG = '",tNUMVAG,"'")

					log("------------------------------------------------------------", NL)
					log(tQuery,NL)
					log("------------------------------------------------------------", NL)

					if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace(	"Erro de Traducao" \
									,"1" \
									,tNumeroDocumento \
									,tDataDocumento \
									,tFileInput \
									,"" \
									,"Produtos" \
									,build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace(	"Erro de Traducao" \
									,"1" \
									,tNumeroDocumento \
									,tDataDocumento \
									,tFileInput \
									,"" \
									,"Produtos" \
									,build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					while bfSqlFetchArray(tDbBase,"SELECTdb2",taDb2Array) = TRUE do
						if number(peel(taDb2Array["TYPMAS"], " ")) > 1 then
							tTYPMAS_tQUERY := "="
						else
							tTYPMAS_tQUERY := "<>"
						endif

						remove(taDb2Array)
					endwhile

					if bfSqlFree(tDbBase,"SELECTdb2") = FALSE then
						print("FATAL", tfSqlErrorStr())
						bfMajtrace(	"Erro de Traducao" \
									,"1" \
									,tNumeroDocumento \
									,tDataDocumento \
									,tFileInput \
									,"" \
									,"Produtos" \
									,build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif
				! FIM QUERY nTYPMAS
				
				! QUERY taNUMSUP[nCountQueryResult]
					tQuery := build("SELECT  SE.TYPSUP ", NL," "\
							"       ,SE.NUMSUP ", NL," "\
							"       ,SD.NUMMIS ", NL," "\
							"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE ", NL," "\
							"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ", NL," "\
							"ON SE.NUMSUP = SD.NUMSUP ", NL," "\
							"WHERE SE.NUMVAG = '",tNUMVAG,"' ", NL," "\
							"AND SE.TYPSUP<>3 ", NL," "\
							"AND SE.CLILIV ",tTYPMAS_tQUERY," 'MASSIFICATION' ", NL," "\
							"GROUP BY  SE.TYPSUP ", NL," "\
							"         ,SE.NUMSUP ", NL," "\
							"         ,SD.NUMMIS ", NL," "\
							"ORDER BY 1 DESC ", NL," "\
							"         ,3 ", NL," "\
							"         ,2 ")

					log("------------------------------------------------------------", NL)
					log(tQuery,NL)
					log("------------------------------------------------------------", NL)

					if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace(	"Erro de Traducao", \
									"1", \
									tREFLIV, \
									tDataDocumento, \
									"", \
									"M97 - UPDATE", \
									build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace(	"Erro de Traducao", \
									"1", \
									tREFLIV, \
									tDataDocumento, \
									"", \
									"M97 - UPDATE", \
									build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
						nCountQueryResult++
						taNUMSUP[nCountQueryResult] := peel(taDb2Array["NUMSUP"]," ")
						remove(taDb2Array)
					endwhile

					if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
						print("FATAL", tfSqlErrorStr())
						bfMajtrace(	"Erro de Traducao", \
									"1", \
									tREFLIV, \
									tDataDocumento, \
									"", \
									"M97 - UPDATE", \
									build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif
				! QUERY taNUMSUP[nCountQueryResult]

				nWhileLine := 0
				while nWhileLine < nCountQueryResult do
					nWhileLine++
					
					! QUERY UPDATE MSGLIG='",build(nWhileLine:R06),"/",build(nCountQueryResult:R06),"'
						taQueryUpdade[nWhileLine] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD ", NL," "\
															"SET MSGLIG='",build(nWhileLine:R06),"/",build(nCountQueryResult:R06),"' ", NL," "\
															"WHERE NUMSUP='",taNUMSUP[nWhileLine],"' ", NL," "\
															"AND CODACT='",tCODACT,"' WITH NONE")
						
						log("------------------------------------------------------------", NL)
						log(taQueryUpdade[nWhileLine],NL)
						log("------------------------------------------------------------", NL)
						
						if not bfSqlSet(tDbBase3, "Updatedb2", taQueryUpdade[nWhileLine]) then
							log(tfSqlErrorStr(), NL)
							bfMajtrace(	"Erro de Traducao", \
										"1", \
										tREFLIV, \
										tDataDocumento, \
										"", \
										"M97 - UPDATE", \
										build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
							exit(27)
						endif

						if not bfSqlExec(tDbBase3, "Updatedb2") then
							log(tfSqlErrorStr(), NL)
							bfMajtrace(	"Erro de Traducao", \
										"1", \
										tREFLIV, \
										tDataDocumento, \
										"", \
										"M97 - UPDATE", \
										build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
							exit(28)
						endif

						if not bfSqlCommit(tDbBase3, "Updatedb2") then
							log(tfSqlErrorStr(), NL)
							bfMajtrace(	"Erro de Traducao", \
										"1", \
										tREFLIV, \
										tDataDocumento, \
										"", \
										"M97 - UPDATE", \
										build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
							exit(29)
						endif

						if not bfSqlFree(tDbBase3, "Updatedb2") then
							log(tfSqlErrorStr(), NL)
							bfMajtrace(	"Erro de Traducao", \
										"1", \
										tREFLIV, \
										tDataDocumento, \
										"", \
										"M97 - UPDATE", \
										build("Erro na execucao da query no banco de dados: ",tfSqlErrorStr()))
							exit(30)
						endif
					! QUERY UPDATE MSGLIG='",build(nWhileLine:R06),"/",build(nCountQueryResult:R06),"'
				endwhile
				
				if nCountQueryResult > 0 then

					bfMajtrace(	"Recebida", \
								"0", \
								tREFLIV, \
								time("now","%Y-%m-%dT%H:%M:%S"), \
								"", \
								"M97 - UPDATE", \
								"")
				endif
			endif
		endif

	! LINDT
		if S_GEEX9750_CODACT = "LIN" then
			tAmbiente := "LINDT"

			! UPDATE
			if peel(S_GEEX9750_CODCLI, " ") <> "ETIQUETA" then

				tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,"LIN_",time("now" ,"%Y%m%d%H%M%S"),".txt")
				tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,"LIN_",time("now" ,"%Y%m%d%H%M%S"),".txt")
				tNameOut := build("FM",tToInfologPrefixFilename,"LIN_",time("now" ,"%Y%m%d%H%M%S"),".txt")

				bGeraArquivo := FALSE

				if S_GEEX9750_ETALIV = "30" then
					bGeraArquivo := TRUE
					tREFLIV := S_GEEX9750_REFLIV
					tNUMLIV := S_GEEX9750_NUMLIV
				endif

				if bGeraArquivo = TRUE then

					tQuery := build("SELECT  SD.NUMSUP ", NL," "\
									"       ,SE.TYPSUP ", NL," "\
									"       ,SE.KAILIV ", NL," "\
									"       ,SE.TOPMNQ ", NL," "\
									"       ,VG.ETAVAG ", NL," "\
									"       ,SD.SEQSUP ", NL," "\
									"       ,SE.CIRPIC ", NL," "\
									"       ,SD.CODPRO ", NL," "\
									"       ,SD.UVCSRV ", NL," "\
									"       ,SD.UVCLIV ", NL," "\
									"       ,SD.PCBPRO ", NL," "\
									"       ,SD.PRPPIC ", NL," "\
									"       ,CASE WHEN SD.PRPPIC=5 THEN CEILING(SUM(BANC.VOL)) ", NL," "\
									"             WHEN SD.PRPPIC=1 THEN CEILING (SD.UVCSRV/SD.PCBPRO)  ELSE (SD.UVCSRV/SD.PCBPRO) END VOLUMES ", NL," "\
									"       ,TRIM(SD.MSGLIG) MSGLIG ", NL," "\
									"       ,TRIM(SD.DIPLIV) DIPLIV ", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD, FGE50FM",tToInfologPrefixFilename,".GEVAG VG, ", NL," "\
									"( ", NL," "\
									"	SELECT  CASE WHEN SD.PRPPIC=5 THEN (((SD.UVCSRV*PD.VOLUVC)/0.03654)/1000)  ELSE 0 END VOL ", NL," "\
									"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE, FGE50FM",tToInfologPrefixFilename,".GESUPD SD, FGE50FM",tToInfologPrefixFilename,".GEPRO PD ", NL," "\
									"	WHERE SE.NUMSUP=SD.NUMSUP ", NL," "\
									"	AND SE.CODACT=SD.CODACT ", NL," "\
									"	AND SD.CODPRO=PD.CODPRO ", NL," "\
									"	AND SD.CODACT=PD.CODACT ", NL," "\
									"	AND SD.NUMLIV='",tNUMLIV,"' ", NL," "\
									"	AND SE.TYPSUP<>3 ", NL," "\
									") BANC ", NL," "\
									"WHERE SE.NUMSUP=SD.NUMSUP ", NL," "\
									"AND SE.NUMVAG=VG.NUMVAG ", NL," "\
									"AND SE.CODACT=SD.CODACT ", NL," "\
									"AND SD.CODPRO=PD.CODPRO ", NL," "\
									"AND SD.CODACT=PD.CODACT ", NL," "\
									"AND SD.NUMLIV='",tNUMLIV,"' ", NL," "\
									"AND SE.TYPSUP<>3 ", NL," "\
									"GROUP BY  SD.NUMSUP ", NL," "\
									"         ,SE.TYPSUP ", NL," "\
									"         ,SE.KAILIV ", NL," "\
									"         ,SE.TOPMNQ ", NL," "\
									"         ,VG.ETAVAG ", NL," "\
									"         ,SD.SEQSUP ", NL," "\
									"         ,SE.CIRPIC ", NL," "\
									"         ,SD.CODPRO ", NL," "\
									"         ,SD.UVCSRV ", NL," "\
									"         ,SD.UVCLIV ", NL," "\
									"         ,SD.PCBPRO ", NL," "\
									"         ,SD.MSGLIG ", NL," "\
									"         ,SD.DIPLIV ", NL," "\
									"         ,SD.PRPPIC ", NL," "\
									"ORDER BY SE.TOPMNQ ", NL," "\
									"         ,SE.TYPSUP DESC ", NL," "\
									"         ,SE.KAILIV DESC ", NL," "\
									"         ,SD.NUMSUP ", NL," "\
									"         ,SD.SEQSUP ASC ")

					log("------------------------------------------------------------", NL)
					log(tQuery,NL)
					log("------------------------------------------------------------", NL)

					if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace("Erro de Traducao", \
									"1", \
									tNumeroDocumento, \
									tDataDocumento, \
									tFileInput, \
									tFileOut, \
									"M97 - UPDATE", \
									build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
						print("FATAL ", tfSqlErrorStr())
						bfMajtrace("Erro de Traducao", \
									"1", \
									tNumeroDocumento, \
									tDataDocumento, \
									tFileInput, \
									tFileOut, \
									"M97 - UPDATE", \
									build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif

					nContadorResultadosQuery := 0
					bPrimeiroKAILIV := TRUE

					while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
						nContadorResultadosQuery++

						taTOPMNQ[nContadorResultadosQuery] := peel(taDb2Array["TOPMNQ"]," ")
						taETAVAG[nContadorResultadosQuery] := peel(taDb2Array["ETAVAG"]," ")
						taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")

						if taETAVAG[nContadorResultadosQuery] = "30" and taTOPMNQ[nContadorResultadosQuery] <> "1" then
							log("nContadorResultadosQuery = ",nContadorResultadosQuery,NL)
							if nContadorResultadosQuery = 1 then
								if peel(taDb2Array["KAILIV"]," ") = "1" then
									taVOLUMES[nContadorResultadosQuery] := "1"
									log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
									taVOLUMESAux[nContadorResultadosQuery] := "1"
									log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
								else
									taVOLUMES[nContadorResultadosQuery] := "1"
									log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
									taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
									log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
								endif
								if peel(taDb2Array["KAILIV"]," ") = "1" then
									bPrimeiroKAILIV := FALSE
								endif
							else
								log("peel(taDb2Array[KAILIV]," ") = ",peel(taDb2Array["KAILIV"]," "),NL)
								if peel(taDb2Array["KAILIV"]," ") = "1" then
									if bPrimeiroKAILIV = TRUE then
										bPrimeiroKAILIV := FALSE
										taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery - 1]) + number(taVOLUMESAux[nContadorResultadosQuery - 1]))
										log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
										taVOLUMESAux[nContadorResultadosQuery] := "1"
										log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
									else
										taVOLUMES[nContadorResultadosQuery] := taVOLUMES[nContadorResultadosQuery - 1]
										log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
										taVOLUMESAux[nContadorResultadosQuery] := "1"
										log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
									endif
								else
									taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery - 1]) + number(taVOLUMESAux[nContadorResultadosQuery - 1]))
									log("taVOLUMES[",nContadorResultadosQuery,"] = ",taVOLUMES[nContadorResultadosQuery],NL)
									taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
									log("taVOLUMESAux[",nContadorResultadosQuery,"] = ",taVOLUMESAux[nContadorResultadosQuery],NL)
								endif
							endif
						else
							taVOLUMES[nContadorResultadosQuery] := "0"
							taVOLUMESAux[nContadorResultadosQuery] := "0"
						endif
						
						taQueryUpdade[nContadorResultadosQuery] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD ", NL," "\
																			"SET MSGLIG='",build(number(taVOLUMES[nContadorResultadosQuery]):R06),"/",build(number(taVOLUMESAux[nContadorResultadosQuery]):R06),"' ", NL," "\
																			"WHERE NUMSUP='",peel(taDb2Array["NUMSUP"]," "),"' ", NL," "\
																			"AND SEQSUP='",peel(taDb2Array["SEQSUP"]," "),"' ", NL," "\
																			"AND CODPRO='",peel(taDb2Array["CODPRO"]," "),"' ", NL," "\
																			"AND UVCSRV='",peel(taDb2Array["UVCSRV"]," "),"' ", NL," "\
																			"AND CODACT='",S_GEEX9750_CODACT,"' WITH NONE")
						
						log("------------------------------------------------------------", NL)
						log(taQueryUpdade[nContadorResultadosQuery],NL)
						log("------------------------------------------------------------", NL)
						
						if not bfSqlSet(tDbBase2, "Updatedb2", taQueryUpdade[nContadorResultadosQuery]) then
							log(tfSqlErrorStr(), NL)
							bfMajtrace("Erro de Traducao", \
										"1", \
										tNumeroDocumento, \
										tDataDocumento, \
										tFileInput, \
										tFileOut, \
										"M97 - UPDATE", \
										build("1 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
							exit(27)
						endif

						if not bfSqlExec(tDbBase2, "Updatedb2") then
							log(tfSqlErrorStr(), NL)
							bfMajtrace("Erro de Traducao", \
										"1", \
										tNumeroDocumento, \
										tDataDocumento, \
										tFileInput, \
										tFileOut, \
										"M97 - UPDATE", \
										build("2 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
							exit(28)
						endif

						if not bfSqlCommit(tDbBase2, "Updatedb2") then
							log(tfSqlErrorStr(), NL)
							bfMajtrace("Erro de Traducao", \
										"1", \
										tNumeroDocumento, \
										tDataDocumento, \
										tFileInput, \
										tFileOut, \
										"M97 - UPDATE", \
										build("3 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
							exit(29)
						endif

						if not bfSqlFree(tDbBase2, "Updatedb2") then
							log(tfSqlErrorStr(), NL)
							bfMajtrace("Erro de Traducao", \
										"1", \
										tNumeroDocumento, \
										tDataDocumento, \
										tFileInput, \
										tFileOut, \
										"M97 - UPDATE", \
										build("4 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
							exit(30)
						endif
						
						remove(taDb2Array)
					endwhile

					if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
						print("FATAL", tfSqlErrorStr())
						bfMajtrace("Erro de Traducao", \
									"1", \
									tNumeroDocumento, \
									tDataDocumento, \
									tFileInput, \
									tFileOut, \
									"M97 - UPDATE", \
									build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
						exit(1)
					endif
							
					if nContadorResultadosQuery > 0 then
						bfMajtrace("Recebida", \
									"0", \
									build(tPlacaVeiculo,"-",tRomaneio), \
									tDataDocumento, \
									tFileInput, \
									tFileOut, \
									"M97 - UPDATE", \
									"")
					endif
				endif
				remove(tFileOut)
				remove(tFileOutTemp)
			endif
		endif

	! NOBAR
		if S_GEEX9750_CODACT = "BAR" then
	
			! Variaveis
				bGeraArquivo := FALSE
				tAmbiente := "NOBAR"

			if S_GEEX9750_ETALIV = "30" and S_GEEX9750_CODCLI <> "ETIQUETA" then
				bGeraArquivo := TRUE
				tNUMLIV := S_GEEX9750_NUMLIV
				tNUMVAG := S_GEEX9750_NUMVAG
				tREFLIV := S_GEEX9750_REFLIV
				tCODACT := "BAR"
			endif

			if bGeraArquivo = TRUE then

				! QUERY nTYPMAS
					tQuery := build("SELECT  NUMVAG", NL," "\
									"       ,TYPMAS", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GEVAG", NL," "\
									"WHERE NUMVAG = '",tNUMVAG,"'")

					log("------------------------------------------------------------", NL)
					log(tQuery,NL)
					log("------------------------------------------------------------", NL)

					if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
						bfSqlErro()
						exit(1)	
					endif

					if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
						bfSqlErro()
						exit(1)	
					endif

					while bfSqlFetchArray(tDbBase,"SELECTdb2",taDb2Array) = TRUE do
						if number(peel(taDb2Array["TYPMAS"], " ")) > 1 then
							tTYPMAS_tQUERY := "="
						else
							tTYPMAS_tQUERY := "<>"
						endif

						remove(taDb2Array)
					endwhile

					if bfSqlFree(tDbBase,"SELECTdb2") = FALSE then
						bfSqlErro()
						exit(1)	
					endif
				! FIM QUERY nTYPMAS
				
				! QUERY taNUMSUP[nCountQueryResult]
					tQuery := build("SELECT  SE.TYPSUP ", NL," "\
									"       ,SE.NUMSUP ", NL," "\
									"       ,SD.NUMMIS ", NL," "\
									"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE ", NL," "\
									"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ", NL," "\
									"ON SE.NUMSUP = SD.NUMSUP ", NL," "\
									"WHERE SE.NUMVAG = '",tNUMVAG,"' ", NL," "\
									"AND SE.TYPSUP<>3 ", NL," "\
									"AND SE.CLILIV ",tTYPMAS_tQUERY," 'MASSIFICATION' ", NL," "\
									"GROUP BY  SE.TYPSUP ", NL," "\
									"         ,SE.NUMSUP ", NL," "\
									"         ,SD.NUMMIS ", NL," "\
									"ORDER BY 1 DESC ", NL," "\
									"         ,3 ", NL," "\
									"         ,2 ")

					log("------------------------------------------------------------", NL)
					log(tQuery,NL)
					log("------------------------------------------------------------", NL)

					if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
						bfSqlErro()
						exit(1)	
					endif

					if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
						bfSqlErro()
						exit(1)	
					endif

					while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
						nCountQueryResult++
						taNUMSUP[nCountQueryResult] := peel(taDb2Array["NUMSUP"]," ")
						remove(taDb2Array)
					endwhile

					if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
						bfSqlErro()
						exit(1)	
					endif
				! QUERY taNUMSUP[nCountQueryResult]

				nWhileLine := 0
				while nWhileLine < nCountQueryResult do
					nWhileLine++
					
					! QUERY UPDATE MSGLIG='",build(nWhileLine:R06),"/",build(nCountQueryResult:R06),"'
						taQueryUpdade[nWhileLine] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD ", NL," "\
															"SET MSGLIG = '",build(nWhileLine:R06),"/",build(nCountQueryResult:R06),"' ", NL," "\
															"WHERE NUMSUP = '",taNUMSUP[nWhileLine],"' ", NL," "\
															"AND CODACT = '",tCODACT,"' WITH NONE")
						
						log("------------------------------------------------------------", NL)
						log(taQueryUpdade[nWhileLine],NL)
						log("------------------------------------------------------------", NL)
						
						if not bfSqlSet(tDbBase3, "Updatedb2", taQueryUpdade[nWhileLine]) then
							bfSqlErro()
							exit(1)	
						endif

						if not bfSqlExec(tDbBase3, "Updatedb2") then
							bfSqlErro()
							exit(1)	
						endif

						if not bfSqlCommit(tDbBase3, "Updatedb2") then
							bfSqlErro()
							exit(1)	
						endif

						if not bfSqlFree(tDbBase3, "Updatedb2") then
							bfSqlErro()
							exit(1)	
						endif
					! QUERY UPDATE MSGLIG='",build(nWhileLine:R06),"/",build(nCountQueryResult:R06),"'
				endwhile
				
				if nCountQueryResult > 0 then
					! Finalizando com TRACE
						bfMajtrace(	"Recebida" \
									,"0" \
									,tREFLIV \
									,tDataDocumento \
									,tFileInput \
									,tFileOut \
									,tMensagem \
									,"")
				endif
			endif
		endif
endline

!==============================================================================

line("99.00")

endline

!==============================================================================

! Default statements section
default

enddefault

!==============================================================================

! End statements section
end
	bfSqlClose(tDbBase)
	bfSqlClose(tDbBase2)
	bfSqlClose(tDbBase3)

	log("------------------------------------------------------------", NL)
	log("Fim...: ", time("now","%Y-%m-%d %H:%M:%S"), NL)
	log("------------------------------------------------------------", NL)

	exit(0)
endend

!==============================================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tFileInput,tFileOut,tTipoDocumento,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := tAmbiente
	TRACE.SENTIDO := tSentido
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := tDataDoc
	TRACE.MESSAGEID := build(nMessageID:R10)
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	SYSLOG.REFERENCE := tREFLIV

	if tError = "0" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tError = "1" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)


	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)

		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	flush(TRACE)

	nTmpContadorResultadosQuery := 1
	while nTmpContadorResultadosQuery <= nContadorResultadosQuery do
		print(taQueryUpdade[nTmpContadorResultadosQuery],NL) >> TRACE.Out
		nTmpContadorResultadosQuery++
	endwhile

	close(TRACE.Out)
endfunction

!==============================================================================

function bfMajtraceExpedicao(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.PERFIL := "GAMA ITALY"
	TRACE.SENTIDO := "O"
	TRACE.MENSAGEM := "M97 - EXPEDIÇÃO"
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := time("now","%Y-%m-%d")
	TRACE.MESSAGEID := build(nMessageID:R06)
	TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
			if tMensagemErrro = build("Schema not matched ",NL) then
				edierrordump(MESSAGE) >> TRACE.Detail
			endif
		endif
	endif

	close(TRACE.Detail)
	close(SYSLOG.a)

	if nMainIndex = 0 then
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	flush(TRACE)

	close(tFileOutTemp)
	copy(tFileOutTemp,TRACE.Out)
	close(tFileOutTemp)
	close(TRACE.Out)
endfunction

!==============================================================================

function bfMajtraceSeparacao(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.PERFIL := "GAMA ITALY"
	TRACE.SENTIDO := "O"
	TRACE.MENSAGEM := "M97 - CONF SEPARAÇÃO"
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := time("now","%Y-%m-%d")
	TRACE.MESSAGEID := build(nMessageID:R06)
	TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
			if tMensagemErrro = build("Schema not matched ",NL) then
				edierrordump(MESSAGE) >> TRACE.Detail
			endif
		endif
	endif

	close(TRACE.Detail)
	close(SYSLOG.a)

	if nMainIndex = 0 then
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	flush(TRACE)

	close(tFileOutTemp)
	copy(tFileOutTemp,TRACE.Out)
	close(tFileOutTemp)
	close(TRACE.Out)
endfunction

!==============================================================================

function bfMajtraceSeparacaoSISLEY(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.PERFIL := "SISLEY"
	TRACE.SENTIDO := "O"
	TRACE.MENSAGEM := "M97 - CONF SEPARAÇÃO"
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := time("now","%Y-%m-%d")
	TRACE.MESSAGEID := build(nMessageID:R06)
	TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
			if tMensagemErrro = build("Schema not matched ",NL) then
				edierrordump(MESSAGE) >> TRACE.Detail
			endif
		endif
	endif

	close(TRACE.Detail)
	close(SYSLOG.a)


	if nMainIndex = 0 then
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	flush(TRACE)

	close(tFileOutTemp)
	copy(tFileOutTemp,TRACE.Out)
	close(tFileOutTemp)
	close(TRACE.Out)
endfunction

!==============================================================================

function bfMajtraceSeparacaoSEM(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.PERFIL := tAmbiente
	TRACE.SENTIDO := tSentido
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := time("now","%Y-%m-%d")
	TRACE.MESSAGEID := build(nMessageID:R10)
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOutSep

	SYSLOG.REFERENCE := tREFLIV

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
			if tMensagemErrro = build("Schema not matched ",NL) then
				edierrordump(MESSAGE) >> TRACE.Detail
			endif
		endif
	endif

	close(TRACE.Detail)
	close(SYSLOG.a)

	if nMainIndex = 0 then
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	flush(TRACE)

	close(tFileOut)
	copy(tFileOut,TRACE.Out)
	close(tFileOut)
	close(TRACE.Out)
endfunction

!==============================================================================

function bfMajtraceSerieSEM(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := tAmbiente
	TRACE.SENTIDO := tSentido
	TRACE.MENSAGEM := tTipoDocumento
	TRACE.NUMDOC := tREFLIV
	TRACE.DATDOC := time("now","%Y-%m-%d")
	TRACE.MESSAGEID := build(nMessageID:R10)
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOutSerie

	SYSLOG.REFERENCE := tREFLIV

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
			if tMensagemErrro = build("Schema not matched ",NL) then
				edierrordump(MESSAGE) >> TRACE.Detail
			endif
		endif
	endif

	close(TRACE.Detail)
	close(SYSLOG.a)

	if nMainIndex = 0 then
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	flush(TRACE)

	close(tFileOut)
	copy(tFileOut,TRACE.Out)
	close(tFileOut)
	close(TRACE.Out)

endfunction

!==============================================================================

function bfSqlErro()
    print("FATAL: ",tfSqlErrorStr())
    bfMajtrace(	"Erro de Traducao" \
                ,"1" \
                ,tNumeroDocumento \
                ,tDataDocumento \
                ,tFileInput \
                ,tFileOut \
                ,tMensagem \
                ,build("Erro no banco de dados: ",tfSqlErrorStr()))     
endfunction

!==============================================================================

