%@(#)  source_filename.rte     modif:08-12-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 08-12-2017  XX  Creation
! 08-12-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off
base "../fmbrasil_clientesped/fmbrasil_clientesped.cfg" fmbrasil_clientesped

!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M80_LASA_CSV"
#include "include/generix_func.inc"
#include "include/GEEXM80.inc"
#include "include/GEEXM50.inc"
#include "include/ERPFMviaCSV.inc"

!===========================================================

! Initialization section

begin
    nPos := 1
    nRec := 1
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))

    load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
    tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameGAMAITALY"]

    tCODACTConst := "001"
    nContadorLinhasEscritas  := 0

    tDbBase		:= "FMWMS"
    tDbUsername	:= taPARAM["WMSDBUSER"]
    tDbPassword	:= taPARAM["WMSDBPASS"]
    tDbUrl		:= taPARAM["WMSDBURL"]

    bfSqlInit()

    if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
        print("FATAL ",tfSqlErrorStr())
        bfSqlClose(tDbBase)
        bfMajtrace("Erro de Traducao", \
                    "1", \
                    tNumeroDocumento, \
                    tDataDocumento, \
                    tFileInput, \
                    tFileOut, \
                    "Produtos", \
                    build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
        exit(1)
    endif

    nMainIndex := 0
    nLinha := 0
    nLinhaQuery := 0
    nLinhaWM := 0
endbegin

!===========================================================

line(1:"00.00")
    tData := S_GEEX0000_DATEXC
    tHora := S_GEEX0000_HEUEXC   
endline

line(1:"80.00")
    bConsidera := FALSE
    bConsidera_WM := FALSE

	if S_GEEX8000_SENMVT = "+" and S_GEEX8000_ZONSTS = "N" and S_GEEX8000_MOTMVT = "TR" then
		nLinha++
		taREFLIV[nLinha] := build(S_GEEX8000_ZONSTS, S_GEEX8000_ALLSTS, S_GEEX8000_DPLSTS, S_GEEX8000_NIVSTS, "/", S_GEEX8000_CODPAL)
		taCRILIV[nLinha] := build(S_GEEX8000_ZONSTS, S_GEEX8000_ALLSTS, S_GEEX8000_DPLSTS, S_GEEX8000_NIVSTS)		
		taCODCLI[nLinha] := "ETIQUETA"
		taCODACT[nLinha] := S_GEEX8000_CODACT
		taCODTLI[nLinha] := "NAC"
		taDTILIV[nLinha] := S_GEEX8000_DATMVT
		taHEUMVT[nLinha] := S_GEEX8000_HEUMVT
		taCODPAL[nLinha] := S_GEEX8000_CODPAL
		taCODPRO8000[nLinha] := S_GEEX8000_CODPRO
		taDATFVI[nLinha] := S_GEEX8000_DATFVI
		taUVCMVT[nLinha] := S_GEEX8000_UVCMVT
		taDIPLIV[nLinha] := build(build(substr(S_GEEX8000_CODPAL,(length(S_GEEX8000_CODPAL)-7),8)):8,build(substr(S_GEEX8000_CODPRO,1,10)):10,build(substr(S_GEEX8000_DATFVI,1,8)):8, build(substr(S_GEEX8000_UVCMVT,1,9)):9, build(substr(S_GEEX8000_PCBPRO,1,5)):5)
		bConsidera := TRUE
		taCODLOT8000[nLinha] := S_GEEX8000_CODLOT

        tQuery := build("SELECT  A.PLANTA", NL," "\
                        "       ,A.PRODUTO AS CODPRO", NL," "\
                        "       ,A.RUBRICA AS CODRUB", NL," "\
                        "       ,A.SKU     AS VALRUB", NL," "\
                        "       ,A.QTDE    AS DIVISOR_QTDE", NL," "\
                        "FROM", NL," "\
                        "(", NL," "\
                        "	SELECT  P.CODACT                                                                                             AS PLANTA", NL," "\
                        "	       ,P.CODPRO                                                                                             AS PRODUTO", NL," "\
                        "	       ,P.CODRUB                                                                                             AS RUBRICA", NL," "\
                        "	       ,CASE WHEN INSTR(P.VALRUB,'/') = 0 THEN P.VALRUB  ELSE SUBSTR(P.VALRUB,1,INSTR(P.VALRUB,'/') - 1) END AS SKU", NL," "\
                        "	       ,CASE WHEN INSTR(P.VALRUB,'/') = 0 THEN 1 ELSE SUBSTR(P.VALRUB,INSTR(P.VALRUB,'/') + 1) END           AS QTDE", NL," "\
                        "	FROM FGE50FM",tToInfologPrefixFilename,".GEPRRUB P", NL," "\
                        "	WHERE P.CODACT = '",S_GEEX8000_CODACT,"'", NL," "\
                        "	AND P.TYPRUB = 2", NL," "\
                        "	AND P.CODRUB <> 'CLOR'", NL," "\
                        "	AND P.CODPRO = '",S_GEEX8000_CODPRO,"'", NL," "\
                        ") A, (", NL," "\
                        "SELECT  CODPRO", NL," "\
                        "       ,CODACT", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GEPRO X", NL," "\
                        "WHERE X.CODACT = '",S_GEEX8000_CODACT,"') B", NL," "\
                        "WHERE A.SKU = B.CODPRO", NL," "\
                        "AND A.PLANTA = B.CODACT", NL," "\
                        "ORDER BY A.PRODUTO")

        log(tQuery,NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
            nLinhaQuery++
            taLinhaQuery[nLinhaQuery] := build(nLinha)
            taCODPRO[nLinhaQuery] := peel(taDb2Array["CODPRO"]," ")
            taCODRUB[nLinhaQuery] := peel(taDb2Array["CODRUB"]," ")
            taVALRUB[nLinhaQuery] := peel(taDb2Array["VALRUB"]," ")
            taDIVISOR_QTDE[nLinhaQuery] := peel(taDb2Array["DIVISOR_QTDE"]," ")
            baCODPROCODLOTDuplicado[nLinhaQuery] := FALSE
            taUVCMVTQueryAux[nLinhaQuery] := taUVCMVT[nLinha]

            if number(taDIVISOR_QTDE[nLinhaQuery]) = 0 then
                taDIVISOR_QTDE[nLinhaQuery] := "1"
            endif

            taUVCMVTQuery[nLinhaQuery] := build(number(taUVCMVTQueryAux[nLinhaQuery]) / number(taDIVISOR_QTDE[nLinhaQuery]))

            if taCODRUB[nLinhaQuery] = "ETQ1" then
                taLoteQuery[nLinhaQuery] := taDATFVI[nLinha]
            else
                taLoteQuery[nLinhaQuery] := ""
            endif

            remove(taDb2Array)
        endwhile

        if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif
    endif
	
    if S_GEEX8000_SENMVT = "-"  and S_GEEX8000_MOTMVT = "WM" then
        nLinhaWM++
        taDTILIV_WM[nLinhaWM] := S_GEEX8000_DATMVT
        taHEUMVT_WM[nLinhaWM] := S_GEEX8000_HEUMVT
        taCODPAL_WM[nLinhaWM] := S_GEEX8000_CODPAL
        taCODPRO8000_WM[nLinhaWM] := S_GEEX8000_CODPRO
        taDATFVI_WM[nLinhaWM] := S_GEEX8000_DATFVI
        taUVCMVT_WM[nLinhaWM] := S_GEEX8000_UVCMVT
        taCODLOT8000_WM[nLinhaWM] := S_GEEX8000_CODLOT
        taCODACT_WM[nLinhaWM] := S_GEEX8000_CODACT
        bConsidera_WM := TRUE
    endif
endline

line(1:"80.01")
    if bConsidera = TRUE then
        taDIPLIV[nLinha] := build(taDIPLIV[nLinha],build(substr(S_GEEX8001_FAMPRO,1,1)):1, build(substr(taCODLOT8000[nLinha],1,9)):9)	
    endif

    if bConsidera_WM = TRUE then
        taPDBPAL_WM[nLinhaWM] := build(number(S_GEEX8001_PDBPAL)/1000)
    endif
endline

line("99.00")
    nContadorHeaderTmp := 1
    nTempLinha := 1

    while nTempLinha <= nLinha do
        nMessageID := cMessageID

        tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
        tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
        tNameOut := build(tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")

        R_GEEX0000_CODEXC("00")
        R_GEEX0000_SEPEXC(".")
        R_GEEX0000_SCOEXC("00")
        R_GEEX0000_TRTEXC("")
        R_GEEX0000_EMTEXC("FM") 
        R_GEEX0000_RCTEXC("")
        R_GEEX0000_DATEXC(time("now" ,"%Y%m%d"))
        R_GEEX0000_HEUEXC(time("now" ,"%H%M%S"))
        R_GEEX0000_NUMEXC("0000000")
        R_GEEX0000_ACQEXC("0")
        R_GEEX0000_VEREXC("5.00") 
        R_GEEX0000_NOMSYS("")  
        R_GEEX0000_NOMDTQ("M50")
        R_GEEX0000_BIBDTQ("")
        R_GEEX0000_LIBEXC(build(nMessageID:R010))
        R_GEEX0000_BIBDST("")
        R_GEEX0000_PGMDST("")
        R_GEEX0000_PARDST("")
        R_GEEX0000_CODACT("")
        R_GEEX0000_IGLSIT("")
        R_GEEX0000_EDISIT(build(number(tCentro_De_Custo)))
        R_GEEX0000_IMAEXC("")  
        
        flush(0,0,NL) >> tFileOutTemp
        nContadorLinhasEscritas++
			   
        R_GEEX5000_CODEXC("50")
        R_GEEX5000_SEPEXC(".")
        R_GEEX5000_SCOEXC("00")
        R_GEEX5000_CODACT(taCODACT[nTempLinha])
        R_GEEX5000_CODCLI(taCODCLI[nTempLinha])  
        R_GEEX5000_REFLIV(taREFLIV[nTempLinha])
        R_GEEX5000_DTILIV(taDTILIV[nTempLinha])
        R_GEEX5000_CODTLI(taCODTLI[nTempLinha] )

        flush(0,0,NL) >> tFileOutTemp
        nContadorLinhasEscritas++

        R_GEEX5001_CODEXC("50")
        R_GEEX5001_SEPEXC(".")
        R_GEEX5001_SCOEXC("01")
        R_GEEX5001_CODACT(taCODACT[nTempLinha])
        R_GEEX5001_CODCLI(taCODCLI[nTempLinha])  
        R_GEEX5001_REFLIV(taREFLIV[nTempLinha])
        R_GEEX5001_CRILIV(taCRILIV[nTempLinha])
        R_GEEX5001_DIPLIV(taDIPLIV[nTempLinha])

        flush(0,0,NL) >> tFileOutTemp
        nContadorLinhasEscritas++

        nNumeroLinha := 0
        nContadorLinhasEncomenda := 0
        nTempLinhaQuery := 1

        while nTempLinhaQuery <= nLinhaQuery do  
            if taLinhaQuery[nTempLinhaQuery] = build(nTempLinha) then
                R_GEEX5020_CODEXC("50")
                R_GEEX5020_SEPEXC(".")
                R_GEEX5020_SCOEXC("20")
                R_GEEX5020_CODACT(taCODACT[nTempLinha])
                nNumeroLinha++
                R_GEEX5020_NLILIV(build(nNumeroLinha:R05.0))
                R_GEEX5020_CODCLI(taCODCLI[nTempLinha])
                R_GEEX5020_CODPRO(taVALRUB[nTempLinhaQuery])

                if taCODRUB[nTempLinhaQuery] = "ETQ1" then
                    R_GEEX5020_CODLOT(substr(taLoteQuery[nTempLinhaQuery],1,6))
                endif

                tCont := build(number(taUVCMVTQuery[nTempLinhaQuery]))	
                nPosicaoPonto := 0
                nPosicaoPonto := index(tCont,".")

                if (nPosicaoPonto) > 0 then
                    tCont := build(number(substr(tCont,1,nPosicaoPonto-1))+1)
                else
                    tCont := build(number(tCont))
                endif

                R_GEEX5020_UVCCDE(tCont)
                R_GEEX5020_REFLIV(taREFLIV[nTempLinha])
                nContadorLinhasEncomenda++

                flush(0,0,NL) >> tFileOutTemp
                nContadorLinhasEscritas++

                R_GEEX5021_CODEXC("50")
                R_GEEX5021_SEPEXC(".")
                R_GEEX5021_SCOEXC("21")
                R_GEEX5021_CODACT(taCODACT[nTempLinha])
                R_GEEX5021_CODCLI(taCODCLI[nTempLinha])
                R_GEEX5021_REFLIV(taREFLIV[nTempLinha])
                R_GEEX5021_NLILIV(build(nNumeroLinha:R05.0))
                R_GEEX5021_DIPLIV(taDIPLIV[nTempLinha])

                flush(0,0,NL) >> tFileOutTemp
                nContadorLinhasEscritas++
            endif
            nTempLinhaQuery++
        endwhile
				
        R_GEEX5099_CODEXC("50")
        R_GEEX5099_SEPEXC(".")
        R_GEEX5099_SCOEXC("99")
        R_GEEX5099_CUMLIG(build(nContadorLinhasEncomenda))
        R_GEEX5099_CODACT(taCODACT[nTempLinha])
        R_GEEX5099_CODCLI(taCODCLI[nTempLinha])
        R_GEEX5099_REFLIV(taREFLIV[nTempLinha])

        flush(0,0,NL) >> tFileOutTemp
        nContadorLinhasEscritas++

        R_GEEX9900_CODEXC("99")
        R_GEEX9900_SEPEXC(".")
        R_GEEX9900_SCOEXC("00")
        R_GEEX9900_TRTEXC("")
        R_GEEX9900_EMTEXC("FM")
        R_GEEX9900_RCTEXC("")
        R_GEEX9900_DATEXC(time("now" ,"%Y%m%d"))
        R_GEEX9900_HEUEXC(time("now" ,"H%M%S"))
        R_GEEX9900_NUMEXC("")
        tContadorLinhasEscritas := build(nContadorLinhasEscritas)
        R_GEEX9900_CPTEXC(build(number(tContadorLinhasEscritas):R08.0))

        flush(0,0,NL)  >> tFileOutTemp
        close(tFileOutTemp)

        bfMajtrace("Recebida", \
                    "0", \
                    tNumeroDocumento, \
                    tDataDocumento, \
                    tFileInput, \
                    tFileOut, \
                    "Produtos", \
                    "")

        copy(tFileOutTemp,tFileOut)
        close(tFileOutTemp)
        remove(tFileOutTemp)
        close(tFileOut)
        nTempLinha++
    endwhile	
				
    nTempLinhaWM := 1
    while nTempLinhaWM <= nLinhaWM do

        tFileOutPEDIND := build(sHOME,"/ToAS2Proxy/FM",tToInfologPrefixFilename,taCODACT_WM[nTempLinhaWM],"_PED.",time("now" ,"%Y%m%d%H%M%S"),".csv")
        tFileOutTempPEDIND := build(sHOME,"/ToAS2Proxy/Temp/FM",tToInfologPrefixFilename,taCODACT_WM[nTempLinhaWM],"_PED.",time("now" ,"%Y%m%d%H%M%S"),".csv")
        tNameOutPEDIND := build("FM",tToInfologPrefixFilename,taCODACT_WM[nTempLinhaWM],"_PED.",time("now" ,"%Y%m%d%H%M%S"),".csv")

        tQuery := build("SELECT CODFOU", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GEPAL", NL," "\
                        "WHERE CODPAL = '",taCODPAL_WM[nTempLinhaWM],"'", NL," "\
                        "AND CODACT = '",taCODACT_WM[nTempLinhaWM],"'")

        log(tQuery,NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
            tCODFOU_PEDIND := peel(taDb2Array["CODFOU"]," ")
            remove(taDb2Array)
        endwhile

        if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif
																
        if length(tCODFOU_PEDIND) > 0 then        
            fmbrasil_clientesped := find(build(sHOME,"/fmbrasil_clientesped"),CODCLI=tCODFOU_PEDIND,CODACT=taCODACT_WM[nTempLinhaWM])
            if valid(fmbrasil_clientesped) then
                if length(fmbrasil_clientesped.CODIGOFABRICANTE) > 0 and length(fmbrasil_clientesped.CODERP) > 0 and length(fmbrasil_clientesped.CODACT) > 0 then
                    bFazPED := TRUE
                endif
            else
                fmbrasil_clientesped := find(build(sHOME,"/fmbrasil_clientesped"),CNPJ=tCODFOU_PEDIND,CODACT=taCODACT_WM[nTempLinhaWM])
                if valid(fmbrasil_clientesped) then
                    if length(fmbrasil_clientesped.CODIGOFABRICANTE) > 0 and length(fmbrasil_clientesped.CODERP) > 0 and length(fmbrasil_clientesped.CODACT) > 0 then
                        bFazPED := TRUE
                    endif
                endif
            endif
        else
            tQuery := build("SELECT LIBCPL", NL," "\
                            "FROM FGE50FM",tToInfologPrefixFilename,".GEACT", NL," "\
                            "WHERE CODACT = '",taCODACT_WM[nTempLinhaWM],"'")

            log(tQuery,NL)

            if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
                print("FATAL ", tfSqlErrorStr())
                bfMajtrace("Erro de Traducao", \
                            "1", \
                            tNumeroDocumento, \
                            tDataDocumento, \
                            tFileInput, \
                            tFileOut, \
                            "Produtos", \
                            build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                exit(1)
            endif

            if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
                print("FATAL ", tfSqlErrorStr())
                bfMajtrace("Erro de Traducao", \
                            "1", \
                            tNumeroDocumento, \
                            tDataDocumento, \
                            tFileInput, \
                            tFileOut, \
                            "Produtos", \
                            build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                exit(1)
            endif

            while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
                tLIBCPL_PEDIND := peel(taDb2Array["LIBCPL"]," ")
                remove(taDb2Array)
            endwhile

            if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
                print("FATAL", tfSqlErrorStr())
                bfMajtrace("Erro de Traducao", \
                            "1", \
                            tNumeroDocumento, \
                            tDataDocumento, \
                            tFileInput, \
                            tFileOut, \
                            "Produtos", \
                            build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                exit(1)
            endif

            fmbrasil_clientesped := find(build(sHOME,"/fmbrasil_clientesped"),CNPJ=tLIBCPL_PEDIND,CODACT=taCODACT_WM[nTempLinhaWM])
            if valid(fmbrasil_clientesped) then
                if length(fmbrasil_clientesped.CODIGOFABRICANTE) > 0 and length(fmbrasil_clientesped.CODERP) > 0 and length(fmbrasil_clientesped.CODACT) > 0 then
                    bFazPED := TRUE
                endif
            else
                fmbrasil_clientesped := find(build(sHOME,"/fmbrasil_clientesped"),CODCLI=tLIBCPL_PEDIND,CODACT=taCODACT_WM[nTempLinhaWM])
                if valid(fmbrasil_clientesped) then
                    if length(fmbrasil_clientesped.CODIGOFABRICANTE) > 0 and length(fmbrasil_clientesped.CODERP) > 0 and length(fmbrasil_clientesped.CODACT) > 0 then
                        bFazPED := TRUE
                    endif
                endif
            endif
        endif

        R_HEADER_TIPO_REGISTRO("1")
        R_HEADER_ID("")
        R_HEADER_STATUS_INT("P")
        R_HEADER_DATACRIACAO(tfConvertDate(taDTILIV_WM[nTempLinhaWM], "YYYYMMDD", "DD/MM/YYYY"))
        R_HEADER_DTHRABSORCAO("")

        if taCODACT_WM[nTempLinhaWM] = "LAS" then
            R_HEADER_TIPODOCUMENTO("PED")
        endif

        R_HEADER_TIPO("S")
        R_HEADER_NUMEROMOV(taHEUMVT_WM[nTempLinhaWM])
        R_HEADER_CPFCNPJ(build(number(fmbrasil_clientesped.CNPJ):R014))
        R_HEADER_NOME(fmbrasil_clientesped.NOME)
        R_HEADER_RUA(fmbrasil_clientesped.RUA)
        R_HEADER_NUMERO(fmbrasil_clientesped.NUMERO)
        R_HEADER_COMPLEMENTO(fmbrasil_clientesped.COMPLEMENTO)
        R_HEADER_BAIRRO(fmbrasil_clientesped.BAIRRO)
        R_HEADER_CIDADE(fmbrasil_clientesped.CIDADE)
        R_HEADER_CODETD(fmbrasil_clientesped.CODETD)
        R_HEADER_CEP(fmbrasil_clientesped.CEP)
        R_HEADER_TELEFONE(fmbrasil_clientesped.TELEFONE)
        R_HEADER_EMAIL(fmbrasil_clientesped.EMAIL)
        R_HEADER_CNPJFILIAL(build(number(fmbrasil_clientesped.CNPJFILIAL):R014))
        R_HEADER_SERIE("")
        R_HEADER_DATAEMISSAO(tfConvertDate(taDTILIV_WM[nTempLinhaWM], "YYYYMMDD" , "DD/MM/YYYY"))
        R_HEADER_DATASAIDA(tfConvertDate(taDTILIV_WM[nTempLinhaWM], "YYYYMMDD" , "DD/MM/YYYY") )
        R_HEADER_DATAENTREGA(tfConvertDate(taDTILIV_WM[nTempLinhaWM], "YYYYMMDD" , "DD/MM/YYYY"))
        R_HEADER_VALORBRUTO("")
        R_HEADER_VALORLIQUIDO("")
        R_HEADER_VALORFRETE("")
        R_HEADER_VALORDESPESAS("")
        R_HEADER_OBSERVACAO("FALTA NA IMOBILIZACAO")
        R_HEADER_CAMPOLIVRE1(fmbrasil_clientesped.CODERP)
        R_HEADER_CAMPOLIVRE2(build(taDTILIV_WM[nTempLinhaWM],taHEUMVT_WM[nTempLinhaWM]))
        R_HEADER_ORIGEM("A")
        tCont := peel(build(number(taPDBPAL_WM[nTempLinhaWM]):R15.1)," ")
        R_HEADER_PESOLIQUIDO(replace(tCont,".",","))
        tCont := peel(build(number(taPDBPAL_WM[nTempLinhaWM]):R15.1)," ")
        R_HEADER_PESOBRUTO(replace(tCont,".",","))
        R_HEADER_RECCREATEDBY("")
        R_HEADER_RECCREATEDON("")
        R_HEADER_RECMODIFIEDBY("")
        R_HEADER_RECMODIFIEDON("")
        R_HEADER_CAMPOLIVRE3("")
        R_HEADER_MOVGERADO("")
        R_HEADER_DADOSADICIONAIS("")
        R_HEADER_CNPJTRANSPORTADORA("")
        R_HEADER_IDNAT("")
        R_HEADER_CODTRA("")
        R_HEADER_PESSOAFISOUJUR("")
        R_HEADER_CONTRIBUINTE("")
        R_HEADER_REGIMEESPECIAL("")
        R_HEADER_INSCRESTADUAL(fmbrasil_clientesped.INSCRESTADUAL)
        R_HEADER_FRETECIFOUFOB("")
        R_HEADER_ESPECIE("PALETE")

        tQuery := build("SELECT  CASE WHEN CEILING(('",taUVCMVT_WM[nTempLinhaWM],"')/((COLCOU1*COUPAL1)*PCBPRO)) >= 1 THEN CEILING(('",taUVCMVT_WM[nTempLinhaWM],"')/((COLCOU1*COUPAL1)*PCBPRO)) ELSE 1 END VOLUMES", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GEPRO", NL," "\
                        "WHERE CODPRO = '",taCODPRO8000_WM[nTempLinhaWM],"'", NL," "\
                        "AND CODACT = '",taCODACT_WM[nTempLinhaWM],"'")

        log(tQuery,NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
            tVOLUMES := peel(taDb2Array["VOLUMES"]," ")
            remove(taDb2Array)
        endwhile

        if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif					   
							   
        R_HEADER_VOLUMES(build(number(tVOLUMES)))
        R_HEADER_NUMERODELIVERY(build(taDTILIV_WM[nTempLinhaWM],taHEUMVT_WM[nTempLinhaWM]))
        R_HEADER_CONSUMIDORFINAL("")
        R_HEADER_VALORICMS("")
        R_HEADER_BASEICMS("")
        R_HEADER_BASEICMSST("")
        R_HEADER_VALORICMSST("")
        R_HEADER_DT_AGENDAMENTO("")
        R_HEADER_CFV_COD("")
        R_HEADER_IDESTRANGEIRO("")
        R_HEADER_CODTDO("NFE")
        R_HEADER_UFDESEMBARACO("")
        R_HEADER_LOCALDESEMBARACO("")							   
        
        print(taHEADER[1],";",taHEADER[2],";",taHEADER[3],";",taHEADER[4],";",taHEADER[5],";",taHEADER[6],";",taHEADER[7],";",taHEADER[8],";",taHEADER[9],";",taHEADER[10],";",taHEADER[11],";",taHEADER[12], \
            ";",taHEADER[13],";",taHEADER[14],";",taHEADER[15],";",taHEADER[ \
            16],";",taHEADER[17],";",taHEADER[18],";",taHEADER[19],";", \
            taHEADER[20],";",taHEADER[21],";",taHEADER[22],";",taHEADER[23],";" \
            ,taHEADER[24],";",taHEADER[25],";",taHEADER[26],";",taHEADER[27], \
            ";",taHEADER[28],";",taHEADER[29],";",taHEADER[30],";",taHEADER[ \
            31],";",taHEADER[32],";",taHEADER[33],";",taHEADER[34],";", \
            taHEADER[35],";",taHEADER[36],";",taHEADER[37],";",taHEADER[38],";" \
            ,taHEADER[39],";",taHEADER[40],";",taHEADER[41],";",taHEADER[42], \
            ";",taHEADER[43],";",taHEADER[44],";",taHEADER[45],";",taHEADER[ \
            46],";",taHEADER[47],";",taHEADER[48],";",taHEADER[49],";", \
            taHEADER[50],";",taHEADER[51],";",taHEADER[52],";",taHEADER[53],";",taHEADER[54],";",taHEADER[55],";",taHEADER[56],";",taHEADER[57], \
            ";",taHEADER[58],";",taHEADER[59],";",taHEADER[60],";",taHEADER[ \
            61],";",taHEADER[62],";",taHEADER[63], NL) >> tFileOutTempPEDIND

        remove(taHEADER)

        nContador5120PED := 0
									
        R_DETAIL_TIPO_REGISTRO("2")
        R_DETAIL_ID("")
        nContador5120PED++
        R_DETAIL_NUMEROSEQUENCIAL(build(nContador5120PED:R05))
        R_DETAIL_CODIGOPRD(taCODPRO8000_WM[nTempLinhaWM])
        R_DETAIL_QUANTIDADE(taUVCMVT_WM[nTempLinhaWM])
        R_DETAIL_PRECOUNITARIO("")

        tQuery := build("SELECT DS1PRO", NL," "\
                        "FROM FGE50FM",tToInfologPrefixFilename,".GEPRO", NL," "\
                        "WHERE CODPRO = '",taCODPRO8000_WM[nTempLinhaWM],"'", NL," "\
                        "AND CODACT = '",taCODACT_WM[nTempLinhaWM],"'")

        log(tQuery,NL)

        if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL ", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
            tDS1PRO := peel(taDb2Array["DS1PRO"]," ")
            remove(taDb2Array)
        endwhile

        if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
            print("FATAL", tfSqlErrorStr())
            bfMajtrace("Erro de Traducao", \
                        "1", \
                        tNumeroDocumento, \
                        tDataDocumento, \
                        tFileInput, \
                        tFileOut, \
                        "Produtos", \
                        build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
            exit(1)
        endif

        R_DETAIL_DESCRICAOPROD(tDS1PRO)
        R_DETAIL_UND("UN")
        R_DETAIL_CODFABRICANTE(fmbrasil_clientesped.CODIGOFABRICANTE)
        R_DETAIL_IDLOTE("")
        R_DETAIL_RECCREATEDBY("")
        R_DETAIL_RECCREATEDON("")
        R_DETAIL_RECMODIFIEDBY("")
        R_DETAIL_RECMODIFIEDON("")
        R_DETAIL_CODIGOBARRAS("")
        R_DETAIL_CODIFFISCAL("")
        R_DETAIL_PROCMERCADORIA("")
        R_DETAIL_NRREFERENCIA("")
        R_DETAIL_SERIE("")
        R_DETAIL_IDNAT("")
        R_DETAIL_CODCOLIGADA("")
        R_DETAIL_QTDFALTA("")
        R_DETAIL_TIPOPRD("")
        R_DETAIL_USOECONSUMO("")
        R_DETAIL_NUMEROCCF("")
        R_DETAIL_ALIQICMS("")
        R_DETAIL_VALORICMS("")
        R_DETAIL_BASEICMS("")
        R_DETAIL_ALIQICMSST("")
        R_DETAIL_BASEICMSST("")
        R_DETAIL_VALORICMSST("")
        R_DETAIL_ALIQIVA("")

        if length(taCODLOT8000_WM[nTempLinhaWM]) > 0 then
            R_DETAIL_OBSERVACAO(build("Lote: ",taCODLOT8000_WM[nTempLinhaWM]))
        endif

        R_DETAIL_CODIGOCEST("")

        print(taDETAIL[1],";",taDETAIL[2],";",taDETAIL[3],";",taDETAIL[4],";",taDETAIL[5],";",taDETAIL[6],";",taDETAIL[7],";",taDETAIL[8],";",taDETAIL[9],";",taDETAIL[10],";",taDETAIL[11],";",taDETAIL[12], \
            ";",taDETAIL[13],";",taDETAIL[14],";",taDETAIL[15],";",taDETAIL[ \
            16],";",taDETAIL[17],";",taDETAIL[18],";",taDETAIL[19],";", \
            taDETAIL[20],";",taDETAIL[21],";",taDETAIL[22],";",taDETAIL[23],";",taDETAIL[24],";",taDETAIL[25],";",taDETAIL[26],";",taDETAIL[27], \
            ";",taDETAIL[28],";",taDETAIL[29],";",taDETAIL[30],";",taDETAIL[ \
            31],";",taDETAIL[32],";",taDETAIL[33],";",taDETAIL[34], NL) >> tFileOutTempPEDIND

        remove(taDETAIL)

        bfMajtracePEDIND("Recebida", \
                            "0", \
                            tNumeroDocumento, \
                            tDataDocumento, \
                            tFileInput, \
                            tFileOut, \
                            "Produtos", \
                            "")

        system("sleep 1")
        close(tFileOutTempPEDIND)
        copy(tFileOutTempPEDIND,tFileOutPEDIND)
        close(tFileOutTempPEDIND)
        remove(tFileOutTempPEDIND)
        close(tFileOutPEDIND)

        nTempLinhaWM++
    endwhile
				
    bfSqlClose(tDbBase)
    exit(0)
endline

!===========================================================

! Default statements section
default

enddefault

!===========================================================

! End statements section

end
    exit(0)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
    TRACE:=new(build(sHOME,"/trace"))
    TRACE.ESTADO := tStatus
    TRACE.ERRO := tError
    TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
    TRACE.MENSAGEM := tTipoDocumento
    TRACE.PERFIL := "LASA"
    TRACE.SENTIDO := "I"
    TRACE.MENSAGEM := "PEDIDO DE ETIQUETAS"
    TRACE.NUMDOC := taREFLIV[nTempLinha]
    TRACE.DATDOC := tfConvertDate(taDTILIV[nTempLinha], "YYYYMMDD" , "YYYY-MM-DD") 
    TRACE.MESSAGEID := build(nMessageID:R010)   
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
    TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
    TRACE.FICHEIROSAIDA := tNameOut
    TRACE.LIBEXC := tLIBEXC

	SYSLOG.REFERENCE := build(nMessageID)

    if tStatus = "Recebida" then
        print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Traduzida com Sucesso",NL) >> TRACE.Detail
    else
        if tStatus = "Erro de Traducao" then
            print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
            print("Erro de Traducao",NL) >> TRACE.Detail
            print(tMensagemErrro,NL) >> TRACE.Detail
        endif
    endif

    close(TRACE.Detail)

    if nMainIndex = 0 then
        close(SYSLOG.a)
        copy(SYSLOG.a,TRACE.In)
        close(SYSLOG.a)
        close(TRACE.In)
        nMainIndex := TRACE.INDEX
    else
        tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
        system(tCmd)
    endif

    if tError="0" then
        close(tFileOutTemp)
        copy(tFileOutTemp,TRACE.Out)
        close(tFileOutTemp)
        close(TRACE.Out)
    endif

    flush(TRACE)
endfunction

!===========================================================

function bfMajtracePEDIND(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
    TRACE:=new(build(sHOME,"/trace"))
    TRACE.ESTADO := tStatus
    TRACE.ERRO := tError
    TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
    TRACE.MENSAGEM := tTipoDocumento
    TRACE.PERFIL := "LASA"
    TRACE.SENTIDO := "I"
    TRACE.MENSAGEM := "RETORNO REAL MOVIMENTO PED/IND"
    TRACE.NUMDOC := build(taDTILIV_WM[nTempLinhaWM],taHEUMVT[nTempLinhaWM])
    TRACE.DATDOC := tfConvertDate(taDTILIV_WM[nTempLinhaWM], "YYYYMMDD" , "YYYY-MM-DD") 
    TRACE.MESSAGEID := build(nMessageID:R010)   
	if pEDISEND.ORIGINAL.NAME <> build(SYSLOG.INDEX) then
		TRACE.REDE := pEDISEND.ORIGINAL.NAME
	else
		TRACE.REDE := "REPROCESSADO"
	endif
    TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
    TRACE.FICHEIROSAIDA := tNameOutPEDIND
    TRACE.LIBEXC := tLIBEXC

    if tStatus = "Recebida" then
        print(build("Ficheiro de Saida: "),tFileOutPEDIND,NL,NL) >> TRACE.Detail
        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Traduzida com Sucesso",NL) >> TRACE.Detail
    else
        if tStatus = "Erro de Traducao" then
            print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
            print("Erro de Traducao",NL) >> TRACE.Detail
            print(tMensagemErrro,NL) >> TRACE.Detail
        endif
    endif

    close(TRACE.Detail)

    if nMainIndex = 0 then
        close(SYSLOG.a)
        copy(SYSLOG.a,TRACE.In)
        close(SYSLOG.a)
        close(TRACE.In)
        nMainIndex := TRACE.INDEX
    else
        tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
        system(tCmd)
    endif

    if tError = "0" then
    close(tFileOutTempPEDIND)
    copy(tFileOutTempPEDIND,TRACE.Out)
    close(tFileOutTempPEDIND)
    close(TRACE.Out)
    endif

    flush(TRACE)
endfunction

!===========================================================
