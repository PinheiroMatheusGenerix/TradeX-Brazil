%@(#)  source_filename.rte     modif:17-09-2018
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 17-09-2018  XX  Creation
! 17-09-2018  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file>
! temporary file : <name or rule for naming temporary file>
!==============================================================================

! Message definition


base "../trace/trace.cfg" TRACE,autoflush off
base "../fmbrasil_clientesped/fmbrasil_clientesped.cfg" fmbrasil_clientesped


#define TX_PROG_INFO "M97_COTY_SAP_OUT"
#include "include/generix_func.inc"
#include "include/M97_ASCII.inc"
#include "include/ERPFMviaCSV_v2.inc"
#include "include/SERIEHARMAN.inc"
#include "include/M62.inc"
!===========================================================

! Initialization section

begin

   nPos := 1
    nRec := 1
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))




 load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)

        tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameHARMAN"]


		tDbBase			:= "FMWMS"
		tDbBase2			:= "FMWMS2"
		tDbBase3			:= "FMWMS3"
	tDbUsername		:= taPARAM["WMSDBUSER"]
	tDbPassword		:= taPARAM["WMSDBPASS"]
	tDbUrl			:= taPARAM["WMSDBURL"]


	tDbUsernameUPDATES		:= taPARAM["WMSDBUSERUPDATES"]
	tDbPasswordUPDATES		:= taPARAM["WMSDBPASSUPDATES"]
	tDbUrlUPDATES		:= taPARAM["WMSDBURLUPDATES"]


bfSqlInit()


   if not bfSqlJdbc(tDbBase , tDbUsername,tDbPassword,tDbUrl) then
      print("FATAL ",tfSqlErrorStr())
      bfSqlClose(tDbBase)
	  bfMajtraceSerie("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))

      exit(1)
   endif



	 if not bfSqlJdbc(tDbBase2 , tDbUsernameUPDATES,tDbPasswordUPDATES,tDbUrlUPDATES) then
      print("FATAL ",tfSqlErrorStr())
      bfSqlClose(tDbBase)
	  bfMajtraceSerie("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))

      exit(1)
   endif



    tCODACTConst := "001"
    nContadorLinhasEscritas  := 0

nMainIndex := 0

endbegin

line(1:"00.00")
 tREFLIV := ""
bGeraArquivo := FALSE

endline












line(1:"97.40")
	tNUMREC_9740 := S_GEEX9740_NUMREC
	
	
	/*
	SELECT DISTINCT 
        NUMREC
       ,CASE
        WHEN REFORI ='' THEN NULL
        ELSE REFORI
        END NOTA_FISCAL
		FROM FGE50FM0N1.GERECD
		WHERE NUMREC = (SELECT DISTINCT NUMREC FROM FGE50FM0N1.GERECD WHERE NUMORI="97.40-NUMREC")

		Caso o resultado seja nulo, executar o segundo SELECT:

		SELECT NUMREC, TRIM(REFREC) NOTA_FISCAL
		FROM FGE50FM0N1.GERECE
		WHERE NUMREC="97.40-NUMREC"
	
	*/
	
	
	
	
	
	
	
	
	

								
								
								
									
									 
									tQuery := 	build("SELECT DISTINCT  "\
												"    NUMREC "\
												"   ,CASE "\
												"    WHEN REFORI ='' THEN NULL "\
												"    ELSE REFORI "\
												"    END NOTA_FISCAL "\
												"	FROM FGE50FM",tToInfologPrefixFilename,".GERECD "\
												"	WHERE NUMREC = (SELECT DISTINCT NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD WHERE NUMORI='",tNUMREC_9740,"')")
									 


									log("tQuery ",tQuery,NL)	

									   
									if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
												 print("FATAL ", tfSqlErrorStr())
												 bfMajtraceRubrica9740("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
												exit(1)
										
									endif

									if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
										 print("FATAL ", tfSqlErrorStr())
										  bfMajtraceRubrica9740("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
												exit(1)

									endif
									
									nResulqurtu := 0
									while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
										nResulqurtu++
										remove(taREFRECSplitado)
										taDb2Array["NOTA_FISCAL"] := peel(taDb2Array["NOTA_FISCAL"]," ")
										split(taDb2Array["NOTA_FISCAL"],taREFRECSplitado,".")
										taDb2Array["NOTA_FISCAL"] := taREFRECSplitado[1]
										if nResulqurtu= 1 then
										
											nSeqCsv := cSeqCsvHasbro
											tFileOutCSV := build(sHOME,"/ToInfolog/I-FGE50FM",tToInfologPrefixFilename,"GERERUB_HAR_",time("now" ,"%Y%m%d"),"_",build(nSeqCsv:R010),".DAT")
											tFileOutTempCSV := build(sHOME,"/ToInfolog/Temp/I-FGE50FM",tToInfologPrefixFilename,"GERERUB_HAR_",time("now" ,"%Y%m%d"),"_",build(nSeqCsv:R010),".DAT")
											tNameOutCSV := build("I-FGE50FM",tToInfologPrefixFilename,"GERERUB_HAR_",time("now" ,"%Y%m%d"),"_",build(nSeqCsv:R010),".DAT")
										
										
										
										
										
											!NUMREC;SNUREC;TYPRUB;CODRUB;VALRUB;VALNUM;DISPO;MAJCRE;MAJDAT;MAJHMS;MAJPGM;MAJUTI;MAJECR
											!21010001;0;2;NF01;12345-6;;;20210113;20210113;214620;GERE1RUB2;UFMQN1;QPADEV001
											print("NUMREC;SNUREC;TYPRUB;CODRUB;VALRUB;VALNUM;DISPO;MAJCRE;MAJDAT;MAJHMS;MAJPGM;MAJUTI;MAJECR",NL) >> tFileOutTempCSV
										endif
											tNUMLIVCSV := peel(taDb2Array["NUMREC"]," ")
											tSNULIVCSV := ""
											tTYPRUBCSV := "2"
											tCODRUBCSV := build("NF",nResulqurtu:R02)
											tVALRUBCSV := peel(taDb2Array["NOTA_FISCAL"]," ")
											tVALNUMCSV := ""
											tDISPOCSV  := ""
											tMAJCRECSV := time("now" ,"%Y%m%d")
											tMAJDATCSV := time("now" ,"%Y%m%d")
											tMAJHMSCSV := time("now" ,"%H%M%S")
											tMAJPGMCSV := "GERE1RUB2"
											tMAJUTICSV := build("UFM",tToInfologPrefixFilename)
											tMAJECRCSV := "QPADEV001"
									


											print(tNUMLIVCSV,";",tSNULIVCSV,";",tTYPRUBCSV \
													,";",tCODRUBCSV,";",tVALRUBCSV,";",tVALNUMCSV \
													,";",tDISPOCSV,";",tMAJCRECSV,";",tMAJDATCSV,";" \
													,tMAJHMSCSV,";",tMAJPGMCSV,";",tMAJUTICSV,";" \
													,tMAJECRCSV,";", NL) >> tFileOutTempCSV
										
										
										remove(taDb2Array)

									endwhile
									
									

									if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
										print("FATAL", tfSqlErrorStr())
										 bfMajtraceRubrica9740("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
												exit(1)
									endif
						
								
						
									if nResulqurtu >= 1 then
								
										close(tFileOutTempCSV)
										copy(tFileOutTempCSV,tFileOutCSV)
										close(tFileOutTempCSV)
										remove(tFileOutTempCSV)
										close(tFileOutCSV)




										bfMajtraceRubrica9740("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
									else ! se for 0
										!faz 2Âª query
										
										
										
										
										
										
																	tQuery := 	build("SELECT NUMREC, TRIM(REFREC) NOTA_FISCAL "\
																			"	FROM FGE50FM",tToInfologPrefixFilename,".GERECE "\
																			"	WHERE NUMREC ='",tNUMREC_9740,"'")
																 


																log("tQuery ",tQuery,NL)	

																   
																if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
																			 print("FATAL ", tfSqlErrorStr())
																			 bfMajtraceRubrica9740("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																			exit(1)
																	
																endif

																if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
																	 print("FATAL ", tfSqlErrorStr())
																	  bfMajtraceRubrica9740("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																			exit(1)

																endif
																
																nResulqurtu := 0
																while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
																	nResulqurtu++
																	remove(taREFRECSplitado)
																	taDb2Array["NOTA_FISCAL"] := peel(taDb2Array["NOTA_FISCAL"]," ")
																	split(taDb2Array["NOTA_FISCAL"],taREFRECSplitado,".")
																	taDb2Array["NOTA_FISCAL"] := taREFRECSplitado[1]
																	if nResulqurtu= 1 then
																	
																		nSeqCsv := cSeqCsvHasbro
																		tFileOutCSV := build(sHOME,"/ToInfolog/I-FGE50FM",tToInfologPrefixFilename,"GERERUB_HAR_",time("now" ,"%Y%m%d"),"_",build(nSeqCsv:R010),".DAT")
																		tFileOutTempCSV := build(sHOME,"/ToInfolog/Temp/I-FGE50FM",tToInfologPrefixFilename,"GERERUB_HAR_",time("now" ,"%Y%m%d"),"_",build(nSeqCsv:R010),".DAT")
																		tNameOutCSV := build("I-FGE50FM",tToInfologPrefixFilename,"GERERUB_HAR_",time("now" ,"%Y%m%d"),"_",build(nSeqCsv:R010),".DAT")
																	
																	
																	
																	
																	
																		!NUMREC;SNUREC;TYPRUB;CODRUB;VALRUB;VALNUM;DISPO;MAJCRE;MAJDAT;MAJHMS;MAJPGM;MAJUTI;MAJECR
																		!21010001;0;2;NF01;12345-6;;;20210113;20210113;214620;GERE1RUB2;UFMQN1;QPADEV001
																		print("NUMREC;SNUREC;TYPRUB;CODRUB;VALRUB;VALNUM;DISPO;MAJCRE;MAJDAT;MAJHMS;MAJPGM;MAJUTI;MAJECR",NL) >> tFileOutTempCSV
																	endif
																		tNUMLIVCSV := peel(taDb2Array["NUMREC"]," ")
																		tSNULIVCSV := ""
																		tTYPRUBCSV := "2"
																		tCODRUBCSV := build("NF",nResulqurtu:R02)
																		tVALRUBCSV := peel(taDb2Array["NOTA_FISCAL"]," ")
																		tVALNUMCSV := ""
																		tDISPOCSV  := ""
																		tMAJCRECSV := time("now" ,"%Y%m%d")
																		tMAJDATCSV := time("now" ,"%Y%m%d")
																		tMAJHMSCSV := time("now" ,"%H%M%S")
																		tMAJPGMCSV := "GERE1RUB2"
																		tMAJUTICSV := build("UFM",tToInfologPrefixFilename)
																		tMAJECRCSV := "QPADEV001"
																


																		print(tNUMLIVCSV,";",tSNULIVCSV,";",tTYPRUBCSV \
																				,";",tCODRUBCSV,";",tVALRUBCSV,";",tVALNUMCSV \
																				,";",tDISPOCSV,";",tMAJCRECSV,";",tMAJDATCSV,";" \
																				,tMAJHMSCSV,";",tMAJPGMCSV,";",tMAJUTICSV,";" \
																				,tMAJECRCSV,";", NL) >> tFileOutTempCSV
																	
																	
																	remove(taDb2Array)

																endwhile
																
																

																if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
																	print("FATAL", tfSqlErrorStr())
																	 bfMajtraceRubrica9740("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																			exit(1)
																endif
													
															
													
																if nResulqurtu >= 1 then
															
																	close(tFileOutTempCSV)
																	copy(tFileOutTempCSV,tFileOutCSV)
																	close(tFileOutTempCSV)
																	remove(tFileOutTempCSV)
																	close(tFileOutCSV)




																	bfMajtraceRubrica9740("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
										
										
																endif
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
										
	
									endif
	
	
	
	
	
	
	
	
	
	
endline













line(1:"97.50")

	tCODACTLido := S_GEEX9750_CODACT
	tNUMVAG := S_GEEX9750_NUMVAG
	tNUMLIV := S_GEEX9750_NUMLIV
!===========================================================
!===========================================================

!===========================================================
!===========================================================

/*
if index(S_GEEX9750_REFLIV,".") = 0 then
	bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro REFLIV sem PONTO"))
	exit(1)
	!nao faz nada
endif

*/
!1234.56UN
if index(S_GEEX9750_REFLIV,".") = 0 then
	tREFLIVaConsiderar := S_GEEX9750_REFLIV
	log("1 - tREFLIVaConsiderar ",tREFLIVaConsiderar,NL)
else
	!1234.18CX
	tDoisUltimoCaract :=  substr(S_GEEX9750_REFLIV,length(S_GEEX9750_REFLIV)-1,2)
	if tDoisUltimoCaract = "UN" or  tDoisUltimoCaract = "CX" then
		tREFLIVaConsiderar := substr(S_GEEX9750_REFLIV,1,length(S_GEEX9750_REFLIV)-2)
		log("2 - tREFLIVaConsiderar ",tREFLIVaConsiderar,NL)
	else
		tREFLIVaConsiderar := S_GEEX9750_REFLIV
		log("3 - tREFLIVaConsiderar ",tREFLIVaConsiderar,NL)
	endif
	split(S_GEEX9750_REFLIV, taPedido, ".")
endif





bFazPED := FALSE





! SCO----------------------------------------------------------------
!CONFIMACAO SEPARACAO

if S_GEEX9750_CODACT = "HAR" then

log("S_GEEX9750_ETALIV ",S_GEEX9750_ETALIV,NL)

if S_GEEX9750_ETALIV =  "30" then !fazer rubricas

		!ve qual Ã© o codmop
		
		!select numliv, refliv, codmop from FGE50FM",tToInfologPrefixFilename,".gelive where codmop in('MAS','VEN') and numvag='NUMVAG'
		tQuery := build("SELECT CODMOP FROM FGE50FM",tToInfologPrefixFilename,".GELIVE where codmop in('MAS','VEN') and numvag='",tNUMVAG,"'   ")
		log(NL,tQuery,NL)
		
		if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
				print("FATAL ", tfSqlErrorStr())
				bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			
		endif

		if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
			 print("FATAL ", tfSqlErrorStr())
			 bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)

		endif

		while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
			tCODMOPQueryM62Val := peel(taDb2Array["CODMOP"]," ")
			if tCODMOPQueryM62Val= "VEN" then
				break
			endif
			remove(taDb2Array)
	
		endwhile	
		
		
		
		if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
			print("FATAL", tfSqlErrorStr())
			 bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif


			!SELECT // UPDATE // GERACAO M62

		if tCODMOPQueryM62Val = "VEN" then




			tQuery := build("SELECT DISTINCT LEFT (CHAR(CURRENT_TIMESTAMP),4)  "\
				"		   || SUBSTR(CHAR(CURRENT_TIMESTAMP),6,2) "\
				"		   || SUBSTR(CHAR(CURRENT_TIMESTAMP),9,2)  "\
				"		   || SUBSTR(CHAR(CURRENT_TIMESTAMP),12,2) "\
				"		   ||SUBSTR(CHAR(CURRENT_TIMESTAMP),15,2) "\
				"		   ||SUBSTR(CHAR(CURRENT_TIMESTAMP),18,2) REFMIT "\
				"		  ,SE.NUMLIV  "\
				"		  ,SE.NUMSUP "\
				"		  ,AH.TOULIV "\
				"		  ,AH.CODTRA "\
				"		  ,AH.NUMVAG "\
				"		  ,AH.DATLIV "\
				"		  ,AH.CODRGT "\
				"	FROM (SELECT MAX(A.DATLIV) DATLIV, B.CODRGT, B.CODTRA, A.TOULIV, A.NUMLIV, A.NUMVAG FROM FGE50FM",tToInfologPrefixFilename,".GESUPE A, FGE50FM",tToInfologPrefixFilename,".GELIVE B WHERE A.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') AND A.NUMLIV=B.NUMLIV GROUP BY A.TOULIV, A.NUMLIV, A.NUMVAG, B.CODTRA, B.CODRGT) AH "\
				"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
				"	ON AH.NUMVAG=SE.NUMVAG  "\
				"	WHERE AH.NUMVAG='",tNUMVAG,"' "\
				"	AND SE.TYPSUP<>3 "\
				"	AND SE.INDMAS <>'1'")


				tQuery := build("SELECT DISTINCT LEFT (CHAR(CURRENT_TIMESTAMP),4) "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),6,2) "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),9,2) "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),12,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),15,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),18,2) REFMIT "\
"      ,SE.NUMLIV "\
"      ,SE.NUMSUP "\
"      ,LPAD(AH.TOULIV,4,0) TOULIV "\
"      ,AH.CODTRA "\
"      ,AH.NUMVAG "\
"      ,AH.DATLIV "\
"      ,AH.CODRGT "\
"FROM (SELECT MAX(A.DATLIV) DATLIV, B.CODRGT, B.CODTRA, A.TOULIV, A.NUMLIV, A.NUMVAG FROM FGE50FM",tToInfologPrefixFilename,".GESUPE A, FGE50FM",tToInfologPrefixFilename,".GELIVE B WHERE A.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') AND A.NUMLIV=B.NUMLIV AND A.TOULIV<>0 GROUP BY A.TOULIV, A.NUMLIV, A.NUMVAG, B.CODTRA, B.CODRGT) AH "\
"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
"ON AH.NUMVAG=SE.NUMVAG "\
"WHERE AH.NUMVAG='",tNUMVAG,"' "\
"AND SE.TYPSUP<>3 "\
"AND SE.INDMAS <>'1' ")


				tQuery := build("SELECT DISTINCT LEFT (CHAR(CURRENT_TIMESTAMP),4)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),6,2) "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),9,2)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),12,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),15,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),18,2) REFMIT "\
"      ,SE.NUMLIV  "\
"      ,SE.NUMSUP "\
"      ,SE.KAILIV "\
"      ,AH.TOULIV "\
"      ,AH.CODTRA "\
"      ,AH.NUMVAG "\
"      ,AH.DATLIV "\
"      ,AH.CODRGT "\
"FROM (SELECT MAX(A.DATLIV) DATLIV, B.CODRGT, B.CODTRA, A.TOULIV, A.NUMLIV, A.NUMVAG FROM FGE50FM",tToInfologPrefixFilename,".GESUPE A, FGE50FM",tToInfologPrefixFilename,".GELIVE B WHERE A.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') AND A.NUMLIV=B.NUMLIV GROUP BY A.TOULIV, A.NUMLIV, A.NUMVAG, B.CODTRA, B.CODRGT) AH "\
"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
"ON AH.NUMVAG=SE.NUMVAG  "\
"WHERE AH.NUMVAG='",tNUMVAG,"' "\
"AND SE.TYPSUP<>3 "\
"AND SE.INDMAS <>'1' ")






				tQuery := build("SELECT DISTINCT LEFT (CHAR(CURRENT_TIMESTAMP),4)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),6,2) "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),9,2)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),12,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),15,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),18,2) REFMIT "\
"      ,SE.NUMLIV  "\
"      ,SE.NUMSUP "\
"      ,AH.TOULIV "\
"      ,AH.CODTRA "\
"      ,AH.NUMVAG "\
"      ,AH.HEILIV "\
"      ,AH.DATLIV "\
"      ,AH.CODRGT "\
"FROM (SELECT MAX(A.DATLIV) DATLIV, MAX(B.HEILIV) HEILIV,B.CODRGT, B.CODTRA, A.TOULIV, A.NUMLIV, A.NUMVAG FROM FGE50FM",tToInfologPrefixFilename,".GESUPE A, FGE50FM",tToInfologPrefixFilename,".GELIVE B WHERE A.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') AND A.NUMLIV=B.NUMLIV GROUP BY A.TOULIV, A.NUMLIV, A.NUMVAG, B.CODTRA, B.CODRGT) AH "\
"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
"ON AH.NUMVAG=SE.NUMVAG  "\
"WHERE AH.NUMVAG='",tNUMVAG,"' "\
"AND SE.TYPSUP<>3 "\
"AND SE.INDMAS <>'1' ")



				tQuery := build("SELECT DISTINCT LEFT (CHAR(CURRENT_TIMESTAMP),4)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),6,2) "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),9,2)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),12,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),15,2) "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),18,2) REFMIT "\
"      ,SE.NUMLIV  "\
"      ,SE.NUMSUP "\
"      ,AH.TOULIV "\
"      ,AH.CODTRA "\
"      ,AH.NUMVAG "\
"      ,AH.HEILIV "\
"      ,AH.DATLIV "\
"      ,AH.CODRGT "\
"      ,AH.KAILIV "\
"      ,AH.NUMTOU "\
"FROM (SELECT MAX(A.DATLIV) DATLIV, MAX(B.HEILIV) HEILIV,B.CODRGT, B.CODTRA, B.NUMTOU, A.TOULIV, A.NUMLIV, A.NUMVAG, A.KAILIV FROM FGE50FM",tToInfologPrefixFilename,".GESUPE A, FGE50FM",tToInfologPrefixFilename,".GELIVE B WHERE A.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') AND A.NUMLIV=B.NUMLIV GROUP BY A.TOULIV, A.NUMLIV, A.NUMVAG, B.CODTRA,B.NUMTOU, B.CODRGT, A.KAILIV) AH "\
"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
"ON AH.NUMVAG=SE.NUMVAG  "\
"WHERE AH.NUMVAG='",tNUMVAG,"' "\
"AND SE.TYPSUP<>3 "\
"AND SE.INDMAS <>'1' ")

/*
				tQuery := build("SELECT DISTINCT LEFT (CHAR(CURRENT_TIMESTAMP),4)   "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),6,2)  "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),9,2)   "\
"       || SUBSTR(CHAR(CURRENT_TIMESTAMP),12,2)  "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),15,2)  "\
"       ||SUBSTR(CHAR(CURRENT_TIMESTAMP),18,2) REFMIT  "\
"      ,SE.NUMLIV   "\
"      ,SE.NUMSUP  "\
"      ,AH.TOULIV  "\
"      ,AH.CODTRA  "\
"      ,AH.NUMVAG  "\
"      ,AH.HEILIV  "\
"      ,MIN(AH.DATLIV) DATLIV "\
"      ,AH.CODRGT  "\
"      ,AH.KAILIV  "\
"      ,AH.NUMTOU  "\
"FROM (SELECT MAX(A.DATLIV) DATLIV, MAX(B.HEILIV) HEILIV,B.CODRGT, B.CODTRA, B.NUMTOU, A.TOULIV, A.NUMLIV, A.NUMVAG, A.KAILIV FROM FGE50FM",tToInfologPrefixFilename,".GESUPE A, FGE50FM",tToInfologPrefixFilename,".GELIVE B WHERE A.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') AND A.NUMLIV=B.NUMLIV GROUP BY A.TOULIV, A.NUMLIV, A.NUMVAG, B.CODTRA,B.NUMTOU, B.CODRGT, A.KAILIV) AH  "\
"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPE SE  "\
"ON AH.NUMVAG=SE.NUMVAG   "\
"WHERE AH.NUMVAG='",tNUMVAG,"' "\
"AND SE.TYPSUP<>3  "\
"AND SE.INDMAS <>'1'  "\
"GROUP BY SE.NUMLIV   "\
"      ,SE.NUMSUP  "\
"      ,AH.TOULIV  "\
"      ,AH.CODTRA  "\
"      ,AH.NUMVAG  "\
"      ,AH.HEILIV  "\
"      ,AH.CODRGT  "\
"      ,AH.KAILIV  "\
"      ,AH.NUMTOU  "\
"order by SE.NUMLIV")
*/
				log("tQuery ",tQuery,NL)

								if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
											 log("FATAL ", tfSqlErrorStr(),NL,tQuery)
											 bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
											exit(1)

								endif

								if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
									 log("FATAL ", tfSqlErrorStr(),NL,tQuery)
									  bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
											exit(1)

								endif

								bQueryTemResul := FALSE
								nContItemsQueryM62 := 0
								while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
									bQueryTemResul := TRUE
									nContItemsQueryM62++

									tTOULIVQueryM62 := peel(taDb2Array["TOULIV"]," ")
									tTOULIVQueryM62 := build(number(tTOULIVQueryM62):R04)
									tCODRGTQueryM62 := peel(taDb2Array["CODRGT"]," ")
									tREFMITQueryM62 := peel(taDb2Array["REFMIT"]," ")
									tCODTRAQueryM62 := peel(taDb2Array["CODTRA"]," ")
									tDATLIVQueryM62 := peel(taDb2Array["DATLIV"]," ")
									tHEILIVQueryM62 := peel(taDb2Array["HEILIV"]," ")
									taNUMLIVQueryM62[nContItemsQueryM62] := peel(taDb2Array["NUMLIV"]," ")
									taNUMSUPQueryM62[nContItemsQueryM62] := peel(taDb2Array["NUMSUP"]," ")
									taKAILIVQueryM62[nContItemsQueryM62] := peel(taDb2Array["KAILIV"]," ")
									taKAILIVQueryM62[nContItemsQueryM62] := build(number(taKAILIVQueryM62[nContItemsQueryM62]):R03)

									remove(taDb2Array)

								endwhile



								if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
									log("FATAL ", tfSqlErrorStr(),NL,tQuery)
									 bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
											exit(1)
								endif










							if bQueryTemResul = TRUE then
								bNaoFazM62 := FALSE
								TRACE := find(build(sHOME,"/trace"),MENSAGEM=build("M97 - M62 - ",tNUMVAG),PERFIL="HARMAN")
								if valid(TRACE) then
										bNaoFazM62 := TRUE
								endif
								if bNaoFazM62 = FALSE then




										tQueryUpdadeM62 := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GELIVE SET TOULIV='",tTOULIVQueryM62,"' , CODRGT='",tCODRGTQueryM62,"' , HEILIV='",tHEILIVQueryM62,"' WHERE NUMVAG='",tNUMVAG,"' WITH NONE")


									log(tQueryUpdadeM62,NL)


									!colocar aqui o update


											if not bfSqlSet(tDbBase2, "Updatedb2", tQueryUpdadeM62) then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("1 - Erro na execucao da query ",tQueryUpdadeM62," do banco de dados: ",tfSqlErrorStr()))
											  exit(27)
										   endif
										   if not bfSqlExec(tDbBase2, "Updatedb2") then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("2 - Erro na execucao da query ",tQueryUpdadeM62," do banco de dados: ",tfSqlErrorStr()))
											  exit(28)
										   endif
										   if not bfSqlCommit(tDbBase2, "Updatedb2") then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("3 - Erro na execucao da query ",tQueryUpdadeM62," do banco de dados: ",tfSqlErrorStr()))
											  exit(29)
										   endif
										   if not bfSqlFree(tDbBase2, "Updatedb2") then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceM62("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("4 - Erro na execucao da query ",tQueryUpdadeM62," do banco de dados: ",tfSqlErrorStr()))
											  exit(30)
										   endif












															nMessageID := cMessageID

													   tFileOutM62 := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"62",build(nMessageID:R015),".DAT")
													  tFileOutTempM62 := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"62",build(nMessageID:R015),".DAT")
													  tNameOutM62 := build(tToInfologPrefixFilename,"62",build(nMessageID:R015),".DAT")


														 R_00HEADER_CODEXC("00")
														 R_00HEADER_SEPEXC(".")
														 R_00HEADER_SCOEXC("00")
														 R_00HEADER_TRTEXC("")
														 R_00HEADER_EMTEXC("FM")
														 R_00HEADER_RCTEXC("")
														 R_00HEADER_DATEXC(time("now" ,"%Y%m%d"))
														 R_00HEADER_HEUEXC(time("now" ,"%H%M%S"))
														 R_00HEADER_NUMEXC("0000000")
														 R_00HEADER_ACQEXC("0")
														 R_00HEADER_VEREXC("5.00")
														 R_00HEADER_NOMSYS("")
														 R_00HEADER_NOMDTQ("M62")
														 R_00HEADER_BIBDTQ("")
														 R_00HEADER_LIBEXC(tLIBEXC) !(build(nMessageID:R010))
														 R_00HEADER_BIBDST("")
														 R_00HEADER_PGMDST("")
														 R_00HEADER_PARDST("")
														 R_00HEADER_CODACT("")
														 R_00HEADER_IGLSIT("")
														 R_00HEADER_EDISIT(build(number(tCentro_De_Custo)))
														 R_00HEADER_IMAEXC("")
														 R_00HEADER_DISEXC("")

														 flush(0,0,NL) >> tFileOutTempM62   !ESCRITA DO HEADER M00.00


														 R_M6200_CODEXC("62")
														 R_M6200_SEPEXC(".")
														 R_M6200_SCOEXC("00")
														 R_M6200_TRTEXC("2")




														 R_M6200_TOULIV(tTOULIVQueryM62)
														 R_M6200_DATLIV(tDATLIVQueryM62)
														 !R_M6200_HEILIV(tHEILIVQueryM62)
														 R_M6200_REFMIT(tREFMITQueryM62)
														 !R_M6200_MSGEXP(taCrachaVeiculo[nTempNumeroRegistoAgenda])
														 R_M6200_KAILIV(taKAILIVQueryM62[1])
														 R_M6200_CODTRA(tCODTRAQueryM62)
														 nContadorLinhasEscritas++
														flush(0,0,NL)  >> tFileOutTempM62


																!colocar while
																nTempContItemsQueryM62 := 1
																while nTempContItemsQueryM62 <= nContItemsQueryM62	do



																				 R_M6220_CODEXC("62")
																				 R_M6220_SEPEXC(".")
																				 R_M6220_SCOEXC("20")
																				 R_M6220_TRTEXC("2")
																				 R_M6220_REFMIT(tREFMITQueryM62)
																				 R_M6220_NUMLIV(taNUMLIVQueryM62[nTempContItemsQueryM62])
																				 R_M6220_NUMSUP(taNUMSUPQueryM62[nTempContItemsQueryM62])
																				 R_M6220_KAILIV(taKAILIVQueryM62[nTempContItemsQueryM62])
																				 nContadorLinhasEscritas++
																				 flush(0,0,NL)  >> tFileOutTempM62


																				nTempContItemsQueryM62++
																endwhile






														R_99FILEFOOTER_CODEXC("99")
														R_99FILEFOOTER_SEPEXC(".")
														R_99FILEFOOTER_SCOEXC("00")
														R_99FILEFOOTER_TRTEXC("")
														R_99FILEFOOTER_EMTEXC("FM")
														R_99FILEFOOTER_RCTEXC("")
														R_99FILEFOOTER_DATEXC(time("now" ,"%Y%m%d"))
														R_99FILEFOOTER_HEUEXC(time("now" ,"H%M%S"))
														R_99FILEFOOTER_NUMEXC("")
														tContadorLinhasEscritas := build(nContadorLinhasEscritas)
														!print(tContadorLinhasEscritas) > "c:/influe/tContadorLinhasEscritas.txt"
														R_99FILEFOOTER_CPTEXC(build(number(tContadorLinhasEscritas):R08.0)) !VER NUMERO DE REGISTOS EXEPTO HEADER E TRAILLER
														!R_99FILEFOOTER_NOMSYS("")
														!R_99FILEFOOTER_NOMDTQ("")
														!R_99FILEFOOTER_BIBDTQ("")
														!R_99FILEFOOTER_IDEMSG("")
														!R_99FILEFOOTER_DISEXC("")

														flush(0,0,NL)  >> tFileOutTempM62
														close(tFileOutTempM62)






													   bfMajtraceM62("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")




														copy(tFileOutTempM62,tFileOutM62)
															close(tFileOutTempM62)
															remove(tFileOutTempM62)
																close(tFileOutM62)




								endif



							endif





		endif
	endif






	endif













	if S_GEEX9750_ETALIV = "30" then
			tPickingStaDate := S_GEEX9750_DATEXC
			tPickingStaTime := S_GEEX9750_HEUEXC
			bGeraArquivo := TRUE
			!tMensagemTrace := "INICIO PICKING"
			tREFLIV := S_GEEX9750_REFLIV
			tNUMLIV := S_GEEX9750_NUMLIV
		 tNUMVAG := S_GEEX9750_NUMVAG

		TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIVaConsiderar,MENSAGEM=build("M97 - UPDATE"),PERFIL="HARMAN",LIBEXC=tNUMVAG)
		if valid(TRACE) then
						bGeraArquivo := FALSE
		endif


		 if bGeraArquivo = TRUE then


			/*


				tQuery := build("SELECT SD.NUMSUP  "\
				",SE.TYPSUP  "\
				",SD.SEQSUP  "\
				",SE.CIRPIC  "\
				",SD.CODPRO  "\
				",SD.UVCSRV  "\
				",SD.UVCLIV  "\
				",SD.PCBPRO  "\
				",SD.PRPPIC  "\
				",CASE  "\
				"WHEN SD.PRPPIC=5 THEN CEILING(BANC.VOL)  "\
				"ELSE (SD.UVCSRV/SD.PCBPRO)  "\
				"END VOLUMES  "\
				",TRIM(SD.MSGLIG) MSGLIG  "\
				",TRIM(SD.DIPLIV) DIPLIV  "\
				"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE  "\
				", FGE50FM",tToInfologPrefixFilename,".GESUPD SD  "\
				", FGE50FM",tToInfologPrefixFilename,".GEPRO PD  "\
				", (  "\
				"SELECT (SUM(UVCSRV/PCBPRO)) VOL  "\
				"FROM FGE50FM",tToInfologPrefixFilename,".GESUPD  "\
				"WHERE NUMLIV='",tNUMLIV,"'  "\
				") BANC  "\
				"WHERE SE.NUMSUP=SD.NUMSUP  "\
				"AND SE.CODACT=SD.CODACT  "\
				"AND SD.CODPRO=PD.CODPRO  "\
				"AND SD.CODACT=PD.CODACT  "\
				"AND SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
				"AND SE.TYPSUP<>3  "\
				"GROUP BY SD.NUMSUP  "\
				",SE.TYPSUP  "\
				",SD.SEQSUP  "\
				",SE.CIRPIC  "\
				",SD.CODPRO  "\
				",SD.UVCSRV  "\
				",SD.UVCLIV  "\
				",SD.PCBPRO  "\
				",SD.MSGLIG  "\
				",SD.DIPLIV  "\
				",SD.PRPPIC  "\
				",BANC.VOL  "\
				"ORDER BY SE.TYPSUP DESC  "\
				", SD.NUMSUP ASC  "\
				", SD.SEQSUP ASC")


				tQuery := build("SELECT SD.NUMSUP "\
",SE.TYPSUP "\
",SD.SEQSUP "\
",SE.CIRPIC "\
",SD.CODPRO "\
",SD.UVCSRV "\
",SD.UVCLIV "\
",SD.PCBPRO "\
",SD.PRPPIC "\
",CASE "\
"WHEN SD.PRPPIC=5 THEN INTEGER(CEILING(SD.UVCSRV/SD.PCBPRO)) "\
"ELSE INTEGER(SD.UVCSRV/SD.PCBPRO) "\
"END VOLUMES "\
",TRIM(SE.CODMOP) CODMOP "\
",TRIM(SD.DIPLIV) DIPLIV "\
"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
", FGE50FM",tToInfologPrefixFilename,".GESUPD SD "\
", FGE50FM",tToInfologPrefixFilename,".GEPRO PD "\
"WHERE SE.NUMSUP=SD.NUMSUP "\
"AND SE.CODACT=SD.CODACT "\
"AND SD.CODPRO=PD.CODPRO "\
"AND SD.CODACT=PD.CODACT "\
"AND SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
"AND SE.TYPSUP<>3 "\
"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
"GROUP BY SD.NUMSUP "\
",SE.TYPSUP "\
",SD.SEQSUP "\
",SE.CIRPIC "\
",SD.CODPRO "\
",SD.UVCSRV "\
",SD.UVCLIV "\
",SD.PCBPRO "\
",SE.CODMOP "\
",SD.DIPLIV "\
",SD.PRPPIC "\
"ORDER BY SE.TYPSUP DESC "\
", SD.NUMSUP ASC "\
", SD.SEQSUP ASC")

*/

				tQuery := build("SELECT SD.NUMSUP "\
",SE.TYPSUP  "\
",SD.SEQSUP "\
",SE.CIRPIC "\
",SD.CODPRO "\
",SD.UVCSRV "\
",SD.UVCLIV "\
",SD.PCBPRO "\
",SD.PRPPIC "\
",CASE "\
"WHEN SD.PRPPIC=5 THEN INTEGER(CEILING(SD.UVCSRV/SD.PCBPRO)) "\
"ELSE INTEGER(SD.UVCSRV/SD.PCBPRO) "\
"END VOLUMES "\
",TRIM(SE.CODMOP) CODMOP "\
",TRIM(SD.DIPLIV) DIPLIV "\
",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF "\
",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 2) SNF "\
",SUM(SD.UVCSRV) as SOMAUVCSRV "\
"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
", FGE50FM",tToInfologPrefixFilename,".GESUPD SD "\
", FGE50FM",tToInfologPrefixFilename,".GEPRO PD "\
"WHERE SE.NUMSUP=SD.NUMSUP "\
"AND SE.CODACT=SD.CODACT "\
"AND SD.CODPRO=PD.CODPRO "\
"AND SD.CODACT=PD.CODACT "\
"AND SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
"AND SE.TYPSUP<>3 "\
"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
"GROUP BY SD.NUMSUP "\
",SE.TYPSUP "\
",SD.SEQSUP "\
",SE.CIRPIC "\
",SD.CODPRO "\
",SD.UVCSRV "\
",SD.UVCLIV "\
",SD.PCBPRO "\
",SE.CODMOP "\
",SD.DIPLIV "\
",SD.PRPPIC "\
",SE.REFLIV "\
"ORDER BY SE.TYPSUP DESC "\
", SD.NUMSUP ASC "\
", SD.SEQSUP ASC")


				log(tQuery,NL)


						if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
									 print("FATAL ", tfSqlErrorStr())
									 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
									exit(1)

						endif

						if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
							 print("FATAL ", tfSqlErrorStr())
							  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
									exit(1)

						endif

						tVOLUMES    := ""
						nContadorResultadosQuery := 0
						!bFazupdade2 := FALSE
						!fara sempre select 2 e update 2
						bFazupdade2 := TRUE
						bJaTemPRPPICIgualCinco := FALSE
						!bFezPRPPICIguaLCinco  := FALSE

						/*
						Se PRPPIC=5 e SUM(UVCSRV)<PCBPRO entÃ£o preencher somente para a primeira linha PRPPIC=5;
						Se PRPPIC=5 e SUM(UVCSRV)>PCBPRO entÃ£o realizar tratativa normal

						*/

						while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
							nContadorResultadosQuery++

							if nContadorResultadosQuery = 1 then
								if peel(taDb2Array["CODMOP"]," ") = "VEN" or peel(taDb2Array["CODMOP"]," ") = "MAS" then
									log("faz select 2 e update 2 porque codmop = ",peel(taDb2Array["CODMOP"]," "),NL)
									bFazupdade2 := TRUE

								endif
							endif
							if bFazupdade2 = FALSE then

								log("SOMAUVCSRV ",peel(taDb2Array["SOMAUVCSRV"]," "),NL)
								log("PCBPRO ",peel(taDb2Array["PCBPRO"]," "),NL)
								taSOMAUVCSRV[nContadorResultadosQuery] := peel(taDb2Array["SOMAUVCSRV"]," ")
								taPCBPRO[nContadorResultadosQuery] := peel(taDb2Array["PCBPRO"]," ")
								taVOLUMESAux[nContadorResultadosQuery] := peel(taDb2Array["VOLUMES"]," ")
								taMSGLIGOriginal[nContadorResultadosQuery] := peel(taDb2Array["MSGLIG"]," ")
								split(taMSGLIGOriginal[nContadorResultadosQuery],taDIPLIVCalculadoSplitado,"/")
								taDIPLIVCalculado[nContadorResultadosQuery] := peel(taDb2Array["DIPLIV"]," ")
								taPRPPIC[nContadorResultadosQuery] := peel(taDb2Array["PRPPIC"]," ")
								if substr(peel(taDb2Array["SNF"]," "),2,1) = "1" or substr(peel(taDb2Array["SNF"]," "),2,1) = "2" or substr(peel(taDb2Array["SNF"]," "),2,1) = "3" or substr(peel(taDb2Array["SNF"]," "),2,1) = "4" or substr(peel(taDb2Array["SNF"]," "),2,1) = "5" or substr(peel(taDb2Array["SNF"]," "),2,1) = "6" or substr(peel(taDb2Array["SNF"]," "),2,1) = "7" or substr(peel(taDb2Array["SNF"]," "),2,1) = "8" or substr(peel(taDb2Array["SNF"]," "),2,1) = "9" or substr(peel(taDb2Array["SNF"]," "),2,1) = "0" then
									taSNF[nContadorResultadosQuery] := peel(taDb2Array["SNF"]," ")
								else
									taSNF[nContadorResultadosQuery] := substr(peel(taDb2Array["SNF"]," "),1,1)
								endif

								if taPRPPIC[nContadorResultadosQuery] = "5"  then
									if bJaTemPRPPICIgualCinco = FALSE then
										bJaTemPRPPICIgualCinco := TRUE
										if nContadorResultadosQuery = 1 then
											taVOLUMES[nContadorResultadosQuery] := "1"
										else
											taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1])+number(taVOLUMESAux[nContadorResultadosQuery-1]))
										endif
									else
										taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1]))

									endif

								else
									if nContadorResultadosQuery = 1 then
										taVOLUMES[nContadorResultadosQuery] := "1"
									else
										taVOLUMES[nContadorResultadosQuery] := build(number(taVOLUMES[nContadorResultadosQuery-1])+number(taVOLUMESAux[nContadorResultadosQuery-1]))
									endif
								endif

								!fazer update

								!if taPRPPIC[nContadorResultadosQuery] = "5" and number(taSOMAUVCSRV[nContadorResultadosQuery]) < number(taPCBPRO[nContadorResultadosQuery]) and bFezPRPPICIguaLCinco  = TRUE then
									! nao faz nada
								!	log("nao faz update do msglig por PRPPIC = 5 e SUM(UVCSRV) ", taSOMAUVCSRV[nContadorResultadosQuery], " < PCBPRO ",taPCBPRO[nContadorResultadosQuery], " feito mais que uma vez!",NL)
								!else
								!	if taPRPPIC[nContadorResultadosQuery] = "5" and number(taSOMAUVCSRV[nContadorResultadosQuery]) < number(taPCBPRO[nContadorResultadosQuery]) and bFezPRPPICIguaLCinco  = FALSE then
								!		bFezPRPPICIguaLCinco  := TRUE
								!	endif

									taQueryUpdade[nContadorResultadosQuery] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD "\
										"SET MSGLIG='",build(number(taVOLUMES[nContadorResultadosQuery]):R05),"/",build(number(taVOLUMESAux[nContadorResultadosQuery]):R05),"/",build(number(peel(taDb2Array["DIPLIV"]," ")):R05),"/",build(number(peel(taDb2Array["NF"]," ")):R06),"/",build(number(taSNF[nContadorResultadosQuery]):R03),"'  "\
										"WHERE NUMSUP='",peel(taDb2Array["NUMSUP"]," "),"' "\
										"AND SEQSUP='",peel(taDb2Array["SEQSUP"]," "),"' "\
										"AND CODPRO='",peel(taDb2Array["CODPRO"]," "),"' "\
										"AND UVCSRV='",peel(taDb2Array["UVCSRV"]," "),"' WITH NONE")


									log(taQueryUpdade[nContadorResultadosQuery],NL)


									!colocar aqui o update


											if not bfSqlSet(tDbBase2, "Updatedb2", taQueryUpdade[nContadorResultadosQuery]) then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("1 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
											  exit(27)
										   endif
										   if not bfSqlExec(tDbBase2, "Updatedb2") then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("2 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
											  exit(28)
										   endif
										   if not bfSqlCommit(tDbBase2, "Updatedb2") then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("3 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
											  exit(29)
										   endif
										   if not bfSqlFree(tDbBase2, "Updatedb2") then
											  log(tfSqlErrorStr(), NL)
											  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("4 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
											  exit(30)
										   endif

								!endif

							endif

							remove(taDb2Array)

						endwhile



						if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
							print("FATAL", tfSqlErrorStr())
							 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
									exit(1)
						endif






						if nContadorResultadosQuery > 0 and bFazupdade2 = FALSE then
							bfMajtraceUPDATE("Recebida","0",build(tPlacaVeiculo,"-",tRomaneio),tDataDocumento,tFileInput,tFileOut,"Produtos","")
						endif





						!select e update 2
						if bFazupdade2 = TRUE then


										tQuery := build("SELECT SEQSUP, CODPRO FROM FGE50FM",tToInfologPrefixFilename,".GESUPD WHERE REFLIV LIKE '",tREFLIVaConsiderar,"%' ORDER BY SEQSUP ASC")

										!SELECT A.numsup, B.typsup, A.SEQSUP, A.CODPRO FROM FGE50FM",tToInfologPrefixFilename,".GESUPD A, FGE50FM",tToInfologPrefixFilename,".GESUPE B WHERE A.NUMLIV=B.NUMLIV AND A.NUMSUP=B.NUMSUP AND A.NUMLIV='",tNUMLIV,"' ORDER BY A.SEQSUP ASC
										tQuery := build("SELECT A.numsup, B.typsup, A.SEQSUP, A.CODPRO FROM FGE50FM",tToInfologPrefixFilename,".GESUPD A, FGE50FM",tToInfologPrefixFilename,".GESUPE B WHERE A.NUMLIV=B.NUMLIV AND A.NUMSUP=B.NUMSUP AND A.REFLIV LIKE '",tREFLIVaConsiderar,"%' ORDER BY A.SEQSUP ASC,B.TYPSUP DESC")
										tQuery := build("SELECT A.numsup, B.typsup,A.PRPPIC, A.SEQSUP, A.CODPRO FROM FGE50FM",tToInfologPrefixFilename,".GESUPD A, FGE50FM",tToInfologPrefixFilename,".GESUPE B WHERE A.NUMLIV=B.NUMLIV AND A.NUMSUP=B.NUMSUP AND A.REFLIV LIKE '",tREFLIVaConsiderar,"%' ORDER BY A.PRPPIC ASC,A.numsup ,  A.SEQSUP ASC,B.TYPSUP DESC")
										log(tQuery,NL)


												if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
															 print("FATAL ", tfSqlErrorStr())
															 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
															exit(1)

												endif

												if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
													 print("FATAL ", tfSqlErrorStr())
													  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
															exit(1)

												endif


												nContadorResultadosQuery2_1 := 0



												while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
													nContadorResultadosQuery2_1++

													taSEQSUPQuery2_1[nContadorResultadosQuery2_1] := peel(taDb2Array["SEQSUP"]," ")
													taCODPROQuery2_1[nContadorResultadosQuery2_1] := peel(taDb2Array["CODPRO"]," ")
													taTYPSUPQuery2_1[nContadorResultadosQuery2_1] := peel(taDb2Array["TYPSUP"]," ")
													baDUPLICADOCODPROQuery2_1[nContadorResultadosQuery2_1] := FALSE
													remove(taDb2Array)

												endwhile



												if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
													print("FATAL", tfSqlErrorStr())
													 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
															exit(1)
												endif




										!colocar validaÃ§Ã£o de duplicados por codpro

										nTempContadorResultadosQuery2_1 := 1
										while nTempContadorResultadosQuery2_1 <= nContadorResultadosQuery2_1 do
											nTempContadorResultadoVAl2 := nTempContadorResultadosQuery2_1+1
											while nTempContadorResultadoVAl2 <= nContadorResultadosQuery2_1 do
												if taCODPROQuery2_1[nTempContadorResultadoVAl2] = taCODPROQuery2_1[nTempContadorResultadosQuery2_1] and taTYPSUPQuery2_1[nTempContadorResultadoVAl2] = taTYPSUPQuery2_1[nTempContadorResultadosQuery2_1] then
													baDUPLICADOCODPROQuery2_1[nTempContadorResultadoVAl2] := TRUE
												endif
												nTempContadorResultadoVAl2++
											endwhile
											nTempContadorResultadosQuery2_1++
										endwhile




										!depois a 2Âª query

										nContadorResultadosQuery2_2 := 0

										nTempContadorResultadosQuery2_1 := 1
										while nTempContadorResultadosQuery2_1 <= nContadorResultadosQuery2_1 do
											if baDUPLICADOCODPROQuery2_1[nTempContadorResultadosQuery2_1] = FALSE then
												if taTYPSUPQuery2_1[nTempContadorResultadosQuery2_1] = "2" then
															tQuery := build("SELECT SD.NUMSUP  "\
															",SE.TYPSUP   "\
															",SE.CIRPIC  "\
															",SD.CODPRO  "\
															",SUM(SD.UVCSRV) UVCSRV "\
															",SUM(SD.UVCLIV) UVCLIV "\
															",SD.PCBPRO  "\
															",INTEGER(CEILING(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
															",TRIM(SE.CODMOP) CODMOP  "\
															",TRIM(SD.DIPLIV) DIPLIV  "\
															",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
															",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
															",SUM(SD.UVCSRV) as SOMAUVCSRV  "\
															"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE  "\
															", FGE50FM",tToInfologPrefixFilename,".GESUPD SD  "\
															", FGE50FM",tToInfologPrefixFilename,".GEPRO PD  "\
															"WHERE SE.NUMSUP=SD.NUMSUP  "\
															"AND SE.CODACT=SD.CODACT  "\
															"AND SD.CODPRO=PD.CODPRO  "\
															"AND SD.CODACT=PD.CODACT  "\
															"AND SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'   "\
															"AND SE.TYPSUP<>3  "\
															"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
															"AND SD.UVCSRV<>0 "\
															"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"' "\
															"GROUP BY SD.NUMSUP  "\
															",SE.TYPSUP  "\
															",SE.CIRPIC  "\
															",SD.CODPRO  "\
															",SD.PCBPRO  "\
															",SE.CODMOP  "\
															",SD.DIPLIV  "\
															",SE.REFLIV  "\
															"ORDER BY SE.TYPSUP DESC  "\
															", SD.NUMSUP ASC")
															
															
															
															
															!primeiro typesup = 2
															
															tQuery := build("SELECT SD.NUMSUP  "\
																		"	,SE.TYPSUP   "\
																		"	,SE.CIRPIC  "\
																		"	,SD.CODPRO "\
																		"	,QR.NUMSUP SUP_MASSIF "\
																		"	,SD.CPTMAS "\
																		"	,SUM(SD.UVCSRV) UVCSRV "\
																		"	,SUM(SD.UVCLIV) UVCLIV "\
																		"	,SD.PCBPRO  "\
																		"	,INTEGER(CEILING(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																		"	,TRIM(SE.CODMOP) CODMOP  "\
																		"	,TRIM(SD.DIPLIV) DIPLIV  "\
																		"	,LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																		"	,SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																		"	,SUM(SD.UVCSRV) as SOMAUVCSRV "\
																		"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																		"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																		"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																		"	LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR ON SD.CPTMAS=QR.CPTMAS AND SD.CODACT=QR.CODACT AND SD.CODPRO=QR.CODPRO "\
																		"	WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																		"	AND SE.TYPSUP<>3  "\
																		"	AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																		"	AND SD.UVCSRV<>0 "\
																		"   AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'  "\
																		"   AND SE.TYPSUP=2  "\
																		"	GROUP BY SD.NUMSUP "\
																		"	, SE.CODMOP "\
																		"	,SD.CPTMAS "\
																		"	,QR.NUMSUP "\
																		"	,SE.TYPSUP  "\
																		"	,SE.CIRPIC  "\
																		"	,SD.CODPRO   "\
																		"	,SD.PCBPRO   "\
																		"	,SD.DIPLIV   "\
																		"	,SE.REFLIV  "\
																		"	ORDER BY SE.TYPSUP DESC   "\
																		"	, SD.NUMSUP ASC  "\
																		"	, SD.CODPRO,QR.NUMSUP ")
																		
																		
																		
																		
																		
																		
																		
																		tQuery := build("SELECT SD.NUMSUP  "\
																					"	,SE.TYPSUP   "\
																					"	,SE.CIRPIC  "\
																					"	,TRIM(SD.CODPRO) CODPRO "\
																					"	,QR1.NUMSUP SUP_MASSIF "\
																					"	,SD.CPTMAS "\
																					"	,SUM(SD.UVCSRV) UVCSRV "\
																					"	,SUM(SD.UVCLIV) UVCLIV "\
																					"	,QR2.TOT_CX_PROD_NF "\
																					"	,SD.PCBPRO  "\
																					"	,INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					"	,TRIM(SE.CODMOP) CODMOP  "\
																					"	,TRIM(SD.DIPLIV) DIPLIV  "\
																					"	,LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					"	,SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					"	,SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"	LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"	LEFT JOIN (SELECT NUMLIV, CODPRO, SUM(CEILING(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO) QR2 ON SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV "\
																					"	WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																					"	AND SE.TYPSUP<>3  "\
																					"	AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"	AND SD.UVCSRV<>0 "\
																					"   AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'  "\
																					"   AND SE.TYPSUP=2  "\
																					"	GROUP BY SD.NUMSUP "\
																					"	, SE.CODMOP "\
																					"	,SD.CPTMAS "\
																					"	,QR1.NUMSUP "\
																					"	,QR2.TOT_CX_PROD_NF "\
																					"	,SE.TYPSUP  "\
																					"	,SE.CIRPIC  "\
																					"	,SD.CODPRO  "\
																					"	,SD.PCBPRO  "\
																					"	,SD.DIPLIV  "\
																					"	,SE.REFLIV "\
																					"	ORDER BY SE.TYPSUP DESC "\
																					"	, SD.NUMSUP ASC"\
																					"	, SD.CODPRO ")
																		
																		
																		tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP   "\
																					",SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, CODPRO, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO) QR2 ON SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'  "\
																					"AND SE.TYPSUP=2  "\
																					"GROUP BY SD.NUMSUP "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY SE.TYPSUP DESC  "\
																					", SD.NUMSUP ASC "\
																					", SD.CODPRO ")
																		
																		
																		tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP   "\
																					",SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, CODPRO, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO) QR2 ON SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'   "\
																					"AND SE.TYPSUP=2   "\
																					"GROUP BY SD.NUMSUP "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY SE.TYPSUP DESC "\
																					", SD.NUMSUP ASC"\
																					", SD.CODPRO ")
																					
																					
																					tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP   "\
																					",SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, CODPRO, cptmas, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO, cptmas) QR2 ON SD.CPTMAS=QR2.CPTMAS AND SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV  "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'    "\
																					"AND SE.TYPSUP=2    "\
																					"GROUP BY SD.NUMSUP "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY SE.TYPSUP DESC  "\
																					", SD.NUMSUP ASC "\
																					", SD.CODPRO")
																					
																					
																					tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP   "\
																					", SD.PRPPIC "\
																					",SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 2) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, NUMSUP,CODPRO, cptmas, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO, cptmas, NUMSUP) QR2 ON SD.CPTMAS=QR2.CPTMAS AND SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV AND SD.NUMSUP=QR2.NUMSUP "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'   "\
																					"AND SE.TYPSUP=2    "\
																					"GROUP BY SD.NUMSUP , SD.PRPPIC "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY  SD.PRPPIC ASC, SE.TYPSUP DESC  "\
																					", SD.NUMSUP ASC "\
																					", SD.CODPRO")
																		
																		


															log(tQuery,NL)


																	if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
																				 print("FATAL ", tfSqlErrorStr())
																				 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																				exit(1)

																	endif

																	if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
																		 print("FATAL ", tfSqlErrorStr())
																		  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																				exit(1)

																	endif


												
												



																	while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
																		nContadorResultadosQuery2_2++
																		log("SOMAUVCSRV ",peel(taDb2Array["SOMAUVCSRV"]," "),NL)
																		log("PCBPRO ",peel(taDb2Array["PCBPRO"]," "),NL)
																		taTYPSUP[nContadorResultadosQuery2_2] := peel(taDb2Array["TYPSUP"]," ")
																		taSOMAUVCSRV[nContadorResultadosQuery2_2] := peel(taDb2Array["SOMAUVCSRV"]," ")
																		taPCBPRO[nContadorResultadosQuery2_2] := peel(taDb2Array["PCBPRO"]," ")
																		taVOLUMESAux[nContadorResultadosQuery2_2] := peel(taDb2Array["VOLUMES"]," ")
																		taVOLUMESAuxOriginal[nContadorResultadosQuery2_2] := peel(taDb2Array["VOLUMES"]," ")
																		!taVOLUMESAux[nContadorResultadosQuery2_2] := peel(taDb2Array["UVCLIV"]," ")
																		taMSGLIGOriginal[nContadorResultadosQuery2_2] := peel(taDb2Array["MSGLIG"]," ")
																		split(taMSGLIGOriginal[nContadorResultadosQuery2_2],taDIPLIVCalculadoSplitado,"/")
																		taDIPLIVCalculado[nContadorResultadosQuery2_2] := peel(taDb2Array["DIPLIV"]," ")
																		taPRPPIC[nContadorResultadosQuery2_2] := peel(taDb2Array["PRPPIC"]," ")
																		taNUMSUP[nContadorResultadosQuery2_2] := peel(taDb2Array["NUMSUP"]," ")
																		taCODPRO[nContadorResultadosQuery2_2] := peel(taDb2Array["CODPRO"]," ")
																		taCPTMAS[nContadorResultadosQuery2_2] := peel(taDb2Array["CPTMAS"]," ")
																		taNF[nContadorResultadosQuery2_2] := peel(taDb2Array["NF"]," ")
																		if substr(peel(taDb2Array["SNF"]," "),2,1) = "1" or substr(peel(taDb2Array["SNF"]," "),2,1) = "2" or substr(peel(taDb2Array["SNF"]," "),2,1) = "3" or substr(peel(taDb2Array["SNF"]," "),2,1) = "4" or substr(peel(taDb2Array["SNF"]," "),2,1) = "5" or substr(peel(taDb2Array["SNF"]," "),2,1) = "6" or substr(peel(taDb2Array["SNF"]," "),2,1) = "7" or substr(peel(taDb2Array["SNF"]," "),2,1) = "8" or substr(peel(taDb2Array["SNF"]," "),2,1) = "9" or substr(peel(taDb2Array["SNF"]," "),2,1) = "0" then
																			taSNF[nContadorResultadosQuery2_2] := peel(taDb2Array["SNF"]," ")
																		else
																			taSNF[nContadorResultadosQuery2_2] := substr(peel(taDb2Array["SNF"]," "),1,1)
																		endif
																		taSUP_MASSIF[nContadorResultadosQuery2_2] := peel(taDb2Array["SUP_MASSIF"]," ")
																		taTOT_CX_PROD_NF[nContadorResultadosQuery2_2] := peel(taDb2Array["TOT_CX_PROD_NF"]," ")
																		!chave = produto, suporte , suporte massificado para consolidar
																		baProdutoSupDuplicado[nContadorResultadosQuery2_2] := FALSE
																		baULTProdutoSupDuplicado[nContadorResultadosQuery2_2] := TRUE
																		naQtdJaUtilizadaProd[taCODPRO[nContadorResultadosQuery2_2]] := 0
																		taCODMOP[nContadorResultadosQuery2_2] := peel(taDb2Array["CODMOP"]," ")
																		baJaFezTOT_CX_PROD_NF[nContadorResultadosQuery2_2] := FALSE
																		baConsolidou[nContadorResultadosQuery2_2] := FALSE
																		baJaAtualizou[nContadorResultadosQuery2_2] := FALSE
																		baPrecisaRecalcular[nContadorResultadosQuery2_2] := FALSE
																		!if nContadorResultadosQuery2_2 = 1 then
																		!	taVOLUMES[nContadorResultadosQuery2_2] := "1"
																		!else
																		!	taVOLUMES[nContadorResultadosQuery2_2] := build(number(taVOLUMES[nContadorResultadosQuery2_2-1])+number(taVOLUMESAux[nContadorResultadosQuery2_2-1]))
																		!endif
																		
																		!fazer a regra para sup_massif se for iguual a anterior nao aumentar o taVOLUMES e aumentar o taVOLUMESAux
																		remove(taDb2Array)


																	endwhile



																	if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
																		print("FATAL", tfSqlErrorStr())
																		 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																				exit(1)
																	endif
																	
																	
												endif					
												if taTYPSUPQuery2_1[nTempContadorResultadosQuery2_1] = "1" then					
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	! segunda execucao
																	
																	!primeiro typesup = 1
															
															tQuery := build("SELECT SD.NUMSUP  "\
																		"	,SE.TYPSUP   "\
																		"	,SE.CIRPIC  "\
																		"	,SD.CODPRO "\
																		"	,QR.NUMSUP SUP_MASSIF "\
																		"	,SD.CPTMAS "\
																		"	,SUM(SD.UVCSRV) UVCSRV "\
																		"	,SUM(SD.UVCLIV) UVCLIV "\
																		"	,SD.PCBPRO  "\
																		"	,INTEGER(CEILING(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																		"	,TRIM(SE.CODMOP) CODMOP  "\
																		"	,TRIM(SD.DIPLIV) DIPLIV  "\
																		"	,LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																		"	,SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																		"	,SUM(SD.UVCSRV) as SOMAUVCSRV "\
																		"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																		"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																		"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																		"	LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR ON SD.CPTMAS=QR.CPTMAS AND SD.CODACT=QR.CODACT AND SD.CODPRO=QR.CODPRO "\
																		"	WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																		"	AND SE.TYPSUP<>3  "\
																		"	AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																		"	AND SD.UVCSRV<>0 "\
																		"   AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'  "\
																		"   AND SE.TYPSUP=1  "\
																		"	GROUP BY SD.NUMSUP "\
																		"	, SE.CODMOP "\
																		"	,SD.CPTMAS "\
																		"	,QR.NUMSUP "\
																		"	,SE.TYPSUP  "\
																		"	,SE.CIRPIC  "\
																		"	,SD.CODPRO   "\
																		"	,SD.PCBPRO   "\
																		"	,SD.DIPLIV   "\
																		"	,SE.REFLIV  "\
																		"	ORDER BY SE.TYPSUP DESC   "\
																		"	, SD.NUMSUP ASC  "\
																		"	, SD.CODPRO,QR.NUMSUP ")
																		
																		
																		
																		
																		tQuery := build("SELECT SD.NUMSUP  "\
																					"	,SE.TYPSUP   "\
																					"	,SE.CIRPIC  "\
																					"	,TRIM(SD.CODPRO) CODPRO "\
																					"	,QR1.NUMSUP SUP_MASSIF "\
																					"	,SD.CPTMAS "\
																					"	,SUM(SD.UVCSRV) UVCSRV "\
																					"	,SUM(SD.UVCLIV) UVCLIV "\
																					"	,QR2.TOT_CX_PROD_NF "\
																					"	,SD.PCBPRO  "\
																					"	,INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					"	,TRIM(SE.CODMOP) CODMOP  "\
																					"	,TRIM(SD.DIPLIV) DIPLIV  "\
																					"	,LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					"	,SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					"	,SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"	FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"	LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"	LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"	LEFT JOIN (SELECT NUMLIV, CODPRO, SUM(CEILING(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO) QR2 ON SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV "\
																					"	WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																					"	AND SE.TYPSUP<>3  "\
																					"	AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"	AND SD.UVCSRV<>0 "\
																					"   AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'  "\
																					"   AND SE.TYPSUP=1  "\
																					"	GROUP BY SD.NUMSUP "\
																					"	, SE.CODMOP "\
																					"	,SD.CPTMAS "\
																					"	,QR1.NUMSUP "\
																					"	,QR2.TOT_CX_PROD_NF "\
																					"	,SE.TYPSUP  "\
																					"	,SE.CIRPIC  "\
																					"	,SD.CODPRO  "\
																					"	,SD.PCBPRO  "\
																					"	,SD.DIPLIV  "\
																					"	,SE.REFLIV "\
																					"	ORDER BY SE.TYPSUP DESC "\
																					"	, SD.NUMSUP ASC"\
																					"	, SD.CODPRO ")
																					
																					
																					
																					
																					
																					
																		tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP   "\
																					",SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, CODPRO, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO) QR2 ON SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%' "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'  "\
																					"AND SE.TYPSUP=1  "\
																					"GROUP BY SD.NUMSUP "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY SE.TYPSUP DESC  "\
																					", SD.NUMSUP ASC "\
																					", SD.CODPRO ")
																					
																					
																					
																					
																					
																					
																					
																		tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP   "\
																					", SD.PRPPIC ,SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 1) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, CODPRO, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO) QR2 ON SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'   "\
																					"AND SE.TYPSUP=1   "\
																					"GROUP BY SD.NUMSUP , SD.PRPPIC "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY SE.TYPSUP DESC "\
																					", SD.NUMSUP ASC"\
																					", SD.CODPRO ")
																					
																					
																					
																					
																					
																		tQuery := build("SELECT SD.NUMSUP  "\
																					",SE.TYPSUP "\
																					",SE.CIRPIC  "\
																					",TRIM(SD.CODPRO) CODPRO "\
																					",QR1.NUMSUP SUP_MASSIF "\
																					",SD.CPTMAS "\
																					",SUM(SD.UVCSRV) UVCSRV "\
																					",SUM(SD.UVCLIV) UVCLIV "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SD.PCBPRO  "\
																					",INTEGER(FLOOR(SUM(SD.UVCSRV/SD.PCBPRO))) VOLUMES  "\
																					",TRIM(SE.CODMOP) CODMOP  "\
																					",TRIM(SD.DIPLIV) DIPLIV  "\
																					",LEFT(TRIM(SE.REFLIV), (LOCATE ('.', TRIM(SE.REFLIV))-1)) NF  "\
																					",SUBSTR(TRIM(SE.REFLIV), LOCATE ('.', TRIM(SE.REFLIV))+1, 2) SNF  "\
																					",SUM(SD.UVCSRV) as SOMAUVCSRV "\
																					"FROM FGE50FM",tToInfologPrefixFilename,".GESUPE SE "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GESUPD SD ON SE.NUMSUP=SD.NUMSUP AND SE.CODACT=SD.CODACT "\
																					"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEPRO PD ON SD.CODPRO=PD.CODPRO AND SD.CODACT=PD.CODACT  "\
																					"LEFT JOIN (select numsup, codpro, CODACT, numliv, indmas, cptmas  from FGE50FM",tToInfologPrefixFilename,".gesupd where cptmas in(select distinct cptmas from FGE50FM",tToInfologPrefixFilename,".gesupd ) AND INDMAS='3') QR1 ON SD.CPTMAS=QR1.CPTMAS AND SD.CODACT=QR1.CODACT AND SD.CODPRO=QR1.CODPRO "\
																					"LEFT JOIN (SELECT NUMLIV, NUMSUP,CODPRO, cptmas, ceiling(SUM(UVCLIV/PCBPRO)) TOT_CX_PROD_NF FROM FGE50FM",tToInfologPrefixFilename,".GESUPD GROUP BY NUMLIV, CODPRO, cptmas, NUMSUP) QR2 ON SD.CPTMAS=QR2.CPTMAS AND SD.CODPRO=QR2.CODPRO AND SD.NUMLIV=QR2.NUMLIV AND SD.NUMSUP=QR2.NUMSUP "\
																					"WHERE SD.REFLIV LIKE '",tREFLIVaConsiderar,"%'  "\
																					"AND SE.TYPSUP<>3  "\
																					"AND SE.CLILIV NOT IN ('MASSIFICATION', 'MASSIFICAÃÃO', 'MASSIFICACAO') "\
																					"AND SD.UVCSRV<>0 "\
																					"AND SD.CODPRO='",taCODPROQuery2_1[nTempContadorResultadosQuery2_1],"'   "\
																					"AND SE.TYPSUP=1   "\
																					"GROUP BY SD.NUMSUP "\
																					", SE.CODMOP "\
																					",SD.CPTMAS "\
																					",QR1.NUMSUP "\
																					",QR2.TOT_CX_PROD_NF "\
																					",SE.TYPSUP  "\
																					",SE.CIRPIC  "\
																					",SD.CODPRO  "\
																					",SD.PCBPRO  "\
																					",SD.DIPLIV  "\
																					",SE.REFLIV "\
																					"ORDER BY  SE.TYPSUP DESC  "\
																					", SD.NUMSUP ASC "\
																					", SD.CODPRO") 
																		


															log(tQuery,NL)


																	if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
																				 print("FATAL ", tfSqlErrorStr())
																				 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																				exit(1)

																	endif

																	if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
																		 print("FATAL ", tfSqlErrorStr())
																		  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																				exit(1)

																	endif






																	while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
																		nContadorResultadosQuery2_2++



																		log("SOMAUVCSRV ",peel(taDb2Array["SOMAUVCSRV"]," "),NL)
																		log("PCBPRO ",peel(taDb2Array["PCBPRO"]," "),NL)
																		taTYPSUP[nContadorResultadosQuery2_2] := peel(taDb2Array["TYPSUP"]," ")
																		taSOMAUVCSRV[nContadorResultadosQuery2_2] := peel(taDb2Array["SOMAUVCSRV"]," ")
																		taPCBPRO[nContadorResultadosQuery2_2] := peel(taDb2Array["PCBPRO"]," ")
																		taVOLUMESAux[nContadorResultadosQuery2_2] := peel(taDb2Array["VOLUMES"]," ")
																		taVOLUMESAuxOriginal[nContadorResultadosQuery2_2] := peel(taDb2Array["VOLUMES"]," ")
																		!taVOLUMESAux[nContadorResultadosQuery2_2] := peel(taDb2Array["UVCLIV"]," ")
																		taMSGLIGOriginal[nContadorResultadosQuery2_2] := peel(taDb2Array["MSGLIG"]," ")
																		split(taMSGLIGOriginal[nContadorResultadosQuery2_2],taDIPLIVCalculadoSplitado,"/")
																		taDIPLIVCalculado[nContadorResultadosQuery2_2] := peel(taDb2Array["DIPLIV"]," ")
																		taNUMSUP[nContadorResultadosQuery2_2] := peel(taDb2Array["NUMSUP"]," ")
																		taCODPRO[nContadorResultadosQuery2_2] := peel(taDb2Array["CODPRO"]," ")
																		taCPTMAS[nContadorResultadosQuery2_2] := peel(taDb2Array["CPTMAS"]," ")
																		taNF[nContadorResultadosQuery2_2] := peel(taDb2Array["NF"]," ")
																		if substr(peel(taDb2Array["SNF"]," "),2,1) = "1" or substr(peel(taDb2Array["SNF"]," "),2,1) = "2" or substr(peel(taDb2Array["SNF"]," "),2,1) = "3" or substr(peel(taDb2Array["SNF"]," "),2,1) = "4" or substr(peel(taDb2Array["SNF"]," "),2,1) = "5" or substr(peel(taDb2Array["SNF"]," "),2,1) = "6" or substr(peel(taDb2Array["SNF"]," "),2,1) = "7" or substr(peel(taDb2Array["SNF"]," "),2,1) = "8" or substr(peel(taDb2Array["SNF"]," "),2,1) = "9" or substr(peel(taDb2Array["SNF"]," "),2,1) = "0" then
																			taSNF[nContadorResultadosQuery2_2] := peel(taDb2Array["SNF"]," ")
																		else
																			taSNF[nContadorResultadosQuery2_2] := substr(peel(taDb2Array["SNF"]," "),1,1)
																		endif
																		taSUP_MASSIF[nContadorResultadosQuery2_2] := peel(taDb2Array["SUP_MASSIF"]," ")
																		taTOT_CX_PROD_NF[nContadorResultadosQuery2_2] := peel(taDb2Array["TOT_CX_PROD_NF"]," ")
																		!chave = produto, suporte , suporte massificado para consolidar
																		baProdutoSupDuplicado[nContadorResultadosQuery2_2] := FALSE
																		baULTProdutoSupDuplicado[nContadorResultadosQuery2_2] := TRUE
																		naQtdJaUtilizadaProd[taCODPRO[nContadorResultadosQuery2_2]] := 0
																		taCODMOP[nContadorResultadosQuery2_2] := peel(taDb2Array["CODMOP"]," ")
																		baJaFezTOT_CX_PROD_NF[nContadorResultadosQuery2_2] := FALSE
																		baConsolidou[nContadorResultadosQuery2_2] := FALSE
																		baJaAtualizou[nContadorResultadosQuery2_2] := FALSE
																		baPrecisaRecalcular[nContadorResultadosQuery2_2] := FALSE
																		
																		tQuery2 := build("SELECT  NUMSUP "\
																						"       ,CODPRO "\
																						"       ,PRPPIC "\
																						"FROM FGE50FM",tToInfologPrefixFilename,".gesupd "\
																						"WHERE codpro='",taCODPRO[nContadorResultadosQuery2_2],"' "\
																						"AND numsup='",taNUMSUP[nContadorResultadosQuery2_2],"'")
																		
																		log(tQuery2,NL)


																		if bfSqlSet( tDbBase2 ,"SELECTdb2"  , tQuery2) = FALSE then
																					print("FATAL ", tfSqlErrorStr())
																					bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																					exit(1)
																		endif

																		if bfSqlOpen( tDbBase2 , "SELECTdb2" ) = FALSE then
																			print("FATAL ", tfSqlErrorStr())
																			bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																					exit(1)
																		endif

																		if bfSqlFetchArray( tDbBase2 , "SELECTdb2" ,taDb2Array) = TRUE then
																			taPRPPIC[nContadorResultadosQuery2_2] := peel(taDb2Array["PRPPIC"]," ")
																			! remove(taDb2Array)
																		endif

																		if bfSqlFree( tDbBase2 , "SELECTdb2"  ) = FALSE then
																			print("FATAL", tfSqlErrorStr())
																			bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																			exit(1)
																		endif
																		
																		!if nContadorResultadosQuery2_2 = 1 then
																		!	taVOLUMES[nContadorResultadosQuery2_2] := "1"
																		!else
																		!	taVOLUMES[nContadorResultadosQuery2_2] := build(number(taVOLUMES[nContadorResultadosQuery2_2-1])+number(taVOLUMESAux[nContadorResultadosQuery2_2-1]))
																		!endif
																		
																		!fazer a regra para sup_massif se for iguual a anterior nao aumentar o taVOLUMES e aumentar o taVOLUMESAux
																		remove(taDb2Array)


																	endwhile



																	if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
																		print("FATAL", tfSqlErrorStr())
																		 bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
																				exit(1)
																	endif
																	
												endif					
																	
											endif
											nTempContadorResultadosQuery2_1++
										endwhile
										
										
										
							!consolidar
							
							
							
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
							
								taVOLUMESAux[nTempContadorResultQuery2_2] := taTOT_CX_PROD_NF[(nTempContadorResultQuery2_2)]
								

																		
								if nTempContadorResultQuery2_2 = 1 then
										taVOLUMES[nTempContadorResultQuery2_2] := "1"
								else
										taVOLUMES[nTempContadorResultQuery2_2] := build(number(taVOLUMES[(nTempContadorResultQuery2_2-1)]) + number(taVOLUMESAux[(nTempContadorResultQuery2_2-1)]))
									
								endif
									
								log("----------------------------",NL)	
								log("taCODPRO[nTempContadorResultQuery2_2] ",taCODPRO[nTempContadorResultQuery2_2],NL)
								log("taVOLUMES[nTempContadorResultQuery2_2] ",taVOLUMES[nTempContadorResultQuery2_2],NL)
								log("taVOLUMESAux[nTempContadorResultQuery2_2] ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
								
								nTempContadorResultQuery2_2++
							endwhile
							
							
							
							
							/*
							
							Ã© possivel criar uma logica na volumetria que se a quantidade de volumes TOT_cx for maior em 2 nÃºmeros que a coluna volumes 
							(Ex: soma TOT_cx do mesmo produto no mesmo suporte = 10 e soma volumes do mesmo produto no mesmo suporte = 8) 
							entÃ£o ele subtrai 1 do soma TOT_Cx. Ficando com 9 ao inves de 10


							*/
							
							
							
							
							
							
							!consolidar sup_massif se for iguual a anterior nao aumentar o taVOLUMES e aumentar o taVOLUMESAux
							!chave = produto, suporte , suporte massificado para consolidar
							
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
								if baConsolidou[nTempContadorResultQuery2_2] = FALSE then
									nContadorDif := 0
									nTempContadorResultQuery2_2_3 := nTempContadorResultQuery2_2+1
									while nTempContadorResultQuery2_2_3 <= nContadorResultadosQuery2_2 do
										if taCODPRO[nTempContadorResultQuery2_2_3] = taCODPRO[nTempContadorResultQuery2_2] and taNUMSUP[nTempContadorResultQuery2_2_3] = taNUMSUP[nTempContadorResultQuery2_2] and taSUP_MASSIF[nTempContadorResultQuery2_2_3] = taSUP_MASSIF[nTempContadorResultQuery2_2] then
											if baConsolidou[nTempContadorResultQuery2_2_3] = FALSE then
												baConsolidou[nTempContadorResultQuery2_2] := TRUE
												baConsolidou[nTempContadorResultQuery2_2_3] := TRUE
												baProdutoSupDuplicado[nTempContadorResultQuery2_2_3] := TRUE
												
												log("------consolidando----------",NL)	
												log("taCODPRO[nTempContadorResultQuery2_2] ",taCODPRO[nTempContadorResultQuery2_2],NL)
												log("taVOLUMESAuxOriginal[nTempContadorResultQuery2_2] antes ",taVOLUMESAuxOriginal[nTempContadorResultQuery2_2],NL)
												log("taVOLUMESAux[nTempContadorResultQuery2_2] antes ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
												taVOLUMESAux[nTempContadorResultQuery2_2] := build(number(taVOLUMESAux[nTempContadorResultQuery2_2])+number(taVOLUMESAux[nTempContadorResultQuery2_2_3]))
												taVOLUMESAuxOriginal[nTempContadorResultQuery2_2] := build(number(taVOLUMESAuxOriginal[nTempContadorResultQuery2_2])+number(taVOLUMESAuxOriginal[nTempContadorResultQuery2_2_3]))
												
												log("taVOLUMESAuxOriginal[nTempContadorResultQuery2_2] depoois ",taVOLUMESAuxOriginal[nTempContadorResultQuery2_2],NL)
												log("taVOLUMESAux[nTempContadorResultQuery2_2] depois ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
												
												!
												baULTProdutoSupDuplicado[nTempContadorResultQuery2_2_3] := TRUE
												baULTProdutoSupDuplicado[nTempContadorResultQuery2_2] := FALSE
												!taVOLUMESAux[nTempContadorResultQuery2_2_3] := taVOLUMESAux[nTempContadorResultQuery2_2]
												!taVOLUMESAuxOriginal[nTempContadorResultQuery2_2_3] := taVOLUMESAuxOriginal[nTempContadorResultQuery2_2]
												!taVOLUMES[nTempContadorResultQuery2_2_3] := taVOLUMES[nTempContadorResultQuery2_2]
											endif
										endif
										nTempContadorResultQuery2_2_3++
									endwhile
								
								endif
								
								
								nTempContadorResultQuery2_2++
							endwhile
							
							
							
							
							!replica para os duplicados o valor do primeiro
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
								nTempContadorResultQuery2_2_3 := nTempContadorResultQuery2_2+1
								while nTempContadorResultQuery2_2_3 <= nContadorResultadosQuery2_2 do
									if taCODPRO[nTempContadorResultQuery2_2_3] = taCODPRO[nTempContadorResultQuery2_2] and taNUMSUP[nTempContadorResultQuery2_2_3] = taNUMSUP[nTempContadorResultQuery2_2] and taSUP_MASSIF[nTempContadorResultQuery2_2_3] = taSUP_MASSIF[nTempContadorResultQuery2_2] then
										baPrecisaRecalcular[nTempContadorResultQuery2_2_3] := TRUE
										taVOLUMESAux[nTempContadorResultQuery2_2_3] := taVOLUMESAux[nTempContadorResultQuery2_2]
										taVOLUMESAuxOriginal[nTempContadorResultQuery2_2_3] := taVOLUMESAuxOriginal[nTempContadorResultQuery2_2]
										taVOLUMES[nTempContadorResultQuery2_2_3] := taVOLUMES[nTempContadorResultQuery2_2]
									endif
									nTempContadorResultQuery2_2_3++
									endwhile
								
								nTempContadorResultQuery2_2++
							endwhile
							
							
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
								nContadorDif := number(taVOLUMESAux[nTempContadorResultQuery2_2]) - number(taVOLUMESAuxOriginal[nTempContadorResultQuery2_2])
								log("nContadorDif ",nContadorDif,NL)
								log("number(taVOLUMESAux[nTempContadorResultQuery2_2]) ",number(taVOLUMESAux[nTempContadorResultQuery2_2]),NL)
								log("number(taVOLUMESAuxOriginal[nTempContadorResultQuery2_2]) ",number(taVOLUMESAuxOriginal[nTempContadorResultQuery2_2]),NL)
								if nContadorDif >= 2 and baConsolidou[nTempContadorResultQuery2_2] = TRUE then
									!faz um ciclo para ver se precisa de corrigir arredondamento o somatorio
									/*
							
									Ã© possivel criar uma logica na volumetria que se a quantidade de volumes TOT_cx for maior em 2 nÃºmeros que a coluna volumes 
									(Ex: soma TOT_cx do mesmo produto no mesmo suporte = 10 e soma volumes do mesmo produto no mesmo suporte = 8) 
									entÃ£o ele subtrai 1 do soma TOT_Cx. Ficando com 9 ao inves de 10


									*/
									log("alterando em opcao 1 para o CODPRO ",taCODPRO[nTempContadorResultQuery2_2]," taVOLUMESAux[nTempContadorResultQuery2_2] ",taVOLUMESAux[nTempContadorResultQuery2_2]," para ",build(number(taVOLUMESAux[nTempContadorResultQuery2_2])-1),NL)
									
									taVOLUMESAux[nTempContadorResultQuery2_2] := build(number(taVOLUMESAux[nTempContadorResultQuery2_2])-1)
									
									
									
								
								endif
								
							
								nTempContadorResultQuery2_2++
							endwhile
							
							
							
							!recalcula os valores de volumes
							
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
							
								
								

																		
								if nTempContadorResultQuery2_2 = 1 then
										taVOLUMES[nTempContadorResultQuery2_2] := "1"
								else
									if baPrecisaRecalcular[nTempContadorResultQuery2_2] = FALSE then
										taVOLUMES[nTempContadorResultQuery2_2] := build(number(taVOLUMES[(nTempContadorResultQuery2_2-1)]) + number(taVOLUMESAux[(nTempContadorResultQuery2_2-1)]))
									else
										taVOLUMES[nTempContadorResultQuery2_2] := build(number(taVOLUMES[(nTempContadorResultQuery2_2-1)]))
									endif
									
								endif
									
								log("---------recalculado---------",NL)	
								log("taCODPRO[nTempContadorResultQuery2_2] ",taCODPRO[nTempContadorResultQuery2_2],NL)
								log("taVOLUMES[nTempContadorResultQuery2_2] ",taVOLUMES[nTempContadorResultQuery2_2],NL)
								log("taVOLUMESAux[nTempContadorResultQuery2_2] ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
								
								nTempContadorResultQuery2_2++
							endwhile
							
							
							/*
							!so para saber qual o ultimo produto
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
								nTempContadorResultQuery2_2_3 := nTempContadorResultQuery2_2+1
								while nTempContadorResultQuery2_2_3 <= nContadorResultadosQuery2_2 do
									if taCODPRO[nTempContadorResultQuery2_2_3] = taCODPRO[nTempContadorResultQuery2_2]  then
										
										baULTProdutoSupDuplicado[nTempContadorResultQuery2_2_3] := TRUE
										baULTProdutoSupDuplicado[nTempContadorResultQuery2_2] := FALSE
									endif
									nTempContadorResultQuery2_2_3++
								endwhile
								nTempContadorResultQuery2_2++
							endwhile
							*/
							
							
							
							
							/*
							!para produtos que o SUP_MASSIF Ã© distintos
							
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
								nTempContadorResultQuery2_2_3 := nTempContadorResultQuery2_2+1
								while nTempContadorResultQuery2_2_3 <= nContadorResultadosQuery2_2 do
									if taCODPRO[nTempContadorResultQuery2_2_3] = taCODPRO[nTempContadorResultQuery2_2] and taNUMSUP[nTempContadorResultQuery2_2_3] = taNUMSUP[nTempContadorResultQuery2_2] and taSUP_MASSIF[nTempContadorResultQuery2_2_3] <> taSUP_MASSIF[nTempContadorResultQuery2_2] and baJaFezTOT_CX_PROD_NF[nTempContadorResultQuery2_2_3] = FALSE then
									!if taCODPRO[nTempContadorResultQuery2_2_3] = taCODPRO[nTempContadorResultQuery2_2] and  baJaFezTOT_CX_PROD_NF[nTempContadorResultQuery2_2_3] = FALSE and baProdutoSupDuplicado[nTempContadorResultQuery2_2_3] = FALSE and and baProdutoSupDuplicado[nTempContadorResultQuery2_2] = FALSE then
										baJaFezTOT_CX_PROD_NF[nTempContadorResultQuery2_2_3] := TRUE
										taTOT_CX_PROD_NF[nTempContadorResultQuery2_2] := taVOLUMESAux[nTempContadorResultQuery2_2]
										taTOT_CX_PROD_NF[nTempContadorResultQuery2_2_3] := build(number(taVOLUMESAux[nTempContadorResultQuery2_2_3]) + number(taTOT_CX_PROD_NF[nTempContadorResultQuery2_2]))
									endif
									nTempContadorResultQuery2_2_3++
								endwhile
								nTempContadorResultQuery2_2++
							endwhile
							*/
							
							
							nTempContadorResultQuery2_2 := 1
							while nTempContadorResultQuery2_2 <= nContadorResultadosQuery2_2 do
								/*
								if baProdutoSupDuplicado[nTempContadorResultQuery2_2] = FALSE then
								
								
									
									if nTempContadorResultQuery2_2 = 1 then
										if baULTProdutoSupDuplicado[nTempContadorResultQuery2_2] = FALSE then
											taVOLUMES[nTempContadorResultQuery2_2] := "1"
											taVOLUMESAux[nTempContadorResultQuery2_2] :=  build(number(taTOT_CX_PROD_NF[nTempContadorResultQuery2_2]) - naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]])
											log("nTempContadorResultQuery2_2 = 1",NL)
											log("ultimo produto duplicado ",taCODPRO[nTempContadorResultQuery2_2]," com NUMSUP ",taNUMSUP[nTempContadorResultQuery2_2]," e taSUP_MASSIF ",taSUP_MASSIF[nTempContadorResultQuery2_2],NL)
											log("taTOT_CX_PROD_NF[nTempContadorResultQuery2_2] ",taTOT_CX_PROD_NF[nTempContadorResultQuery2_2],NL)
											log("naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] ",naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]],NL)
											
											log("----------------------------------------------------",NL)
											
											naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] := naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] + number(taVOLUMESAux[nTempContadorResultQuery2_2])
											
											log("opcao 1",NL)
											log("taVOLUMES ",taVOLUMES[nTempContadorResultQuery2_2],NL)
											log("taVOLUMESAux ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
										else
											
											log("taTOT_CX_PROD_NF[nTempContadorResultQuery2_2] ",taTOT_CX_PROD_NF[nTempContadorResultQuery2_2],NL)
											log("naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] ",naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]],NL)
											log("----------------------------------------------------",NL)
											taVOLUMES[nTempContadorResultQuery2_2] := "1"
											taVOLUMESAux[nTempContadorResultQuery2_2] := build(number(taTOT_CX_PROD_NF[nTempContadorResultQuery2_2]) - naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]])
											naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] := naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] + number(taVOLUMESAux[nTempContadorResultQuery2_2])
											log("opcao 2",NL)
											log("taVOLUMES ",taVOLUMES[nTempContadorResultQuery2_2],NL)
											log("taVOLUMESAux ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
										endif
									else
										if baULTProdutoSupDuplicado[nTempContadorResultQuery2_2] = FALSE then
											taVOLUMES[nTempContadorResultQuery2_2] := build(number(taVOLUMES[nTempContadorResultQuery2_2-1])+number(taVOLUMESAux[nTempContadorResultQuery2_2-1]))
											taVOLUMESAux[nTempContadorResultQuery2_2] := build(number(taTOT_CX_PROD_NF[nTempContadorResultQuery2_2]) - naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]])
											naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] := naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] + number(taVOLUMESAux[nTempContadorResultQuery2_2])
											log("opcao 3",NL)
											log("taVOLUMES ",taVOLUMES[nTempContadorResultQuery2_2],NL)
											log("taVOLUMESAux ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
										
										else
											log("ultimo produto duplicado ",taCODPRO[nTempContadorResultQuery2_2]," com NUMSUP ",taNUMSUP[nTempContadorResultQuery2_2]," e taSUP_MASSIF ",taSUP_MASSIF[nTempContadorResultQuery2_2],NL)
											log("taTOT_CX_PROD_NF[nTempContadorResultQuery2_2] ",taTOT_CX_PROD_NF[nTempContadorResultQuery2_2],NL)
											log("naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]] ",naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]],NL)
											log("----------------------------------------------------",NL)
											taVOLUMES[nTempContadorResultQuery2_2] := build(number(taVOLUMES[nTempContadorResultQuery2_2-1])+number(taVOLUMESAux[nTempContadorResultQuery2_2-1]))
											taVOLUMESAux[nTempContadorResultQuery2_2] := build(number(taTOT_CX_PROD_NF[nTempContadorResultQuery2_2]) - naQtdJaUtilizadaProd[taCODPRO[nTempContadorResultQuery2_2]])
											log("opcao 4",NL)
											log("taVOLUMES ",taVOLUMES[nTempContadorResultQuery2_2],NL)
											log("taVOLUMESAux ",taVOLUMESAux[nTempContadorResultQuery2_2],NL)
											
										endif
										
									endif
									
									
									
									
								else
									!se for duplicado fica igual ao anterior
									taVOLUMES[nTempContadorResultQuery2_2] := taVOLUMES[(nTempContadorResultQuery2_2-1)]
									taVOLUMESAux[nTempContadorResultQuery2_2] := taVOLUMESAux[(nTempContadorResultQuery2_2-1)]
								endif
								*/	
								
								
								
								
								
								
								
								
								
									
									
								!fazer update
								/*

								UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD
								SET MSGLIG='VOLUME_INICIAL / VOLUMES' (Conta Tradex) /DIPLIV /NF/SNF
								WHERE NUMSUP='Select_Volumes.NUMSUP'
								AND CODPRO='Select_Volumes.CODPRO'
								*/


								/*
								divido o volumesaux / pcbpro e arrendonda para cima
								taVOLUMESAux[nTempContadorResultQuery2_2] := build(number(taVOLUMESAux[nTempContadorResultQuery2_2]) / number(taPCBPRO[nTempContadorResultQuery2_2]))
								
								
								tCont := build(number(taVOLUMESAux[nTempContadorResultQuery2_2])*1)	
								nPosicaoPonto := 0
								   nPosicaoPonto := index(tCont,".")
								   if (nPosicaoPonto) > 0 then
									  
									  tCont := build(number(substr(tCont,1,nPosicaoPonto-1))+1)
									else
									  tCont := build(number(tCont))
									 
								   endif
								   
								   taVOLUMESAux[nTempContadorResultQuery2_2] := tCont
						
								*/
								
								
								
								if taCODMOP[nTempContadorResultQuery2_2] = "ECO"  then
									taVOLUMES[nTempContadorResultQuery2_2] := "1"
								endif
								
								
								
								/*
								if taCODMOP[nTempContadorResultQuery2_2] = "ECO"  and nTempContadorResultQuery2_2 >= 2 and taNUMSUP[nContadorResultadosQuery2_2] <> taNUMSUP[(nContadorResultadosQuery2_2-1)] then
									! segue a regra de incrementar
								else
									if taCODMOP[nTempContadorResultQuery2_2] = "ECO" then
										if nTempContadorResultQuery2_2 = 1 then
											taVOLUMES[nTempContadorResultQuery2_2] := "1"
										else
											taVOLUMES[nTempContadorResultQuery2_2] := taVOLUMES[(nTempContadorResultQuery2_2-1)]
										endif
									endif
								endif
								
								*/
								
								/*
								if taCODMOP[nTempContadorResultQuery2_2] = "ECO"  then
											taVOLUMESAux[nTempContadorResultQuery2_2] := "1"
								endif
								*/
								
								if number(taVOLUMESAux[nTempContadorResultQuery2_2]) = 0 then
									taVOLUMESAux[nTempContadorResultQuery2_2] := "1"
								endif
								
								taQueryUpdade[nTempContadorResultQuery2_2] := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GESUPD "\
									"SET MSGLIG='",build(number(taVOLUMES[nTempContadorResultQuery2_2]):R05),"/",build(number(taVOLUMESAux[nTempContadorResultQuery2_2]):R05),"/",build(number(taDIPLIVCalculado[nTempContadorResultQuery2_2]):R05),"/",build(number(taNF[nTempContadorResultQuery2_2]):R06),"/",build(number(taSNF[nTempContadorResultQuery2_2]):R03),"'  "\
									"WHERE NUMSUP='",taNUMSUP[nTempContadorResultQuery2_2],"' "\
									"AND CODPRO='",taCODPRO[nTempContadorResultQuery2_2],"'  AND CPTMAS='",taCPTMAS[nTempContadorResultQuery2_2],"'  WITH NONE")


								log(taQueryUpdade[nTempContadorResultQuery2_2],NL)


								!colocar aqui o update


										if not bfSqlSet(tDbBase2, "Updatedb2", taQueryUpdade[nTempContadorResultQuery2_2]) then
										  log(tfSqlErrorStr(), NL)
										  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("1 - Erro na execucao da query ",taQueryUpdade[nTempContadorResultQuery2_2]," do banco de dados: ",tfSqlErrorStr()))
										  exit(27)
									   endif
									   if not bfSqlExec(tDbBase2, "Updatedb2") then
										  log(tfSqlErrorStr(), NL)
										  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("2 - Erro na execucao da query ",taQueryUpdade[nTempContadorResultQuery2_2]," do banco de dados: ",tfSqlErrorStr()))
										  exit(28)
									   endif
									   if not bfSqlCommit(tDbBase2, "Updatedb2") then
										  log(tfSqlErrorStr(), NL)
										  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("3 - Erro na execucao da query ",taQueryUpdade[nTempContadorResultQuery2_2]," do banco de dados: ",tfSqlErrorStr()))
										  exit(29)
									   endif
									   if not bfSqlFree(tDbBase2, "Updatedb2") then
										  log(tfSqlErrorStr(), NL)
										  bfMajtraceUPDATE("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("4 - Erro na execucao da query ",taQueryUpdade[nTempContadorResultQuery2_2]," do banco de dados: ",tfSqlErrorStr()))
										  exit(30)
									   endif	
									
									
									
									
								
								
								
								
								nTempContadorResultQuery2_2++
							endwhile
							
							
							
							
							
							
							
							
							
							
										

							if nContadorResultadosQuery2_2 > 0 and bFazupdade2 = TRUE then
								bfMajtraceUPDATE("Recebida","0",build(tPlacaVeiculo,"-",tRomaneio),tDataDocumento,tFileInput,tFileOut,"Produtos","")
							endif

						endif


































			endif



	endif


endline


line("99.00")


endline

!===========================================================

! Default statements section
default

enddefault

!===========================================================

! End statements section

end

bfSqlClose(tDbBase)
bfSqlClose(tDbBase2)
	exit(0)
endend



!===========================================================



!===========================================================


function bfMajtraceSerie(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento


		TRACE.PERFIL := "HARMAN"

   TRACE.SENTIDO := "O"
   TRACE.MENSAGEM := "M97 - CONF SERIE"
   TRACE.NUMDOC := tREFLIV
   TRACE.DATDOC := time("now","%Y-%m-%d")
   TRACE.MESSAGEID := build(nMessageID:R06)

    TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOut
   if tStatus = "Recebida" then
   print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail


  print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
  print("Traduzida com Sucesso",NL) >> TRACE.Detail

  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail


        endif
  endif
close(TRACE.Detail)
close(SYSLOG.a)


if nMainIndex = 0 then
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)


	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif
flush(TRACE)



close(tFileOutTemp)
	copy(tFileOutTemp,TRACE.Out)
	close(tFileOutTemp)
	close(TRACE.Out)


system("sleep 1")

endfunction


!===========================================================


!===========================================================


!===========================================================


!===========================================================



function bfMajtraceUPDATE(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento



   TRACE.PERFIL := "HARMAN"
   TRACE.SENTIDO := "O"
   TRACE.MENSAGEM := "M97 - UPDATE"
   TRACE.NUMDOC := tREFLIVaConsiderar
   TRACE.DATDOC := time("now","%Y-%m-%d")
   TRACE.MESSAGEID := build(nMessageID:R06)
TRACE.LIBEXC := tNUMVAG
    TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOut
   if tStatus = "Recebida" then
   print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail


  print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
  print("Traduzida com Sucesso",NL) >> TRACE.Detail

  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail


        endif
  endif
close(TRACE.Detail)
close(SYSLOG.a)


if nMainIndex = 0 then
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)


	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif
flush(TRACE)



	nTmpContadorResultadosQuery := 1
	while nTmpContadorResultadosQuery <= nContadorResultadosQuery do
		print(taQueryUpdade[nTmpContadorResultadosQuery],NL) >> TRACE.Out
		nTmpContadorResultadosQuery++
	endwhile
	close(TRACE.Out)





endfunction



!===========================================================


!===========================================================


!===========================================================


!===========================================================



function bfMajtracePED(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento

   TRACE.PERFIL := "HARMAN"
   TRACE.SENTIDO := "O"
   if length(taPedido[2]) > 0 then
   		TRACE.MENSAGEM := build("CONFIRMACAO DE PEDIDO - TOTVS RM")
   else
   		TRACE.MENSAGEM := "CONFIRMACAO DE PEDIDO - TOTVS RM"
   endif
   TRACE.LIBEXC := tNUMVAG
		TRACE.NUMDOC := build(tVAL_REFLIVQuery2,".",tVAL_SERIEQuery2)


   !if number(tData) > 0 then
	TRACE.DATDOC := tfConvertDate(substr(tDATA_M97Query2,1,10), "DD-MM-YYYY" , "YYYY-MM-DD")
!   endif
   TRACE.MESSAGEID := build(nMessageID:R010)

    TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOutPED
   if tStatus = "Recebida" then
   print(build("Ficheiro de Saida: "),tFileOutPED,NL,NL) >> TRACE.Detail


  print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
  print("Traduzida com Sucesso",NL) >> TRACE.Detail

  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail
        endif
  endif
close(TRACE.Detail)
close(SYSLOG.a)


if nMainIndex = 0 then
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)


	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif



close(tFileOutTempPED)
copy(tFileOutTempPED,TRACE.Out)
close(tFileOutTempPED)
close(TRACE.Out)


flush(TRACE)

endfunction



!===========================================================
!===========================================================


!===========================================================



!===========================================================


function bfMajtraceM62(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento


		TRACE.PERFIL := "HARMAN"

   TRACE.SENTIDO := "O"
   TRACE.MENSAGEM := build("M97 - M62 - ",tNUMVAG)
   !TRACE.NUMDOC := tREFLIVaConsiderar
   TRACE.DATDOC := time("now","%Y-%m-%d")
   TRACE.MESSAGEID := build(nMessageID:R06)

    TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOutM62
   if tStatus = "Recebida" then
   print(build("Ficheiro de Saida: "),tFileOutM62,NL,NL) >> TRACE.Detail


  print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
  print("Traduzida com Sucesso",NL) >> TRACE.Detail

  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail


        endif
  endif
close(TRACE.Detail)
close(SYSLOG.a)


if nMainIndex = 0 then
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)


	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif
flush(TRACE)



close(tFileOutTempM62)
	copy(tFileOutTempM62,TRACE.Out)
	close(tFileOutTempM62)
	close(TRACE.Out)




endfunction


!===========================================================


!===========================================================

!===========================================================


!===========================================================



function bfMajtraceRubrica9740(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento

   TRACE.PERFIL := "HARMAN"
   TRACE.SENTIDO := "I"
   TRACE.MENSAGEM := "M97.40 - RUBRICA"
   TRACE.NUMDOC := tNUMREC_9740
   TRACE.DATDOC := time("now","%Y-%m-%d")
   TRACE.MESSAGEID := build(nMessageID:R010)   

    TRACE.REDE := pEDISEND.ORIGINAL.NAME

  TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOutCSV
 TRACE.LIBEXC := tLIBEXC

   if tStatus = "Recebida" then
    print(build("Ficheiro de Saida: "),tNameOutCSV,NL,NL) >> TRACE.Detail
    print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
    print("Traduzida com Sucesso",NL) >> TRACE.Detail
  
  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail
        endif
  endif
close(TRACE.Detail)



if nMainIndex = 0 then
close(SYSLOG.a)
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)

 
	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif






close(tFileOutCSV)
copy(tFileOutCSV,TRACE.OutCSV)
close(tFileOutCSV)
close(TRACE.OutCSV)


flush(TRACE)
endfunction
