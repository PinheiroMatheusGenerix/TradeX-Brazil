%@(#) $Id:  M50_HARMAN_CSV_IN.rte,v 1.2 2020/04/23 17:02:20 gmt Exp $
!===========================================================================================================
% File         : $RCSfile: M50_HARMAN_CSV_IN.rte $   $Revision: 1.2 $
!-----------------------------------------------------------------------------------------------------------
% Description   : Josely solicitou uma nova interface M50 CSV onde a cópia deve ser feita da Dana
!-----------------------------------------------------------------------------------------------------------
% Author        : GMT - GENERIX BR
!===========================================================================================================
! 2020/04/23 GMT 1.2 Creation
!===========================================================================================================
!
! M50_HARMAN_CSV_IN
!
!===========================================================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off

!===========================================================

! Input/output macros file
#define PROG_NAME "$RCSfile: $"
#define PROG_VER  "$Revision: $"
#define PROG_DATE "$Date: $"
#define TX_PROG_INFO "M50_HARMAN_CSV_IN"
#include "include/generix_func.inc"
#include "include/M50_HARMAN_CSV_IN.inc"
#include "include/GEEXM50.inc"
!===========================================================

! Initialization section

begin
	nPos := 1
	nRec := 1
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	nMessageID := cMessageID

	load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameHARMAN"]	

	tDbBase		:= "FMWMS"
	tDbUsername	:= taPARAM["WMSDBUSER"]
	tDbPassword	:= taPARAM["WMSDBPASS"]
	tDbUrl		:= taPARAM["WMSDBURL"]

	bfSqlInit()
	if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	tDbUsernameUPDATES	:= taPARAM["WMSDBUSERUPDATES"]
	tDbPasswordUPDATES	:= taPARAM["WMSDBPASSUPDATES"]
	tDbUrlUPDATES		:= taPARAM["WMSDBURLUPDATES"]

	if not bfSqlJdbc(tDbBase2, tDbUsernameUPDATES, tDbPasswordUPDATES, tDbUrlUPDATES) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase2)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	tFileOut := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
	tFileOutTemp := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
	tNameOut := build(tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")

	tFileOutUpdate := build(sHOME,"/ToInfolog/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
	tFileOutTempUpdate := build(sHOME,"/ToInfolog/Temp/",tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")
	tNameOutUpdate := build(tToInfologPrefixFilename,"50",build(nMessageID:R015),".DAT")

	nContadorLinhasEscritas  := 0
	nContadorHeader := 0
	nContadorItems := 0
	nMainIndex := 0
	nNumeroMonoRegisto := 0
	bHeader := TRUE
endbegin

!===========================================================

line(not "")
	S_Registo

	if length(S_Registo_TipoTrataramento) > 0 then 
		if bHeader = TRUE then
			bHeader := FALSE
		else
			nNumeroMonoRegisto++

			if S_Registo_TipoTrataramento = "0" then
				taTRTEXC[nNumeroMonoRegisto] := ""
			endif

			if S_Registo_TipoTrataramento = "1" then
				taTRTEXC[nNumeroMonoRegisto] := "7"
			endif

			taCODACT[nNumeroMonoRegisto] := S_Registo_Planta
			taCODTLIAntesQuery[nNumeroMonoRegisto] := S_Registo_TipoPedido
			taDIPLIV5001[nNumeroMonoRegisto] := S_Registo_Prioridade
			taCODCLIAntesQuery[nNumeroMonoRegisto] := S_Registo_CNPJDestinatario
			taNFPedido[nNumeroMonoRegisto] := S_Registo_Pedido
			taSerie[nNumeroMonoRegisto] := build(number(S_Registo_Serie))

			if length(S_Registo_Serie) = 0 or number(S_Registo_Serie) = 0 then
				taREFLIV[nNumeroMonoRegisto] := S_Registo_Pedido
			else
				taREFLIV[nNumeroMonoRegisto] := build(S_Registo_Pedido,".",number(S_Registo_Serie))
			endif
			
			if S_Registo_TipoTrataramento = "1" then
                ! QUERY taCODCLI[nNumeroMonoRegisto]
                    tQuery := build("SELECT CODCLI ", NL," "\
                                    "FROM FGE50FM",tToInfologPrefixFilename,".GELIVE ", NL," "\
                                    "WHERE REFLIV = '",S_Registo_Pedido,"'")   

                    log(tQuery, NL, NL)	

                    if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
                        taCODCLI[nNumeroMonoRegisto] := peel(taDb2Array["CODCLI"]," ")
                        remove(taDb2Array)
                    endwhile

                    if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
                        print("FATAL", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif
			else
				taCODCLI[nNumeroMonoRegisto] := taCODCLIAntesQuery[nNumeroMonoRegisto]
			endif
		
			if S_Registo_TipoTrataramento = "1" and length(taCODTLIAntesQuery[nNumeroMonoRegisto]) = 0 then
                ! QUERY taCODTLI[nNumeroMonoRegisto]
                    tQuery := build("SELECT CODTLI ", NL," "\
                                    "FROM FGE50FM",tToInfologPrefixFilename,".GELIVE ", NL," "\
                                    "WHERE REFLIV LIKE  '%",S_Registo_Pedido,"%'")   

                    log(tQuery, NL, NL)	
                
                    if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
                        taCODTLI[nNumeroMonoRegisto] := peel(taDb2Array["CODTLI"]," ")
                        remove(taDb2Array)
                    endwhile

                    if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
                        print("FATAL", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif
			else
				taCODTLI[nNumeroMonoRegisto] := taCODTLIAntesQuery[nNumeroMonoRegisto]
			endif
		
			taTOULIV[nNumeroMonoRegisto] := S_Registo_Agrupador1
			taCODRGT[nNumeroMonoRegisto] := S_Registo_Agrupador2
			taDATEXP[nNumeroMonoRegisto] := tfConvertDate(S_Registo_DataAgendament, "DD/MM/YYYY" , "YYYYMMDD")
			taHEUEXP[nNumeroMonoRegisto] := tfConvertDate(S_Registo_HoraAgendamento, "HH:MM" , "HHMM")
			taCODTRA[nNumeroMonoRegisto] := S_Registo_CodigoTransportadora
			taCRILIV[nNumeroMonoRegisto] := S_Registo_CriterioExtracao
			taCODPRO[nNumeroMonoRegisto] := S_Registo_CodigoProduto
			taUVCCDE[nNumeroMonoRegisto] := S_Registo_Quantidade
			taCODLOT[nNumeroMonoRegisto] := S_Registo_Lote
			taIMMFRG[nNumeroMonoRegisto] := S_Registo_Status
			taCODPAL[nNumeroMonoRegisto] := S_Registo_SSCC

			if nNumeroMonoRegisto >= 2 then
				taREFLIVAnterior[nNumeroMonoRegisto] := taREFLIV[nNumeroMonoRegisto-1]
			endif
			
			taReferenciaRefgisto[nNumeroMonoRegisto] := build(nNumeroMonoRegisto)
		endif
	else
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","O tipo de tratamento não foi preenchido!")
		exit(1)
	endif
endline

! Default statements section
default

enddefault

!===========================================================

! End statements section

end
	nContadorHeaderTmp := 1

	while nContadorHeaderTmp <= nNumeroMonoRegisto do
		if taTRTEXC[nContadorHeaderTmp] = "" then
			if nContadorLinhasEscritas = 0 then
				nContadorNLILIV := 0
				R_GEEX0000_CODEXC("00")
				R_GEEX0000_SEPEXC(".")
				R_GEEX0000_SCOEXC("00")
				R_GEEX0000_EMTEXC("FM") 
				R_GEEX0000_DATEXC(time("now" ,"%Y%m%d"))
				R_GEEX0000_HEUEXC(time("now" ,"%H%M%S"))
				R_GEEX0000_NUMEXC("0000000")
				R_GEEX0000_ACQEXC("0")
				R_GEEX0000_VEREXC("5.00") 
				R_GEEX0000_NOMDTQ("M50")
				R_GEEX0000_LIBEXC(build(nMessageID:R010))
				
				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++
			endif   

			if length(taREFLIVAnterior[nContadorHeaderTmp]) = 0 or taREFLIVAnterior[nContadorHeaderTmp] <> taREFLIV[nContadorHeaderTmp] then
				if nContadorHeaderTmp > 1 then
					nContadorNLILIV := 0
					R_GEEX5099_CODEXC("50")
					R_GEEX5099_SEPEXC(".")
					R_GEEX5099_SCOEXC("99")
					R_GEEX5099_TRTEXC(taTRTEXC[nContadorHeaderTmp-1])
					R_GEEX5099_CUMLIG(build(nContadorLinhasEncomenda))
					R_GEEX5099_CODACT(taCODACT[nContadorHeaderTmp-1])
					R_GEEX5099_CODCLI(taCODCLI[nContadorHeaderTmp-1])
					R_GEEX5099_REFLIV(taREFLIV[nContadorHeaderTmp-1])

					flush(0,0,NL) >> tFileOutTemp
					nContadorLinhasEscritas++
					
					bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")	
				endif
				
				R_GEEX5000_CODEXC("50")
				R_GEEX5000_SEPEXC(".")
				R_GEEX5000_SCOEXC("00")
				R_GEEX5000_TRTEXC(taTRTEXC[nContadorHeaderTmp])
				R_GEEX5000_CODACT(taCODACT[nContadorHeaderTmp])
				R_GEEX5000_CODTLI(taCODTLI[nContadorHeaderTmp])
				R_GEEX5000_CODCLI(taCODCLI[nContadorHeaderTmp])  
				R_GEEX5000_REFLIV(taREFLIV[nContadorHeaderTmp])
				R_GEEX5000_CODTRA(taCODTRA[nContadorHeaderTmp])
				R_GEEX5000_TOULIV(taTOULIV[nContadorHeaderTmp])
				R_GEEX5000_CODRGT(taCODRGT[nContadorHeaderTmp])
				R_GEEX5000_DTILIV(taDATEXP[nContadorHeaderTmp])
				R_GEEX5000_HEILIV(taHEUEXP[nContadorHeaderTmp])
				R_GEEX5000_MSGLIV1(taCODTRA[nContadorHeaderTmp])
			
                ! QUERY R_GEEX5000_MSGLIV2
                    tQuery := build("SELECT NOMTRA ", NL," "\
                                    "FROM FGE50FM",tToInfologPrefixFilename,".GETRA ", NL," "\
                                    "WHERE CODTRA='",taCODTRA[nContadorHeaderTmp],"'")   

                    log("------------------------------------------------------------", NL)
                    log(tQuery, NL)
                    log("------------------------------------------------------------", NL)

                    if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
                        print("FATAL ", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

                    while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
                        R_GEEX5000_MSGLIV2(peel(taDb2Array["NOMTRA"]," "))
                        remove(taDb2Array)
                    endwhile

                    if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
                        print("FATAL", tfSqlErrorStr())
                        bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
                        exit(1)
                    endif

				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++

				R_GEEX5001_CODEXC("50")
				R_GEEX5001_SEPEXC(".")
				R_GEEX5001_SCOEXC("01")
				R_GEEX5001_TRTEXC(taTRTEXC[nContadorHeaderTmp])
				R_GEEX5001_CODACT(taCODACT[nContadorHeaderTmp])
				R_GEEX5001_CODCLI(taCODCLI[nContadorHeaderTmp])  
				R_GEEX5001_DIPLIV(taDIPLIV5001[nContadorHeaderTmp]) 
				R_GEEX5001_REFLIV(taREFLIV[nContadorHeaderTmp])
				R_GEEX5001_CRILIV(taCRILIV[nContadorHeaderTmp])

				flush(0,0,NL) >> tFileOutTemp
				nContadorLinhasEscritas++

				taNFPedido[nNumeroMonoRegisto] := S_Registo_Pedido
				taSerie[nNumeroMonoRegisto] := build(number(S_Registo_Serie))
								
				if taTRTEXC[nContadorHeaderTmp] = "" then
					if number(taSerie[nContadorHeaderTmp]) > 0 then			   
						R_GEEX5005_CODEXC("50")
						R_GEEX5005_SEPEXC(".")
						R_GEEX5005_SCOEXC("05")
						R_GEEX5005_CODACT(taCODACT[nContadorHeaderTmp])
						R_GEEX5005_CODCLI(taCODCLI[nContadorHeaderTmp])
						R_GEEX5005_REFLIV(taREFLIV[nContadorHeaderTmp])
						R_GEEX5005_CODRUB("SNF")
						R_GEEX5005_VALRUB(build(number(taSerie[nContadorHeaderTmp])))

						flush(0,0,NL) >> tFileOutTemp
						nContadorLinhasEscritas++
					endif

					R_GEEX5005_CODEXC("50")
					R_GEEX5005_SEPEXC(".")
					R_GEEX5005_SCOEXC("05")
					R_GEEX5005_CODACT(taCODACT[nContadorHeaderTmp])
					R_GEEX5005_CODCLI(taCODCLI[nContadorHeaderTmp])
					R_GEEX5005_REFLIV(taREFLIV[nContadorHeaderTmp])
					R_GEEX5005_CODRUB("NF")
					R_GEEX5005_VALRUB(taNFPedido[nContadorHeaderTmp])

					flush(0,0,NL) >> tFileOutTemp
					nContadorLinhasEscritas++
				endif
			endif

			nContadorLinhasEncomenda := 0
			nContadorTmpTOTAL := 1

			while nContadorTmpTOTAL <= nNumeroMonoRegisto do  
				if taReferenciaRefgisto[nContadorTmpTOTAL] = build(nContadorHeaderTmp) and taTRTEXC[nContadorHeaderTmp] <> "7" then
					R_GEEX5020_CODEXC("50")
					R_GEEX5020_SEPEXC(".")
					R_GEEX5020_SCOEXC("20")
					R_GEEX5020_TRTEXC(taTRTEXC[nContadorTmpTOTAL])
					R_GEEX5020_CODACT(taCODACT[nContadorTmpTOTAL])
					R_GEEX5020_CODCLI(taCODCLI[nContadorTmpTOTAL])
					R_GEEX5020_CODPRO(taCODPRO[nContadorTmpTOTAL])
					R_GEEX5020_UNICDE("UNI")
					R_GEEX5020_CODLOT(taCODLOT[nContadorTmpTOTAL])
					R_GEEX5020_QTECDE(taUVCCDE[nContadorTmpTOTAL])
					R_GEEX5020_REFLIV(taREFLIV[nContadorTmpTOTAL])
					nContadorNLILIV++
					R_GEEX5020_NLILIV(build(nContadorNLILIV:R05.0))
					R_GEEX5020_IMMFRG(taIMMFRG[nContadorTmpTOTAL])

					flush(0,0,NL) >> tFileOutTemp
					nContadorLinhasEscritas++

					if length(taCODPAL[nContadorTmpTOTAL]) > 0 then
						R_GEEX5025_CODEXC("50")
						R_GEEX5025_SEPEXC(".")
						R_GEEX5025_SCOEXC("25")
						R_GEEX5025_TRTEXC(taTRTEXC[nContadorTmpTOTAL])
						R_GEEX5025_CODACT(taCODACT[nContadorTmpTOTAL])
						R_GEEX5025_CODCLI(taCODCLI[nContadorTmpTOTAL])
						R_GEEX5025_REFLIV(taREFLIV[nContadorTmpTOTAL])
						R_GEEX5025_CODPAL(taCODPAL[nContadorTmpTOTAL])
						R_GEEX5025_NLILIV(build(nContadorNLILIV:R05.0))

						flush(0,0,NL) >> tFileOutTemp
						nContadorLinhasEscritas++
					endif
				endif

				nContadorTmpTOTAL++
			endwhile

		else
			bPrimeiroResultado := FALSE
			tQueryUpdade := build("UPDATE FGE50FM",tToInfologPrefixFilename,".GELIVE ", NL," "\
								  "SET ")

			! COMPLEMENTO UPDATE
				if length(taTOULIV[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "TOULIV = '",taTOULIV[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",TOULIV = '",taTOULIV[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taCODTLI[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "CODTLI = '",taCODTLI[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",CODTLI = '",taCODTLI[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taDIPLIV5001[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "DIPLIV = '",taDIPLIV5001[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",DIPLIV = '",taDIPLIV5001[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taCODCLI[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "CODCLI = '",taCODCLI[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",CODCLI = '",taCODCLI[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taCODRGT[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "CODRGT = '",taCODRGT[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",CODRGT = '",taCODRGT[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taDATEXP[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "DTILIV = '",taDATEXP[nContadorHeaderTmp],"'", NL," "\
															",DATLIV = '",taDATEXP[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",DTILIV = '",taDATEXP[nContadorHeaderTmp],"'", NL," "\
															",DATLIV = '",taDATEXP[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taHEUEXP[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "HEILIV = '",taHEUEXP[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",HEILIV = '",taHEUEXP[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taCODTRA[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "CODTRA = '",taCODTRA[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",CODTRA = '",taCODTRA[nContadorHeaderTmp],"'", NL)
					endif
				endif

				if length(taCRILIV[nContadorHeaderTmp]) > 0 then
					if bPrimeiroResultado = FALSE then
						bPrimeiroResultado := TRUE
						tQueryUpdade := build(tQueryUpdade, "CRILIV = '",taCRILIV[nContadorHeaderTmp],"'", NL)
					else
						tQueryUpdade := build(tQueryUpdade, ",CRILIV = '",taCRILIV[nContadorHeaderTmp],"'", NL)
					endif
				endif
			! FIM COMPLEMENTO UPDATE

			tQueryUpdade := build(tQueryUpdade, "WHERE REFLIV = '",taREFLIV[nContadorHeaderTmp],"' ", NL," "\
												"AND ETALIV = '10' ", NL," "\
												"WITH NONE ")

			log(tQueryUpdade, NL, NL)
			print(tQueryUpdade, NL, NL) >> tFileOutTempUpdate

			if not bfSqlSet(tDbBase2, "Updatedb2", tQueryUpdade) then
				log(tfSqlErrorStr(), NL)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("1 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
				exit(27)
			endif

			if not bfSqlExec(tDbBase2, "Updatedb2") then
				log(tfSqlErrorStr(), NL)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("2 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
				exit(28)
			endif

			if not bfSqlCommit(tDbBase2, "Updatedb2") then
				log(tfSqlErrorStr(), NL)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("3 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
				exit(29)
			endif

			if not bfSqlFree(tDbBase2, "Updatedb2") then
				log(tfSqlErrorStr(), NL)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("4 - Erro na execucao da query ",taQueryUpdade[nContadorResultadosQuery]," do banco de dados: ",tfSqlErrorStr()))
				exit(30)
			endif

			flush(0,0,NL) >> tFileOutTempUpdate

			bfMajtraceUpdate("Recebida","0",taREFLIV[nContadorHeaderTmp],time("now","%Y-%m-%d"),tFileInput,tFileOutTempUpdate,"Produtos","")

			copy(tFileOutTempUpdate,tFileOutUpdate)
			close(tFileOutTempUpdate)
			remove(tFileOutTempUpdate)
			close(tFileOutUpdate)
		endif
		nContadorHeaderTmp++
	endwhile

	R_GEEX5099_CODEXC("50")
	R_GEEX5099_SEPEXC(".")
	R_GEEX5099_SCOEXC("99")
	R_GEEX5099_TRTEXC(taTRTEXC[nContadorHeaderTmp-1])
	R_GEEX5099_CUMLIG(build(nContadorLinhasEncomenda))
	R_GEEX5099_CODACT(taCODACT[nContadorHeaderTmp-1])
	R_GEEX5099_CODCLI(taCODCLI[nContadorHeaderTmp-1])
	R_GEEX5099_REFLIV(taREFLIV[nContadorHeaderTmp-1])

	flush(0,0,NL) >> tFileOutTemp
	nContadorLinhasEscritas++

	bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
	
	R_GEEX9900_CODEXC("99")
	R_GEEX9900_SEPEXC(".")
	R_GEEX9900_SCOEXC("00")
	R_GEEX9900_TRTEXC("")
	R_GEEX9900_EMTEXC("FM")
	R_GEEX9900_RCTEXC("")
	R_GEEX9900_DATEXC(time("now" ,"%Y%m%d"))
	R_GEEX9900_HEUEXC(time("now" ,"H%M%S"))
	R_GEEX9900_NUMEXC("")
	tContadorLinhasEscritas := build(nContadorLinhasEscritas)
	R_GEEX9900_CPTEXC(build(number(tContadorLinhasEscritas):R08.0))

	flush(0,0,NL)  >> tFileOutTemp

	close(tFileOutTemp)
	
	copy(tFileOutTemp,tFileOut)
	close(tFileOutTemp)
	remove(tFileOutTemp)
	close(tFileOut)

	bfSqlClose(tDbBase)
	bfSqlClose(tDbBase2)
	exit(0)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := "HARMAN"
	TRACE.SENTIDO := "I"
	TRACE.MENSAGEM := "PEDIDO"
	TRACE.NUMDOC := taREFLIV[nContadorHeaderTmp-1] 
	TRACE.DATDOC := tfConvertDate(substr(taDATEXP[nContadorHeaderTmp-1],1,8), "YYYYMMDD" , "YYYY-MM-DD") 
	TRACE.MESSAGEID := build(nMessageID:R010)   
	TRACE.REDE := pEDISEND.ORIGINAL.NAME
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut
	TRACE.LIBEXC := tLIBEXC

	SYSLOG.REFERENCE := build(nMessageID)

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)

	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	if tError="0" then
		close(tFileOutTemp)
		copy(tFileOutTemp,TRACE.Out)
		close(tFileOutTemp)
		close(TRACE.Out)
	endif

	flush(TRACE)
endfunction

!===========================================================

function bfMajtraceUpdate(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := "HARMAN"
	TRACE.SENTIDO := "I"
	TRACE.MENSAGEM := "PEDIDO"
	TRACE.NUMDOC := tNumDoc 
	TRACE.DATDOC := tDataDoc 
	TRACE.MESSAGEID := build(nMessageID:R010)   
	TRACE.REDE := pEDISEND.ORIGINAL.NAME
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut
	TRACE.LIBEXC := tLIBEXC

	SYSLOG.REFERENCE := build(nMessageID)

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
		endif
	endif

	close(TRACE.Detail)

	if nMainIndex = 0 then
		close(SYSLOG.a)
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	if tError="0" then
		close(tFileOut)
		copy(tFileOut,TRACE.Out)
		close(tFileOut)
		close(TRACE.Out)
	endif

	flush(TRACE)
endfunction
