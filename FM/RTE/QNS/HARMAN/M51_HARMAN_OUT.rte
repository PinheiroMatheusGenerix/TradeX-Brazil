%@(#)  source_filename.rte     modif:26-12-2017
!==============================================================================
% File          : source_filename.rte   version 1.0
!------------------------------------------------------------------------------
% Description   : <short program description>
!------------------------------------------------------------------------------
% Author        : <developer name> - COMPANY
!==============================================================================
! 26-12-2017  XX  Creation
! 26-12-2017  XX  <comments>
!==============================================================================
!
! <detailed program description>
!
!==============================================================================
! input file     : <name or rule for naming input file>
! output file    : <name or rule for naming output file> 
! temporary file : <name or rule for naming temporary file> 
!==============================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off
base "../fmbrasil_clientesped/fmbrasil_clientesped.cfg" fmbrasil_clientesped

!===========================================================

! Input/output macros file
#define TX_PROG_INFO "M51_HARMAN_PED_CSV_OUT"
#include "include/generix_func.inc"
#include "include/ERPFMviaCSV.inc"
#include "include/GEEXM51.inc"

!===========================================================

! Initialization section

begin
	nPos := 1
	nRec := 1
	SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
	nMessageID := cMessageID

	load(0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)
	tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameHARMAN"]

	tDbBase := "FMWMS"
	tDbUsername := taPARAM["WMSDBUSER"]
	tDbPassword := taPARAM["WMSDBPASS"]
	tDbUrl := taPARAM["WMSDBURL"]

	bfSqlInit()
	if not bfSqlJdbc(tDbBase, tDbUsername, tDbPassword, tDbUrl) then
		print("FATAL ",tfSqlErrorStr())
		bfSqlClose(tDbBase)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif
endbegin

!===========================================================

line(1:"00.00")

endline

line(1:"51.00")
	tCODACT := S_GEEX5100_CODACT
	tNUMLIV := S_GEEX5100_NUMLIV
	tSNULIV := S_GEEX5100_SNULIV
	tNUMVAG := S_GEEX5100_NUMVAG
	if index(S_GEEX5100_REFLIV,".") = 0 then
		tREFLIVaConsiderar := S_GEEX5100_REFLIV
		log("1 - tREFLIVaConsiderar ",tREFLIVaConsiderar,NL)
	else
		!1234.18CX
		tDoisUltimoCaract :=  substr(S_GEEX5100_REFLIV,length(S_GEEX5100_REFLIV)-1,2)
		if tDoisUltimoCaract = "UN" or  tDoisUltimoCaract = "CX" then
			tREFLIVaConsiderar := substr(S_GEEX5100_REFLIV,1,length(S_GEEX5100_REFLIV)-2)
			log("2 - tREFLIVaConsiderar ",tREFLIVaConsiderar,NL)
		else
			tREFLIVaConsiderar := S_GEEX5100_REFLIV
			log("3 - tREFLIVaConsiderar ",tREFLIVaConsiderar,NL)
		endif
		split(S_GEEX5100_REFLIV, taPedido, ".")
	endif
endline

line(1:"51.20")

endline

!===========================================================

! Default statements section
default

enddefault

!===========================================================

! End statements section
end
	tQuery := build("SELECT VALRUB", NL," "\
					"FROM FGE50FM",tToInfologPrefixFilename,".GELIRUB", NL," "\
					"WHERE CODRUB = 'CDFM'", NL," "\
					"AND NUMLIV = '",tNUMLIV,"'", NL," "\
					"AND SNULIV = '",tSNULIV,"'")

	if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
		log("FATAL ", tfSqlErrorStr(),NL,tQuery)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
		log("FATAL ", tfSqlErrorStr(),NL,tQuery)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
		tValrub := peel(taDb2Array["VALRUB"], " ")
		remove(taDb2Array)
	endwhile

	if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
		log("FATAL ", tfSqlErrorStr(),NL,tQuery)
		bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
		exit(1)
	endif

	if length(tValrub) = 0 then
		tQuery := build("SELECT VALRUB", NL," "\
						"FROM FGE50FM",tToInfologPrefixFilename,".GEACRUB", NL," "\
						"WHERE CODRUB = 'CDFM' AND CODACT = 'HAR'")			  
						
		log(tQuery, NL)
	
		if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
			print("FATAL ", tfSqlErrorStr())
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
			print("FATAL ", tfSqlErrorStr())
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
			tValrub := peel(taDb2Array["VALRUB"]," ")
			remove(taDb2Array)
		endwhile

		if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
			print("FATAL", tfSqlErrorStr())
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif
	endif

	fmbrasil_clientesped := find(build(sHOME,"/fmbrasil_clientesped"),CNPJFILIAL=tValrub,CODACT=tCODACT)

	if valid(fmbrasil_clientesped) then
		! segue processo normalmente
		if length(fmbrasil_clientesped.CODIGOFABRICANTE) > 0 and length(fmbrasil_clientesped.CODERP) > 0 and length(fmbrasil_clientesped.CODACT) > 0 then
			bFazPED := TRUE
		endif
	else
		log("Sem dados na tabela para codact ",tCODACT, " e CNPJ_FILIAL ", tValrub, NL)
	endif

	TRACE := find(build(sHOME,"/trace"),NUMDOC=tREFLIVaConsiderar,MENSAGEM=build("CONFIRMACAO DE PEDIDO - TOTVS RM"),PERFIL="HARMAN",LIBEXC=tNUMVAG)
	
	if valid(TRACE) then
		bFazPED := FALSE
	endif

	if bFazPED = TRUE then
		log("bFazPED = TRUE",NL)
	else
		log("bFazPED = FALSE",NL)
	endif

	if bFazPED = TRUE then
		if tValrub = "02462805002550" then
			tFileOutPED := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,"HARPED.NSR_",time("now" ,"%Y%m%d%H%M%S"),".CSV")
			tFileOutTempPED := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,"HARPED.NSR_",time("now" ,"%Y%m%d%H%M%S"),".CSV")
			tNameOutPED := build("FM",tToInfologPrefixFilename,"HARPED.NSR_",time("now" ,"%Y%m%d%H%M%S"),".CSV")
		else
			tFileOutPED := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,"HARPED.",time("now" ,"%Y%m%d%H%M%S"),".CSV")
			tFileOutTempPED := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,"HARPED.",time("now" ,"%Y%m%d%H%M%S"),".CSV")
			tNameOutPED := build("FM",tToInfologPrefixFilename,"HARPED.",time("now" ,"%Y%m%d%H%M%S"),".CSV")
		endif

		tQuery := build("SELECT  SUM (PDNUVC*UVCLIV) AS PESOLIQUIDO", NL," "\
						"       ,ROUND(SUM ((UVCLIV/PCBPRO)*PDBCOL),2) PESOBRUTO", NL," "\
						"       ,COUNT (CODPAL) VOLUMES", NL," "\
						"FROM FGE50FM",tToInfologPrefixFilename,".GESUPD", NL," "\
						"WHERE REFLIV LIKE '",tREFLIVaConsiderar,"%'")

		if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
			log("FATAL ", tfSqlErrorStr(),NL,tQuery)
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
			log("FATAL ", tfSqlErrorStr(),NL,tQuery)
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		bQueryTemResul := FALSE
		while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
			bQueryTemResul := TRUE
			remove(taDb2Array)
		endwhile

		if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
			log("FATAL ", tfSqlErrorStr(),NL,tQuery)
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		tQuery := build("SELECT  DISTINCT RIGHT(lpad(OD.DATVAG,8,0),2)||'/'||substr(lpad(OD.DATVAG,8,0),5,2)||'/'||LEFT(lpad(OD.DATVAG,8,0),4) DATACRIACAO ", NL," "\
						"       ,CASE WHEN TRIM(LE.CODCLI)='88315379000170' THEN CASE ", NL," "\
						"             WHEN TRIM(LE.CODTLI)='RP' THEN 'RP'  ELSE 'PED' END  ELSE CASE ", NL," "\
						"             WHEN TRIM(LE.CODCLI)<>'88315379000170' THEN 'NF'  ELSE 'ERRO' END END TIPODOCUMENTO ", NL," "\
						"       ,(SUBSTR(LE.REFLIV,1,LOCATE ('.',LE.REFLIV)-1)) NUMEROMOV ", NL," "\
						"       ,B.VALRUB SERIE ", NL," "\
						"       ,left(C.VALRUB,2)||'/'||substr(c.valrub,3,2)||'/'||right(trim(c.valrub),4) DATAEMISSAO ", NL," "\
						"       ,RIGHT(LE.DTILIV,2)||'/'||SUBSTR(LE.DTILIV,5,2)||'/'||LEFT(LE.DTILIV,4)||' '||LEFT(LPAD(LE.HEILIV,6,0),2)||':'||SUBSTR(LPAD(LE.HEILIV,6,0),3,2)||':'||'00' DATASAIDA ", NL," "\
						"       ,RIGHT(lpad(LE.MAJCRE,8,0),2)||'/'||substr(lpad(LE.MAJCRE,8,0),5,2)||'/'||LEFT(lpad(LE.MAJCRE,8,0),4)||' '||LEFT(LPAD(LE.HEUEXC,6,0),2)||':'||SUBSTR(LPAD(LE.HEUEXC,6,0),3,2)||':'||'00' DATAENTREGA ", NL," "\
						"       ,D.VALRUB VALORBRUTO ", NL," "\
						"       ,VLQ VALORLIQUIDO ", NL," "\
						"       ,CASE WHEN TRIM(LE.CODCLI)<>'88315379000170' THEN 'RETORNO SIMBOLICO'  ELSE 'RETORNO REAL' END OBSERVACAO ", NL," "\
						"       ,LE.TOULIV CAMPOLIVRE2 ", NL," "\
						"       ,H.PSL PESOLIQUIDO ", NL," "\
						"       ,CASE WHEN H.PSB<H.PSL THEN H.PSL  ELSE H.PSB END PESOBRUTO ", NL," "\
						"       ,F.VALRUB VOLUMES ", NL," "\
						"       ,LE.CRILIV CAMPOLIVRE3 ", NL," "\
						"       ,LE.CODTRA CNPJTRANSPORTADORA ", NL," "\
						"       ,(SUBSTR(LE.REFLIV,1,LOCATE ('.',LE.REFLIV)-1)) NUMERODELIVERY ", NL," "\
						"       ,RIGHT(LE.DTILIV,2)||'/'||SUBSTR(LE.DTILIV,5,2)||'/'||LEFT(LE.DTILIV,4)||' '||LEFT(LPAD(LE.HEILIV,6,0),2)||':'||SUBSTR(LPAD(LE.HEILIV,6,0),3,2)||':'||'00' DT_AGENDAMENTO ", NL," "\
						"       ,G.PRO CODIGOPRD ", NL," "\
						"       ,G.SRV QUANTIDADE ", NL," "\
						"       ,G.PRI PRECOUNITARIO ", NL," "\
						"       ,G.DS1 DESCRICAOPROD ", NL," "\
						"       ,G.NLILIV ", NL," "\
						"FROM FGE50FM",tToInfologPrefixFilename,".GELIVE LE ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GEVAG OD ", NL," "\
						"ON LE.NUMVAG=OD.NUMVAG ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GELIRUB A ", NL," "\
						"ON LE.NUMLIV=A.NUMLIV AND A.CODRUB='NF01' ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GELIRUB B ", NL," "\
						"ON LE.NUMLIV=B.NUMLIV AND B.CODRUB='SE01' ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GELIRUB C ", NL," "\
						"ON LE.NUMLIV=C.NUMLIV AND C.CODRUB='DT01' ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GELIRUB D ", NL," "\
						"ON LE.NUMLIV=D.NUMLIV AND D.CODRUB='VL01' ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GELIRUB E ", NL," "\
						"ON LE.NUMLIV=E.NUMLIV AND E.CODRUB='PS01' ", NL," "\
						"LEFT JOIN FGE50FM",tToInfologPrefixFilename,".GELIRUB F ", NL," "\
						"ON LE.NUMLIV=F.NUMLIV AND F.CODRUB='VO01' ", NL," "\
						"LEFT JOIN ", NL," "\
						"( ", NL," "\
						"	SELECT  (SUBSTR(A.REFLIV,1,LOCATE ('.',A.REFLIV)-1)) REF ", NL," "\
						"	       ,A.CODPRO PRO ", NL," "\
						"	       ,A.DS1PRO DS1 ", NL," "\
						"	       ,SUM (A.UVCSRV) SRV ", NL," "\
						"	       ,CASE WHEN A.PRILIV=0 THEN B.VALRUB  ELSE A.PRILIV END PRI ", NL," "\
						"	       ,A.CODACT ACT ", NL," "\
						"	       ,A.NLILIV ", NL," "\
						"	FROM FGE50FM",tToInfologPrefixFilename,".GELIVD A, FGE50FM",tToInfologPrefixFilename,".GERILP B ", NL," "\
						"	WHERE A.REFLIV LIKE '",tREFLIVaConsiderar,"%' ", NL," "\
						"	AND A.NUMLIV=B.NUMLIV ", NL," "\
						"	AND A.NLILIV=B.NLILIV ", NL," "\
						"	GROUP BY  (SUBSTR(A.REFLIV,1,LOCATE ('.',A.REFLIV)-1)) ", NL," "\
						"	         ,A.CODPRO ", NL," "\
						"	         ,A.DS1PRO ", NL," "\
						"	         ,A.PRILIV ", NL," "\
						"	         ,A.CODACT ", NL," "\
						"	         ,A.NLILIV ", NL," "\
						"	         ,B.VALRUB ", NL," "\
						")G ", NL," "\
						"ON G.REF=(SUBSTR(LE.REFLIV, 1, LOCATE ('.', LE.REFLIV)-1)) AND G.ACT=LE.CODACT ", NL," "\
						"LEFT JOIN ", NL," "\
						"( ", NL," "\
						"	SELECT  REF ", NL," "\
						"	       ,SUM(PREC_UNIT*QTD) VLQ ", NL," "\
						"	       ,ACT ", NL," "\
						"	       ,SUM(PSL) PSL ", NL," "\
						"	       ,SUM(PSB) PSB ", NL," "\
						"	FROM ", NL," "\
						"	( ", NL," "\
						"		SELECT  (SUBSTR(A.REFLIV,1,LOCATE ('.',A.REFLIV)-1)) REF ", NL," "\
						"		       ,CASE WHEN A.PRILIV=0 THEN B.VALRUB  ELSE A.PRILIV END PREC_UNIT ", NL," "\
						"		       ,SUM(A.UVCSRV) QTD ", NL," "\
						"		       ,A.CODACT ACT ", NL," "\
						"		       ,A.NUMLIV ", NL," "\
						"		       ,SUM (A.UVCSRV*A.PDNUVC) PSL ", NL," "\
						"		       ,SUM ((A.UVCSRV/A.PCBPRO)*PDBCOL) PSB ", NL," "\
						"		FROM FGE50FM",tToInfologPrefixFilename,".GELIVD A, FGE50FM",tToInfologPrefixFilename,".GERILP B ", NL," "\
						"		WHERE A.REFLIV LIKE '",tREFLIVaConsiderar,"%' ", NL," "\
						"		AND A.NUMLIV=B.NUMLIV ", NL," "\
						"		AND A.NLILIV=B.NLILIV ", NL," "\
						"		GROUP BY  (SUBSTR(A.REFLIV,1,LOCATE ('.',A.REFLIV)-1)) ", NL," "\
						"		         ,A.CODACT ", NL," "\
						"		         ,A.PRILIV ", NL," "\
						"		         ,B.VALRUB ", NL," "\
						"		         ,A.NUMLIV ", NL," "\
						"	) ", NL," "\
						"	GROUP BY  REF ", NL," "\
						"	         ,ACT ", NL," "\
						") H ", NL," "\
						"ON H.REF=(SUBSTR(LE.REFLIV, 1, LOCATE ('.', LE.REFLIV)-1)) AND G.REF=H.REF AND H.ACT=LE.CODACT AND G.ACT=H.ACT ", NL," "\
						"WHERE LE.REFLIV LIKE '",tREFLIVaConsiderar,"%' ", NL," "\
						"AND OD.ETAVAG=30 ", NL," "\
						"GROUP BY  OD.DATVAG ", NL," "\
						"         ,LE.CODCLI ", NL," "\
						"         ,LE.CODTLI ", NL," "\
						"         ,(SUBSTR(LE.REFLIV,1,LOCATE ('.',LE.REFLIV)-1)) ", NL," "\
						"         ,B.VALRUB ", NL," "\
						"         ,C.VALRUB ", NL," "\
						"         ,LE.HEILIV ", NL," "\
						"         ,LE.DTILIV ", NL," "\
						"         ,LE.MAJCRE ", NL," "\
						"         ,LE.HEUEXC ", NL," "\
						"         ,D.VALRUB ", NL," "\
						"         ,G.NLILIV ", NL," "\
						"         ,H.VLQ ", NL," "\
						"         ,LE.TOULIV ", NL," "\
						"         ,H.PSL ", NL," "\
						"         ,H.PSB ", NL," "\
						"         ,F.VALRUB ", NL," "\
						"         ,LE.CRILIV ", NL," "\
						"         ,LE.CODTRA ", NL," "\
						"         ,G.PRO ", NL," "\
						"         ,G.SRV ", NL," "\
						"         ,G.PRI ", NL," "\
						"         ,G.DS1 ", NL," "\
						"ORDER BY 1")

		log(tQuery,NL)

		if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
			log("FATAL ", tfSqlErrorStr(),NL,tQuery)
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
			log("FATAL ", tfSqlErrorStr(),NL,tQuery)
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		bQueryTemResul := FALSE
		nContItemsQuery2 := 0
		tVAL_LIQQuery2 := "0"
		while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
			bQueryTemResul := TRUE
			nContItemsQuery2++
			tDATA_M97Query2 := peel(taDb2Array["DATACRIACAO"]," ")
			tTIPOQuery2 := peel(taDb2Array["TIPODOCUMENTO"]," ")
			tVAL_REFLIVQuery2 := peel(taDb2Array["NUMERODELIVERY"]," ")
			tVAL_SERIEQuery2 := peel(taDb2Array["SERIE"]," ")
			tDATA_CRIQuery2 := peel(taDb2Array["DATAENTREGA"]," ")
			tTOULIVQuery2 := peel(taDb2Array["CAMPOLIVRE2"]," ")
			tCRILIVQuery2 := peel(taDb2Array["CAMPOLIVRE3"]," ")
			tCODTRAQuery2 := peel(taDb2Array["CNPJTRANSPORTADORA"]," ")
			tDATA_AGEQuery2 := peel(taDb2Array["DT_AGENDAMENTO"]," ")
			tOBSERVQuery2 := peel(taDb2Array["OBSERVACAO"]," ")
			tVAL_BRUQuery2 := replace(build(number(peel(taDb2Array["VALORBRUTO"]," ")):R15.4),".",",")
			tVAL_LIQQuery2 := replace(build(number(peel(taDb2Array["VALORLIQUIDO"]," ")):R15.4),".",",")
			taNLILIVQuery2[nContItemsQuery2] := peel(taDb2Array["NLILIV"]," ")
			taCODPROQuery2[nContItemsQuery2] := peel(taDb2Array["CODIGOPRD"]," ")
			taUVCSRVQuery2[nContItemsQuery2] := peel(taDb2Array["QUANTIDADE"]," ")
			taCODLOTQuery2[nContItemsQuery2] := peel(taDb2Array["CODLOT"]," ")
			taPR_UNTQuery2[nContItemsQuery2] := replace(build(number(peel(taDb2Array["PRECOUNITARIO"]," ")):R15.4),".",",")
			tDATA_EMIQuery2 := peel(taDb2Array["DATAEMISSAO"]," ")
			tREFLIVQuery2 := peel(taDb2Array["REFLIV"]," ")
			tPESOLIQUIDO := replace(peel(taDb2Array["PESOLIQUIDO"]," "),",",".")
			tPESOBRUTO := replace(peel(taDb2Array["PESOBRUTO"]," "),",",".")
			tVOLUMES := peel(taDb2Array["VOLUMES"]," ")
			remove(taDb2Array)
		endwhile

		if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
			log("FATAL ", tfSqlErrorStr(),NL,tQuery)
			bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
			exit(1)
		endif

		! Validação de duplicata
		split(tREFLIVaConsiderar,taREFLIVSplitado,".")
		TRACE := find(build(sHOME,"/trace"),NUMDOC=taREFLIVSplitado[1],MENSAGEM=build("CONFIRMACAO DE PEDIDO - TOTVS RM"),PERFIL="HARMAN",LIBEXC=tNUMVAG)
		bM97CONFSEPDuplicado := FALSE

		if valid(TRACE) then
			bM97CONFSEPDuplicado := TRUE
		endif

		if bQueryTemResul = TRUE and bM97CONFSEPDuplicado = FALSE then
			R_HEADER_TIPO_REGISTRO("1")
			R_HEADER_ID("")
			R_HEADER_STATUS_INT("P")
			R_HEADER_DATACRIACAO(tDATA_M97Query2)
			R_HEADER_DTHRABSORCAO("")
			R_HEADER_TIPODOCUMENTO(tTIPOQuery2)
			R_HEADER_TIPO("S")
			R_HEADER_NUMEROMOV(tVAL_REFLIVQuery2)
			R_HEADER_CPFCNPJ(fmbrasil_clientesped.CNPJ)
			R_HEADER_NOME(fmbrasil_clientesped.NOME)
			R_HEADER_RUA(fmbrasil_clientesped.RUA)
			R_HEADER_NUMERO(fmbrasil_clientesped.NUMERO)
			R_HEADER_COMPLEMENTO(fmbrasil_clientesped.COMPLEMENTO)
			R_HEADER_BAIRRO(fmbrasil_clientesped.BAIRRO)
			R_HEADER_CIDADE(fmbrasil_clientesped.CIDADE)
			R_HEADER_CODETD(fmbrasil_clientesped.CODETD)
			R_HEADER_CEP(fmbrasil_clientesped.CEP)
			R_HEADER_TELEFONE(fmbrasil_clientesped.TELEFONE)
			R_HEADER_EMAIL(fmbrasil_clientesped.EMAIL)
			R_HEADER_CNPJFILIAL(build(number(fmbrasil_clientesped.CNPJFILIAL):R014))
			R_HEADER_SERIE(tVAL_SERIEQuery2)
			R_HEADER_DATAEMISSAO(tDATA_EMIQuery2)
			R_HEADER_DATASAIDA(tDATA_AGEQuery2)
			R_HEADER_DATAENTREGA(tDATA_CRIQuery2)
			R_HEADER_VALORBRUTO(peel(tVAL_BRUQuery2," "))
			R_HEADER_VALORLIQUIDO(peel(tVAL_LIQQuery2," "))
			R_HEADER_VALORFRETE("")
			R_HEADER_VALORDESPESAS("")
			R_HEADER_CAMPOLIVRE1(fmbrasil_clientesped.CODERP)
			R_HEADER_CAMPOLIVRE2(tTOULIVQuery2)

			tQuery := build("SELECT", NL," "\
							"CASE ", NL," "\
							"	WHEN CODMOP='RET' THEN 'A'", NL," "\
							"	WHEN CODMOP<>'RET' THEN 'M'", NL," "\
							"END ORIGEM", NL," "\
							"FROM FGE50FM",tToInfologPrefixFilename,".GELIVE", NL," "\
							"WHERE REFLIV LIKE '",tREFLIVaConsiderar,"%'")

			log(tQuery,NL)

			if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
				log("FATAL ", tfSqlErrorStr(),NL,tQuery)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
				log("FATAL ", tfSqlErrorStr(),NL,tQuery)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
				tORIGEMSelect := peel(taDb2Array["ORIGEM"]," ")
				remove(taDb2Array)
			endwhile

			if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
				log("FATAL ", tfSqlErrorStr(),NL,tQuery)
				bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
				exit(1)
			endif

			if length(tORIGEMSelect) > 0 then
				R_HEADER_ORIGEM(tORIGEMSelect)
			endif

			R_HEADER_OBSERVACAO(tOBSERVQuery2)
			tCont := peel(build(number(tPESOLIQUIDO)*1)," ")
			tCont := peel(build(number(tCont):R015)," ")
			R_HEADER_PESOLIQUIDO(replace(tCont,".",","))
			tCont := peel(build(number(tPESOBRUTO)*1)," ")
			tCont := peel(build(number(tCont):R015)," ")
			R_HEADER_PESOBRUTO(replace(tCont,".",","))
			R_HEADER_RECCREATEDBY("")
			R_HEADER_RECCREATEDON("")
			R_HEADER_RECMODIFIEDBY("")
			R_HEADER_RECMODIFIEDON("")
			R_HEADER_CAMPOLIVRE3(tCRILIVQuery2)
			R_HEADER_MOVGERADO("")
			R_HEADER_DADOSADICIONAIS("")
			R_HEADER_CNPJTRANSPORTADORA(tCODTRAQuery2)
			R_HEADER_IDNAT("")
			R_HEADER_CODTRA("")
			R_HEADER_PESSOAFISOUJUR("")
			R_HEADER_CONTRIBUINTE("")
			R_HEADER_REGIMEESPECIAL("")
			R_HEADER_INSCRESTADUAL(fmbrasil_clientesped.INSCRESTADUAL)
			R_HEADER_FRETECIFOUFOB("")
			R_HEADER_ESPECIE("")
			R_HEADER_VOLUMES("")
			R_HEADER_NUMERODELIVERY(build(tVAL_REFLIVQuery2,".",tVAL_SERIEQuery2))
			R_HEADER_CONSUMIDORFINAL("")
			R_HEADER_VALORICMS("")
			R_HEADER_BASEICMS("")
			R_HEADER_BASEICMSST("")
			R_HEADER_VALORICMSST("")
			R_HEADER_DT_AGENDAMENTO(tDATA_AGEQuery2)
			R_HEADER_CFV_COD("")
			R_HEADER_IDESTRANGEIRO("")
			R_HEADER_CODTDO("NFE")
			R_HEADER_UFDESEMBARACO("")
			R_HEADER_LOCALDESEMBARACO("")

			print(taHEADER[1],";",taHEADER[2],";",taHEADER[3],";",taHEADER[4],";",taHEADER[5],";",taHEADER[6],";",taHEADER[7],";",taHEADER[8],";",taHEADER[9],";",taHEADER[10],";",taHEADER[11],";",taHEADER[12], \
				";",taHEADER[13],";",taHEADER[14],";",taHEADER[15],";",taHEADER[ \
				16],";",taHEADER[17],";",taHEADER[18],";",taHEADER[19],";", \
				taHEADER[20],";",taHEADER[21],";",taHEADER[22],";",taHEADER[23],";" \
				,taHEADER[24],";",taHEADER[25],";",taHEADER[26],";",taHEADER[27], \
				";",taHEADER[28],";",taHEADER[29],";",taHEADER[30],";",taHEADER[ \
				31],";",taHEADER[32],";",taHEADER[33],";",taHEADER[34],";", \
				taHEADER[35],";",taHEADER[36],";",taHEADER[37],";",taHEADER[38],";" \
				,taHEADER[39],";",taHEADER[40],";",taHEADER[41],";",taHEADER[42], \
				";",taHEADER[43],";",taHEADER[44],";",taHEADER[45],";",taHEADER[ \
				46],";",taHEADER[47],";",taHEADER[48],";",taHEADER[49],";", \
				taHEADER[50],";",taHEADER[51],";",taHEADER[52],";",taHEADER[53],";",taHEADER[54],";",taHEADER[55],";",taHEADER[56],";",taHEADER[57], \
				";",taHEADER[58],";",taHEADER[59],";",taHEADER[60],";",taHEADER[ \
				61],";",taHEADER[62],";",taHEADER[63], NL)   >> tFileOutTempPED
			remove(taHEADER)

			!executa para o resto do processo
			nTempINDContadorSup5130 := 1
			while nTempINDContadorSup5130 <= nContItemsQuery2 do
				R_DETAIL_TIPO_REGISTRO("2")
				R_DETAIL_ID("")
				nContador5120PED++
				R_DETAIL_NUMEROSEQUENCIAL(build(nTempINDContadorSup5130))
				if number(taCODPROQuery2[nTempINDContadorSup5130]) <> 0 then
					R_DETAIL_CODIGOPRD(build(number(taCODPROQuery2[nTempINDContadorSup5130])))
				else
					R_DETAIL_CODIGOPRD(taCODPROQuery2[nTempINDContadorSup5130])
				endif
				R_DETAIL_QUANTIDADE(taUVCSRVQuery2[nTempINDContadorSup5130])
				R_DETAIL_PRECOUNITARIO(peel(taPR_UNTQuery2[nTempINDContadorSup5130]," "))

				tDS1PRO1Select := ""

				tQuery := build("SELECT  DS1PRO", NL," "\
								"FROM FGE50FM",tToInfologPrefixFilename,".GEPRO", NL," "\
								"WHERE CODPRO = '",build(number(taCODPROQuery2[nTempINDContadorSup5130])),"'")

				log(tQuery,NL)

				if bfSqlSet(tDbBase, "SELECTdb2", tQuery) = FALSE then
					log("FATAL ", tfSqlErrorStr(),NL,tQuery)
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				if bfSqlOpen(tDbBase, "SELECTdb2") = FALSE then
					log("FATAL ", tfSqlErrorStr(),NL,tQuery)
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				while bfSqlFetchArray(tDbBase, "SELECTdb2", taDb2Array) = TRUE do
					tDS1PRO1Select := peel(taDb2Array["DS1PRO"]," ")
					remove(taDb2Array)
				endwhile

				if bfSqlFree(tDbBase, "SELECTdb2") = FALSE then
					log("FATAL ", tfSqlErrorStr(),NL,tQuery)
					bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
				endif

				R_DETAIL_DESCRICAOPROD(tDS1PRO1Select)
				R_DETAIL_UND("UN")
				R_DETAIL_CODFABRICANTE(fmbrasil_clientesped.CODIGOFABRICANTE)
				R_DETAIL_IDLOTE("")
				R_DETAIL_RECCREATEDBY("")
				R_DETAIL_RECCREATEDON("")
				R_DETAIL_RECMODIFIEDBY("")
				R_DETAIL_RECMODIFIEDON("")
				R_DETAIL_CODIGOBARRAS("")
				R_DETAIL_CODIFFISCAL("")
				R_DETAIL_PROCMERCADORIA("")
				R_DETAIL_NRREFERENCIA("")
				R_DETAIL_SERIE("")
				R_DETAIL_IDNAT("")
				R_DETAIL_CODCOLIGADA("")
				R_DETAIL_QTDFALTA("")
				R_DETAIL_TIPOPRD("")
				R_DETAIL_USOECONSUMO("")
				R_DETAIL_NUMEROCCF("")
				R_DETAIL_ALIQICMS("")
				R_DETAIL_VALORICMS("")
				R_DETAIL_BASEICMS("")
				R_DETAIL_ALIQICMSST("")
				R_DETAIL_BASEICMSST("")
				R_DETAIL_VALORICMSST("")
				R_DETAIL_ALIQIVA("")
				R_DETAIL_CODIGOCEST("")

				print(taDETAIL[1],";",taDETAIL[2],";",taDETAIL[3],";",taDETAIL[4],";",taDETAIL[5],";",taDETAIL[6],";",taDETAIL[7],";",taDETAIL[8],";",taDETAIL[9],";",taDETAIL[10],";",taDETAIL[11],";",taDETAIL[12], \
					";",taDETAIL[13],";",taDETAIL[14],";",taDETAIL[15],";",taDETAIL[ \
					16],";",taDETAIL[17],";",taDETAIL[18],";",taDETAIL[19],";", \
					taDETAIL[20],";",taDETAIL[21],";",taDETAIL[22],";",taDETAIL[23],";",taDETAIL[24],";",taDETAIL[25],";",taDETAIL[26],";",taDETAIL[27], \
					";",taDETAIL[28],";",taDETAIL[29],";",taDETAIL[30],";",taDETAIL[ \
					31],";",taDETAIL[32],";",taDETAIL[33],";",taDETAIL[34], NL) >> tFileOutTempPED
				remove(taDETAIL)

				nTempINDContadorSup5130++
			endwhile
			
			close(tFileOutTempPED)
			copy(tFileOutTempPED,tFileOutPED)
			close(tFileOutTempPED)
			remove(tFileOutTempPED)
			close(tFileOutPED)
			
			bfMajtrace("Recebida","0",tREFLIVaConsiderar,tDataDocumento,tFileInput,tFileOut,"Produtos","")
		endif
	endif

	bfSqlClose(tDbBase)
	exit(0)
endend

!===========================================================

function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
	TRACE:=new(build(sHOME,"/trace"))
	TRACE.ESTADO := tStatus
	TRACE.ERRO := tError
	TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
	TRACE.PERFIL := "HARMAN"
	TRACE.SENTIDO := "O"
	TRACE.MENSAGEM := "CONFIRMACAO DE PEDIDO - TOTVS RM"
	TRACE.NUMDOC := tNumDoc
	TRACE.DATDOC := time("now","%Y-%m-%d")
	TRACE.MESSAGEID := build(nMessageID:R010)
	TRACE.REDE := substr(pEDISEND.ORIGINAL.NAME,1,20)
	TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
	TRACE.FICHEIROSAIDA := tNameOut

	if tStatus = "Recebida" then
		print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail
		print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
		print("Traduzida com Sucesso",NL) >> TRACE.Detail
	else
		if tStatus = "Erro de Traducao" then
			print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
			print("Erro de Traducao",NL) >> TRACE.Detail
			print(tMensagemErrro,NL) >> TRACE.Detail
		endif
	endif
	close(TRACE.Detail)
	close(SYSLOG.a)

	if nMainIndex = 0 then
		copy(SYSLOG.a,TRACE.In)
		close(SYSLOG.a)
		close(TRACE.In)
		nMainIndex := TRACE.INDEX
	else
		tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
		system(tCmd)
	endif

	close(tFileOutPED)
	copy(tFileOutPED,TRACE.Out)
	close(tFileOutPED)
	close(TRACE.Out)
	flush(TRACE)
endfunction

!===========================================================
