%@(#) $Id:  M41_MAPED_OUT.rte,v 1.2 2020/04/23 17:02:20 gmt Exp $
!===========================================================================================================
% File         : $RCSfile: M41_MAPED_OUT.rte $   $Revision: 1.2 $
!-----------------------------------------------------------------------------------------------------------
% Description   : M41_MAPED_OUT
!-----------------------------------------------------------------------------------------------------------
% Author        : GMT - GENERIX BR
!===========================================================================================================
! 2020/04/23 GMT 1.2 Creation
!===========================================================================================================
!
! M41_MAPED_OUT
!
!===========================================================================================================

!base "syslog.cfg" SYSLOG
base "../trace/trace.cfg" TRACE,autoflush off
base "../fmbrasil_confrec_email_divers/fmbrasil_confrec_email_divers.cfg" fmbrasil_confrec_email_divers
!===========================================================

! Input/output macros file
#define PROG_NAME "$RCSfile: $"
#define PROG_VER  "$Revision: $"
#define PROG_DATE "$Date: $"
#define PROG_INFO build(PROG_NAME,PROG_VER,PROG_DATE)
#define TX_PROG_INFO build(PROG_NAME,PROG_VER,PROG_DATE)


#include "include/generix_func.inc"
#include "include/M41.inc"
#include "include/M41_CSV_HASBRO.inc"
#include "include/ConfRecebimentoSYSLEY.inc"
!===========================================================

! Initialization section

begin

   nPos := 1
    nRec := 1
    SYSLOG := find(sSYSLOG,INDEX=number(pINDEX))
    nMessageID := cMessageID
    
 tDataSistemaNomeArquivo := time("now" ,"%Y%m%d%H%M%S")

 load (0, build(sHOME,"/config/FM_wms_configuration.properties"), taPARAM)

        tToInfologPrefixFilename := taPARAM["ToInfologPrefixFilenameMAPED"]
 
    
    tCODACTConst := "001"
    nContadorLinhasEscritas  := 0
    
nMainIndex := 0




		
    	tDbBase			:= "FMWMS"
	tDbUsername		:= taPARAM["WMSDBUSER"]
	tDbPassword		:= taPARAM["WMSDBPASS"]
	tDbUrl			:= taPARAM["WMSDBURL"]
	
	

   
   	
    	tDbBase			:= "FMWMS"
	tDbUsername		:= taPARAM["WMSDBUSER"]
	tDbPassword		:= taPARAM["WMSDBPASS"]
	tDbUrl			:= taPARAM["WMSDBURL"]
	
	
	
bfSqlInit()
   if not bfSqlJdbc(tDbBase , tDbUsername,tDbPassword,tDbUrl) then
      print("FATAL ",tfSqlErrorStr())
      bfSqlClose(tDbBase)
	  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na abertura do banco de dados: ",tfSqlErrorStr()))
		
      exit(1)
   endif
   
   
   
   
   !faz copia para o sentinel
close(SYSLOG.a)
close(SYSLOG.l)
load(SYSLOG.l,taInfo)
close(SYSLOG.l)
if length(pEDISEND.ORIGINAL.NAME) > 0 then
	tFileOut := build(sHOME,"/ToAS2Proxy/",pEDISEND.ORIGINAL.NAME)
else
!	log(NL,"could not find pEDISEND.ORIGINAL.NAME on SYSLOG.l",NL)
!exit(1)
endif
!log("copying file to ",tFileOut,NL)
!copy(SYSLOG.a,tFileOut)
close(SYSLOG.a)
close(tFileOut)
   
   
   
   
   
   
   
   
   
   
   
endbegin

!===========================================================




line(1:"00.00")
 !  tCentroCusto := S_00HEADER_EDISIT
nContadorHEADERCPK := 0
endline

line(1:"41.00")
nResultadosQueryPEDIND := 0
nContadorRegisto := 0
tKAIREC := S_4100HEADER_KAIREC
tCODTRA := S_4100HEADER_CODTRA

tNumeroLoja := "00092"
       
tCODACTLido := S_4100HEADER_CODACT   
	tCODFOU  := S_4100HEADER_CODFOU 


	tPlacaVeiculo := substr(S_4100HEADER_REFREC,1,7)
	tRomaneio := peel(substr(S_4100HEADER_REFREC,8,18)," ")
	tNumeroDocumento := S_4100HEADER_REFREC
	
	tData := S_4100HEADER_DTRREC
	tHora := S_4100HEADER_HERREC

	nLinha := 0
	nConta4120 := 0
	nConta4130 := 0
	nConta4180 := 0
   

   
   tCODTRE := S_4100HEADER_CODTRE
   tNUMREC :=  S_4100HEADER_NUMREC
   
endline

line(1:"41.01")
	tDIPREC := S_4101TRANSACTION_DIPREC
endline

line(1:"41.02")
	tMsgrec4102 := build(S_GEEX4102_MSGREC)
endline

line(1:"41.20")


	nConta4120++ 
	taNUMOPE[nConta4120] := S_4120ORDERLINE_NUMOPE
	
	taNLIREC4120[nConta4120] := S_4120ORDERLINE_NLIREC
	taCODPRO4120[nConta4120] := S_4120ORDERLINE_CODPRO
	taUNICDE4120[nConta4120] := S_4120ORDERLINE_UNICDE
	taUVCREA4120[nConta4120] := S_4120ORDERLINE_UVCREA
	taUVCREC4120[nConta4120] := S_4120ORDERLINE_UVCREC
	taDATFVI4120[nConta4120] :=  S_4120ORDERLINE_DATFVI
	taUVCMVT4120[nConta4120] := "0"
	taUVCMVT4120Bloqueada[nConta4120] := "0"
	taUVCMVT4120SIS[nConta4120] := "0"
	taCODLOT4120[nConta4120] :=  S_4120ORDERLINE_CODLOT
	baProdutoSem4130[nConta4120] := TRUE
endline


line(1:"41.21")
	taDIPREC4121[nConta4120] := S_4121ORDERLINE_COMPLEMENT_DIPREC
endline


line(1:"41.30")
	baProdutoSem4130[nConta4120] := FALSE
	
	if S_4130ORDERLINE_DETAIL_MOTIMM = "AF" or  S_4130ORDERLINE_DETAIL_MOTIMM = "AT" then
		taUVCMVT4120[nConta4120] := build(number(taUVCMVT4120[nConta4120])+number(S_4130ORDERLINE_DETAIL_UVCMVT))
	endif
	
	if S_4130ORDERLINE_DETAIL_MOTIMM = "GB" or  S_4130ORDERLINE_DETAIL_MOTIMM = "NB" or  S_4130ORDERLINE_DETAIL_MOTIMM = "RW" or  S_4130ORDERLINE_DETAIL_MOTIMM = "NI" or  S_4130ORDERLINE_DETAIL_MOTIMM = "TB" then
		taUVCMVT4120Bloqueada[nConta4120] := build(number(taUVCMVT4120Bloqueada[nConta4120])+number(S_4130ORDERLINE_DETAIL_UVCMVT))
	endif
	
	
	if S_4130ORDERLINE_DETAIL_MOTIMM = "AC" or S_4130ORDERLINE_DETAIL_MOTIMM = "AF" or  S_4130ORDERLINE_DETAIL_MOTIMM = "AT" then
		taUVCMVT4120SIS[nConta4120] := build(number(taUVCMVT4120SIS[nConta4120])+number(S_4130ORDERLINE_DETAIL_UVCMVT))
	endif
	
	nConta4130++ 
	
	baProdutoDuplicado[nConta4130] := FALSE
	taNLIREC4130[nConta4130] := S_4130ORDERLINE_DETAIL_NLIREC
	taCODLOT4130[nConta4130] := S_4130ORDERLINE_DETAIL_CODLOT
	taCODPAL4130[nConta4130] := S_4130ORDERLINE_DETAIL_CODPAL
	taCODPRO4130[nConta4130] := S_4130ORDERLINE_DETAIL_CODPRO
	taUVCMVT4130[nConta4130] := S_4130ORDERLINE_DETAIL_UVCMVT
	taUVCMVT4130Consolidado[nConta4130] := S_4130ORDERLINE_DETAIL_UVCMVT
	
	
	taNUMOPE4130_do_4120[nConta4130] := taNUMOPE[nConta4120]
	taZONSTS4130[nConta4130] := S_4130ORDERLINE_DETAIL_ZONSTS
	taALLSTS4130[nConta4130] := S_4130ORDERLINE_DETAIL_ALLSTS
	taDPLSTS4130[nConta4130] := S_4130ORDERLINE_DETAIL_DPLSTS
	taNIVSTST4130[nConta4130] := S_4130ORDERLINE_DETAIL_NIVSTS
	taDATFVI4130[nConta4130] := S_4130ORDERLINE_DETAIL_DATFVI
 taUNICDE4130_do_4120[nConta4130] := taUNICDE4120[nConta4120]
	taUVCREA4130_do_4120[nConta4130] := taUVCREA4120[nConta4120]
			taUVCREC4130_do_4120[nConta4130] := taUVCREC4120[nConta4120]
	taMOTIMM4130[nConta4130] := S_4130ORDERLINE_DETAIL_MOTIMM
endline




line(1:"41.80")
	 

	tCodigoEmb := S_4180_PROEMB
	

endline




line(1:"41.99")
bFezHeader := FALSE
remove(taNumSerie)
split(tNumeroDocumento,taNumSerie,".")

tFileOutCSVDIVERS := build(sHOME,"/EmailsAEnviar/M41_CSV/Recebimento_",tNumeroDocumento,".csv")
			tFileOutTempCSVDIVERS := build(sHOME,"/EmailsAEnviar/M41_CSV/Temp/Recebimento_",tNumeroDocumento,".csv")
			tNameOutCSVDIVERS := build("Recebimento_",tNumeroDocumento,".csv")

			bEscreveuCSVDIVERS := FALSE
		
		
		nTotalProdutos := 0
		
	
	
	
	
	

		
		
		
		
		
		nMessageID := cMessageID
		tFileOut := build(sHOME,"/FMBR_AS2/FM",tToInfologPrefixFilename,tCODACTLido,"_MPSCONFREC_",tDIPREC,"_",tDataSistemaNomeArquivo,".txt")
		tFileOutTemp := build(sHOME,"/FMBR_AS2/Temp/FM",tToInfologPrefixFilename,tCODACTLido,"_MPSCONFREC_",tDIPREC,"_",tDataSistemaNomeArquivo,".txt")
		tNameOut := build("FM",tToInfologPrefixFilename,tCODACTLido,"_MPSCONFREC_",tDIPREC,"_",tDataSistemaNomeArquivo,".txt")

		  R_HeaderSIS_TIPODEREGISTRO("0")
		  R_HeaderSIS_CNPJORIGEM("053173310004160")
		  R_HeaderSIS_CNPJDESTINATARIO("002462805002045")
		  R_HeaderSIS_TIPORECEBIMENTO(tCODTRE)
		  R_HeaderSIS_DATARECEBIMENTO(tfConvertDate(tData, "YYYYMMDD" , "DDMMYYYY"))
		  !R_HeaderSIS_NUMEROBL(A)
		  R_HeaderSIS_COMPLHEADER("                                                                                          ")
		   flush(0,0,NL) >> tFileOutTemp
		
		
		   
		   
		   
		   
		   
		  R_HeaderNFSIS_Identificacaodoregistro("1")
		  !nPosicaoPonto := index(tNumeroDocumento,".")
		  
		  !tSerieDaNF := substr(tNumeroDocumento,nPosicaoPonto+2,length(tNumeroDocumento)-nPosicaoPonto-1)
		  !tNumeroDaNF := substr(tNumeroDocumento,1,nPosicaoPonto)
		  
		  tSerieDaNF := taNumSerie[2]
		 tNumeroDaNF :=  taNumSerie[1]
		  R_HeaderNFSIS_SeriedaNF(taNumSerie[2])
		  R_HeaderNFSIS_NumerodaNotaFiscal(build(number(taNumSerie[1]):R09))
		  R_HeaderNFSIS_NumerodoPedidodeCompra(taNumSerie[1])
		 ! R_HeaderNFSIS_COMPLHEADER2("a")
		 R_HeaderNFSIS_comnf(tCODFOU)
		 
		   flush(0,0,NL) >> tFileOutTemp
		
		 
		   
		   
		
		   
		   
		   nTempConta4120 := 1
		   while nTempConta4120 <= nConta4120 do
		   
				   
				   nContadorRegisto++
				   R_DetalheSIS_Identificacaodoregistro("2")
				   
				   
				   
				   

				   
				   
					   tQuery := 	build("SELECT CODPRO, NLIREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD WHERE NUMREC='",tNUMREC,"' AND CODPRO='",taCODPRO4120[nTempConta4120],"'")
			
			
						
						log("tQuery ",tQuery,NL)

											
						if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
									 print("FATAL ", tfSqlErrorStr())
									 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
									exit(1)
							
						endif

						if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
							 print("FATAL ", tfSqlErrorStr())
							  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
									exit(1)

						endif
						
						
						nContadorQue := 0
						bFazReplacePorNUmrec := FALSE
						while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
							log("NLIREC ",peel(taDb2Array["NLIREC"]," "),NL)
							log("CODPRO ",peel(taDb2Array["CODPRO"]," "),NL)
							if number(peel(taDb2Array["NLIREC"]," ")) = 0 then
								R_DetalheSIS_SequenciadoprodutonaNotaFiscal("")
								R_DetalheSIS_QuantidadedoprodutonaNF(build("0000000000000000000"))
							else
								R_DetalheSIS_SequenciadoprodutonaNotaFiscal(build(number(taNLIREC4120[nTempConta4120]):R06))
								R_DetalheSIS_QuantidadedoprodutonaNF(build("0000000000",number(taUVCREA4120[nTempConta4120]):R09))
							
							endif
							remove(taDb2Array)

						endwhile
					
					

					if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
						print("FATAL", tfSqlErrorStr())
						 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
								exit(1)
					endif
				   
				   
				   
				   
				   
				   
				   
				   !no select acima
				   
				   !R_DetalheSIS_SequenciadoprodutonaNotaFiscal(build(number(taNLIREC4120[nTempConta4120]):R06))
				   R_DetalheSIS_CodigodoSKU(taCODPRO4120[nTempConta4120])
				   R_DetalheSIS_Depositooustatusesperadonorecebimento(taDIPREC4121[nTempConta4120])
				   R_DetalheSIS_Codigodolotedefabricacaorecebido(taCODLOT4120[nTempConta4120])
				   if number(taDATFVI4120[nTempConta4120]) > 0 then
					R_DetalheSIS_Validadedolotedefabricacaodoproduto(tfConvertDate(taDATFVI4120[nTempConta4120], "YYYYMMDD" , "DDMMYYYY"))
				   endif
				   R_DetalheSIS_UnidadedeMedidadoproduto("PC") !taUNICDE4120[nTempConta4120])
				   !no select acima
				   !R_DetalheSIS_QuantidadedoprodutonaNF(build("0000000000",number(taUVCREA4120[nTempConta4120]):R09))
				   R_DetalheSIS_Quantidadeefetivamenterecebida(build("0000000000",number(taUVCREC4120[nTempConta4120]):R09))
				   R_DetalheSIS_QuantidadeAvariada(build("0000000000",number(taUVCMVT4120SIS[nTempConta4120]):R09))
				  ! R_DetalheSIS_QuantidadeBloqueada(build("0000000000",number(taUVCMVT4120Bloqueada[nTempConta4120]):R09))
				   
				   
				  
				   
				   flush(0,0,NL) >> tFileOutTemp
				   nTempConta4120++
		   endwhile
	   
	   
	   
		R_TraillerSIS_Identificacaodoregistro("9")
	   R_TraillerSIS_Totaldelinhasdodetalhe(build(nContadorRegisto:R03))
	   R_TraillerSIS_COMPLHEADER3("                                                                                                                                                   ")
	   flush(0,0,NL) >> tFileOutTemp
		
		
		
		
		
		
		
		
		
		




		bNaoGerarCSV := TRUE	
				
		
	 
		tQuery := 	build("SELECT NUMORI FROM FGE50FM",tToInfologPrefixFilename,".gerecd WHERE NUMREC='",tNUMREC,"'")
		
		
		
		log("tQuery ",tQuery,NL)

							
		if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
					 print("FATAL ", tfSqlErrorStr())
					 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
			
		endif

		if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
			 print("FATAL ", tfSqlErrorStr())
			  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)

		endif
		
		
		nContadorQue := 0
		bFazReplacePorNUmrec := FALSE
		while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
			if number(peel(taDb2Array["NUMORI"]," ")) = 0 then
				bFazReplacePorNUmrec := TRUE
				log("bFazReplacePorNUmrec := TRUE",NL)
			else
				bFazReplacePorNUmrec := FALSE
				log("bFazReplacePorNUmrec := FALSE",NL)
			
			endif
			remove(taDb2Array)

		endwhile
		
		

		if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
			print("FATAL", tfSqlErrorStr())
			 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
		endif
	 
		

	 
	 
		tQuery := 	build("SELECT DS1PRO FROM FGE50FM",tToInfologPrefixFilename,".GEPRO WHERE CODPRO='",taCODPRO4130[nTempConta4130],"' AND CODACT='",tCODACTLido,"'")

                  
                  
                  		tQuery := 	build("SELECT TRIM(RE.REFREC) REFREC ,RA.DOC_AGR ,TRIM(RE.CODTRA) CODTRA ,TRIM(RE.MSGREC1) MSGREC1 ,TRIM(RE.MSGREC2) MSGREC2 ,TRIM(RE.NOMTRA) NOMTRA "\
"      ,TRIM(RA.REF_AGR) REF_AGR ,TRIM(RE.DIPREC) DIPREC ,RE.CODTRE ,RE.DTRREC ,RE.HERREC ,RD.CODACT "\
"      ,RD.NLIREC ,TRIM(RD.CODPRO) CODPRO ,TRIM(RD.DS1PRO) DS1PRO ,TRIM(RD.CODLOT) CODLOT ,RD.MOTIMM ,RD.UNICDE  "\
"      ,CASE "\
"      WHEN RD.NLIREC=0 THEN 0 "\
"      ELSE RD.UVCREA "\
"      END UVCREA "\
"      ,CASE "\
"      WHEN RA.QTE = 1 THEN RD.UVCREC "\
"      WHEN RA.QTE > 1 THEN  "\
"      CASE "\
"      WHEN RD.UVCREC > RD.UVCREA AND NR.ORI<>RD.NUMREC THEN RD.UVCREA   "\
"      WHEN RD.UVCRLQ = RD.UVCREA THEN 0  "\
"      WHEN RD.UVCRLQ <> 0 THEN RD.UVCREA - RD.UVCRLQ  "\
"      WHEN NR.ORI=RD.NUMREC AND RA.UVC_REC > RA.UVC_AGR THEN (RD.UVCREA+RA.DIF)  "\
"      ELSE RD.UVCREA  "\
"      END "\
"      END UVCREC "\
"     ,CASE  "\
"      WHEN RA.QTE = 1 THEN RP.QTE_AVA "\
"      WHEN RA.QTE > 1 THEN "\
"      CASE  "\
"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0)) > RD.UVCREA THEN "\
"      CASE "\
"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA "\
"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_AVA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_AVA - RA.UVC_AGR)  "\
"      END  "\
"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0))  "\
"      END "\
"      END AVARIA "\
"     ,CASE  "\
"      WHEN RA.QTE = 1 THEN RP.QTE_QUA "\
"      WHEN RA.QTE > 1 THEN "\
"      CASE  "\
"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0)) > RD.UVCREA THEN "\
"      CASE "\
"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA "\
"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_QUA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_QUA - RA.UVC_AGR)  "\
"      END  "\
"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0))  "\
"      END "\
"      END QUALIDADE "\
"     ,CASE  "\
"      WHEN RD.ORICDE=1 THEN 'N' "\
"      WHEN RD.ORICDE=2 THEN 'S' "\
"      ELSE '' "\
"      END ITEM_SURPRESA "\
"FROM        FGE50FM",tToInfologPrefixFilename,".GERECE RE  "\
"LEFT JOIN   FGE50FM",tToInfologPrefixFilename,".GERECD RD ON RE.NUMREC=RD.NUMREC AND RE.CODACT=RD.CODACT "\
"LEFT JOIN  ( "\
"           SELECT PRO, ACT, SUM(QTE_AVA) QTE_AVA , SUM(QTE_QUA) QTE_QUA "\
"           FROM "\
"           ( "\
"           SELECT TRIM(P.CODPRO) PRO "\
"               ,CASE WHEN P.MOTIMM IN ('AT','AC', 'AE','AM','AP','DC','DE','DM','DP') THEN P.UVCMVT ELSE 0 END QTE_AVA "\
"               ,'0' QTE_QUA, CODACT ACT "\
"           FROM FGE50FM",tToInfologPrefixFilename,".GERECP P "\
"           WHERE P.NUMREC = (SELECT DISTINCT X.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD X WHERE X.NUMORI='",tNUMREC,"') "\
"           UNION ALL "\
"           SELECT TRIM(P.CODPRO) PRO ,'0' QTE_AVA "\
"               ,CASE WHEN P.MOTIMM IN ('AQ','DQ','CQ') THEN P.UVCMVT ELSE 0 END QTE_QUA, CODACT ACT "\
"           FROM FGE50FM",tToInfologPrefixFilename,".GERECP P "\
"           WHERE P.NUMREC = (SELECT DISTINCT X.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD X WHERE X.NUMORI='",tNUMREC,"') "\
"           ) "\
"           GROUP BY PRO, ACT ORDER BY 1 "\
"           ) RP  "\
"ON  RP.ACT=RD.CODACT AND RP.PRO=RD.CODPRO AND RP.ACT=RE.CODACT "\
"LEFT JOIN ( "\
"          SELECT  TRIM(C.REFREC) REF_AGR ,B.CODACT ACT_AGR "\
"                 ,TRIM(B.CODPRO) PRO ,C.KAIREC DOC_AGR "\
"                 ,SUM(B.UVCREA) UVC_AGR "\
"                 ,SUM(B.UVCREC) UVC_REC "\
"                 ,(SUM(B.UVCREC)-SUM(B.UVCREA)) DIF "\
"                 ,COUNT (B.CODPRO) QTE "\
"          FROM FGE50FM",tToInfologPrefixFilename,".GERECD B, FGE50FM",tToInfologPrefixFilename,".GERECE C "\
"          WHERE B.NUMREC=C.NUMREC  "\
"          AND B.NUMREC = (SELECT DISTINCT A.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD A WHERE A.NUMORI='",tNUMREC,"') "\
"          GROUP BY  C.REFREC ,B.CODACT ,B.CODPRO ,C.KAIREC "\
"          ORDER BY 1 "\
"          ) RA  "\
"ON RA.ACT_AGR=RE.CODACT AND RA.ACT_AGR=RD.CODACT AND RA.PRO = RD.CODPRO AND RA.ACT_AGR=RP.ACT AND RA.PRO=RP.PRO "\
"LEFT JOIN ( "\
"          SELECT MAX(Z.NUMORI) ORI, Z.CODACT ACT FROM FGE50FM",tToInfologPrefixFilename,".GERECD Z  "\
"          WHERE Z.NUMREC=(SELECT DISTINCT W.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD W WHERE W.NUMORI='",tNUMREC,"') "\
"          GROUP BY Z.CODACT "\
"          ) NR "\
"ON RE.CODACT=NR.ACT AND RD.CODACT=NR.ACT AND RP.ACT=NR.ACT AND RA.ACT_AGR=NR.ACT  "\
"WHERE RE.NUMREC='",tNUMREC,"' "\
"GROUP BY RE.REFREC ,RA.DOC_AGR ,RE.CODTRA ,RE.MSGREC1 ,RE.MSGREC2 "\
"        ,RE.NOMTRA ,RA.REF_AGR ,RE.DIPREC ,RE.CODTRE  ,RE.DTRREC "\
"        ,RE.HERREC ,RD.CODACT ,RD.NLIREC ,RD.CODPRO ,RD.DS1PRO "\
"        ,RD.CODLOT ,RD.MOTIMM ,RD.UNICDE ,RD.UVCREC ,RD.UVCREA "\
"        ,RD.UVCRLQ ,RA.DIF ,RA.QTE, RP.QTE_AVA, RP.QTE_QUA, RD.ORICDE, NR.ORI, RD.NUMREC, RA.UVC_REC, RA.UVC_AGR, RA.PRO "\
"ORDER BY 1, 14    ") 










tQuery := 	build("SELECT TRIM(RE.REFREC) REFREC ,RA.DOC_AGR ,TRIM(RE.CODTRA) CODTRA ,TRIM(RE.MSGREC1) MSGREC1 ,TRIM(RE.MSGREC2) MSGREC2 ,TRIM(RE.NOMTRA) NOMTRA  "\
"      ,TRIM(RA.REF_AGR) REF_AGR ,TRIM(RE.DIPREC) DIPREC ,RE.CODTRE ,RE.DTRREC ,RE.HERREC ,RD.CODACT "\
"      ,RD.NLIREC ,TRIM(RD.CODPRO) CODPRO ,TRIM(RD.DS1PRO) DS1PRO ,TRIM(RD.CODLOT) CODLOT ,RD.MOTIMM ,RD.UNICDE   "\
"      ,CASE "\
"      WHEN RD.NLIREC=0 THEN 0  "\
"      ELSE RD.UVCREA "\
"      END UVCREA  "\
"      ,CASE "\
"      WHEN RA.QTE = 1 THEN RD.UVCREC "\
"      WHEN RA.QTE IS NULL THEN RD.UVCREC"\
"      WHEN RA.QTE > 1 THEN   "\
"      CASE "\
"      WHEN RD.UVCREC > RD.UVCREA AND NR.ORI<>RD.NUMREC THEN RD.UVCREA    "\
"      WHEN RD.UVCRLQ = RD.UVCREA THEN 0  "\
"      WHEN RD.UVCRLQ <> 0 THEN RD.UVCREA - RD.UVCRLQ   "\
"      WHEN NR.ORI=RD.NUMREC AND RA.UVC_REC > RA.UVC_AGR THEN (RD.UVCREA+RA.DIF)  "\
"      ELSE RD.UVCREA   "\
"      END "\
"      END UVCREC  "\
"     ,CASE  "\
"      WHEN RA.QTE = 1 THEN RP.QTE_AVA "\
"      WHEN RA.QTE IS NULL THEN RP.QTE_AVA"\
"      WHEN RA.QTE > 1 THEN  "\
"      CASE  "\
"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0)) > RD.UVCREA THEN  "\
"      CASE "\
"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA  "\
"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_AVA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_AVA - RA.UVC_AGR)  "\
"      END   "\
"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0))  "\
"      END  "\
"      END AVARIA "\
"     ,CASE   "\
"      WHEN RA.QTE = 1 THEN RP.QTE_QUA"\
"      WHEN RA.QTE IS NULL THEN RP.QTE_QUA "\
"      WHEN RA.QTE > 1 THEN "\
"      CASE   "\
"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0)) > RD.UVCREA THEN "\
"      CASE  "\
"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA "\
"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_QUA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_QUA - RA.UVC_AGR)   "\
"      END  "\
"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0))   "\
"      END "\
"      END QUALIDADE  "\
"     ,CASE  "\
"      WHEN RD.ORICDE=1 THEN 'N'  "\
"      WHEN RD.ORICDE=2 THEN 'S' "\
"      ELSE ''  "\
"      END ITEM_SURPRESA "\
"FROM        FGE50FM",tToInfologPrefixFilename,".GERECE RE   "\
"LEFT JOIN   FGE50FM",tToInfologPrefixFilename,".GERECD RD ON RE.NUMREC=RD.NUMREC AND RE.CODACT=RD.CODACT "\
"LEFT JOIN  (  "\
"           SELECT PRO, ACT, SUM(QTE_AVA) QTE_AVA , SUM(QTE_QUA) QTE_QUA "\
"           FROM  "\
"           ( "\
"           SELECT TRIM(P.CODPRO) PRO  "\
"               ,CASE WHEN P.MOTIMM IN ('AT','AC', 'AE','AM','AP','DC','DE','DM','DP') THEN P.UVCMVT ELSE 0 END QTE_AVA "\
"               ,'0' QTE_QUA, CODACT ACT  "\
"           FROM FGE50FM",tToInfologPrefixFilename,".GERECP P "\
"           WHERE P.NUMREC = (SELECT DISTINCT X.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD X WHERE X.NUMORI='",tNUMREC,"')  "\
"           UNION ALL "\
"           SELECT TRIM(P.CODPRO) PRO ,'0' QTE_AVA  "\
"               ,CASE WHEN P.MOTIMM IN ('AQ','DQ','CQ') THEN P.UVCMVT ELSE 0 END QTE_QUA, CODACT ACT "\
"           FROM FGE50FM",tToInfologPrefixFilename,".GERECP P  "\
"           WHERE P.NUMREC = (SELECT DISTINCT X.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD X WHERE X.NUMORI='",tNUMREC,"') "\
"           )  "\
"           GROUP BY PRO, ACT ORDER BY 1 "\
"           ) RP   "\
"ON  RP.ACT=RD.CODACT AND RP.PRO=RD.CODPRO AND RP.ACT=RE.CODACT "\
"LEFT JOIN (  "\
"          SELECT  TRIM(C.REFREC) REF_AGR ,B.CODACT ACT_AGR "\
"                 ,TRIM(B.CODPRO) PRO ,C.KAIREC DOC_AGR  "\
"                 ,SUM(B.UVCREA) UVC_AGR "\
"                 ,SUM(B.UVCREC) UVC_REC  "\
"                 ,(SUM(B.UVCREC)-SUM(B.UVCREA)) DIF "\
"                 ,COUNT (B.CODPRO) QTE  "\
"          FROM FGE50FM",tToInfologPrefixFilename,".GERECD B, FGE50FM",tToInfologPrefixFilename,".GERECE C "\
"          WHERE B.NUMREC=C.NUMREC   "\
"          AND B.NUMREC = (SELECT DISTINCT A.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD A WHERE A.NUMORI='",tNUMREC,"') "\
"          GROUP BY  C.REFREC ,B.CODACT ,B.CODPRO ,C.KAIREC  "\
"          ORDER BY 1 "\
"          ) RA   "\
"ON RA.ACT_AGR=RE.CODACT AND RA.ACT_AGR=RD.CODACT AND RA.PRO = RD.CODPRO AND RA.ACT_AGR=RP.ACT AND RA.PRO=RP.PRO "\
"LEFT JOIN (  "\
"          SELECT MAX(Z.NUMORI) ORI, Z.CODACT ACT FROM FGE50FM",tToInfologPrefixFilename,".GERECD Z  "\
"          WHERE Z.NUMREC=(SELECT DISTINCT W.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD W WHERE W.NUMORI='",tNUMREC,"')  "\
"          GROUP BY Z.CODACT "\
"          ) NR  "\
"ON RE.CODACT=NR.ACT AND RD.CODACT=NR.ACT AND RP.ACT=NR.ACT AND RA.ACT_AGR=NR.ACT  "\
"WHERE RE.NUMREC='",tNUMREC,"'  "\
"GROUP BY RE.REFREC ,RA.DOC_AGR ,RE.CODTRA ,RE.MSGREC1 ,RE.MSGREC2 "\
"        ,RE.NOMTRA ,RA.REF_AGR ,RE.DIPREC ,RE.CODTRE  ,RE.DTRREC  "\
"        ,RE.HERREC ,RD.CODACT ,RD.NLIREC ,RD.CODPRO ,RD.DS1PRO "\
"        ,RD.CODLOT ,RD.MOTIMM ,RD.UNICDE ,RD.UVCREC ,RD.UVCREA  "\
"        ,RD.UVCRLQ ,RA.DIF ,RA.QTE, RP.QTE_AVA, RP.QTE_QUA, RD.ORICDE, NR.ORI, RD.NUMREC, RA.UVC_REC, RA.UVC_AGR, RA.PRO "\
"ORDER BY 1, 14 ")

if bFazReplacePorNUmrec = FALSE then

	tQuery := 	build("SELECT TRIM(RE.REFREC) REFREC ,RA.DOC_AGR ,TRIM(RE.CODTRA) CODTRA ,TRIM(RE.MSGREC1) MSGREC1 ,TRIM(RE.MSGREC2) MSGREC2 ,TRIM(RE.NOMTRA) NOMTRA   "\
	"      ,TRIM(RA.REF_AGR) REF_AGR ,TRIM(RE.DIPREC) DIPREC ,RE.CODTRE ,RE.DTRREC ,RE.HERREC ,RD.CODACT   "\
	"      ,RD.NLIREC ,TRIM(RD.CODPRO) CODPRO ,TRIM(RD.DS1PRO) DS1PRO ,RD.UNICDE    "\
	"      ,CASE   "\
	"      WHEN RD.NLIREC=0 THEN 0   "\
	"      ELSE RD.UVCREA   "\
	"      END UVCREA   "\
	"      ,CASE   "\
	"      WHEN RA.QTE = 1 THEN RD.UVCREC   "\
	"      WHEN RA.QTE IS NULL THEN RD.UVCREC  "\
	"      WHEN RA.QTE > 1 THEN    "\
	"      CASE   "\
	"      WHEN RD.UVCREC > RD.UVCREA AND NR.ORI<>RD.NUMREC THEN RD.UVCREA     "\
	"      WHEN RD.UVCRLQ = RD.UVCREA THEN 0    "\
	"      WHEN RD.UVCRLQ <> 0 THEN RD.UVCREA - RD.UVCRLQ    "\
	"      WHEN NR.ORI=RD.NUMREC AND RA.UVC_REC > RA.UVC_AGR THEN (RD.UVCREA+RA.DIF)    "\
	"      ELSE RD.UVCREA    "\
	"      END   "\
	"      END UVCREC   "\
	"     ,CASE    "\
	"      WHEN RA.QTE = 1 THEN RP.QTE_AVA   "\
	"      WHEN RA.QTE > 1 THEN   "\
	"      CASE    "\
	"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0)) > RD.UVCREA THEN   "\
	"      CASE   "\
	"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA   "\
	"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_AVA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_AVA - RA.UVC_AGR)    "\
	"      END    "\
	"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0))    "\
	"      END   "\
	"      END AVARIA   "\
	"     ,CASE    "\
	"      WHEN RA.QTE = 1 THEN RP.QTE_QUA   "\
	"      WHEN RA.QTE > 1 THEN   "\
	"      CASE    "\
	"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0)) > RD.UVCREA THEN   "\
	"      CASE   "\
	"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA   "\
	"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_QUA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_QUA - RA.UVC_AGR)    "\
	"      END    "\
	"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0))    "\
	"      END   "\
	"      END QUALIDADE   "\
	"     ,CASE    "\
	"      WHEN RD.ORICDE=1 THEN 'N'   "\
	"      WHEN RD.ORICDE=2 THEN 'S'   "\
	"      ELSE ''   "\
	"      END ITEM_SURPRESA   "\
	"FROM        FGE50FM",tToInfologPrefixFilename,".GERECE RE    "\
	"LEFT JOIN   FGE50FM",tToInfologPrefixFilename,".GERECD RD ON RE.NUMREC=RD.NUMREC AND RE.CODACT=RD.CODACT   "\
	"LEFT JOIN  (   "\
	"           SELECT P.CODPRO PRO,CODACT ACT,MOTIMM  "\
	"               ,SUM(CASE WHEN P.MOTIMM IN ('AT','AC', 'AE','AM','AP','DC','DE','DM','DP') THEN P.UVCMVT ELSE 0 END) QTE_AVA   "\
	"               ,SUM(CASE WHEN P.MOTIMM IN('AQ','DQ','CQ') THEN P.UVCMVT ELSE 0 END) QTE_QUA  "\
	"           FROM FGE50FM",tToInfologPrefixFilename,".GERECP P   "\
	"           WHERE P.NUMREC = (SELECT DISTINCT X.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD X WHERE X.NUMORI='",tNUMREC,"')   "\
	"           GROUP BY CODPRO, CODACT, MOTIMM ORDER BY 1) RP    "\
	"ON  RP.ACT=RD.CODACT AND RP.PRO=RD.CODPRO AND RP.ACT=RE.CODACT   "\
	"LEFT JOIN (   "\
	"          SELECT  TRIM(C.REFREC) REF_AGR ,B.CODACT ACT_AGR   "\
	"                 ,TRIM(B.CODPRO) PRO ,C.KAIREC DOC_AGR   "\
	"                 ,SUM(B.UVCREA) UVC_AGR   "\
	"                 ,SUM(B.UVCREC) UVC_REC   "\
	"                 ,(SUM(B.UVCREC)-SUM(B.UVCREA)) DIF   "\
	"                 ,COUNT (B.CODPRO) QTE   "\
	"          FROM FGE50FM",tToInfologPrefixFilename,".GERECD B, FGE50FM",tToInfologPrefixFilename,".GERECE C   "\
	"          WHERE B.NUMREC=C.NUMREC    "\
	"          AND B.NUMREC = (SELECT DISTINCT A.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD A WHERE A.NUMORI='",tNUMREC,"')   "\
	"          GROUP BY  C.REFREC ,B.CODACT ,B.CODPRO ,C.KAIREC   "\
	"          ORDER BY 1   "\
	"          ) RA    "\
	"ON RA.ACT_AGR=RE.CODACT AND RA.ACT_AGR=RD.CODACT AND RA.PRO = RD.CODPRO AND RA.ACT_AGR=RP.ACT AND RA.PRO=RP.PRO   "\
	"LEFT JOIN (    "\
	"          SELECT MAX(Z.NUMORI) ORI, Z.CODACT ACT FROM FGE50FM",tToInfologPrefixFilename,".GERECD Z     "\
	"          WHERE Z.NUMREC=(SELECT DISTINCT W.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD W WHERE W.NUMORI='",tNUMREC,"')    "\
	"          GROUP BY Z.CODACT    "\
	"          ) NR    "\
	"ON RE.CODACT=NR.ACT AND RD.CODACT=NR.ACT AND RP.ACT=NR.ACT AND RA.ACT_AGR=NR.ACT     "\
	"WHERE RE.NUMREC='",tNUMREC,"'  "\
	"GROUP BY RE.REFREC ,RA.DOC_AGR ,RE.CODTRA ,RE.MSGREC1 ,RE.MSGREC2    "\
	"        ,RE.NOMTRA ,RA.REF_AGR ,RE.DIPREC ,RE.CODTRE  ,RE.DTRREC     "\
	"        ,RE.HERREC ,RD.CODACT ,RD.NLIREC ,RD.CODPRO ,RD.DS1PRO     "\
	"        ,RD.UNICDE ,RD.UVCREC ,RD.UVCREA     "\
	"        ,RD.UVCRLQ ,RA.DIF ,RA.QTE, RP.QTE_AVA, RP.QTE_QUA, RD.ORICDE, NR.ORI, RD.NUMREC, RA.UVC_REC, RA.UVC_AGR, RA.PRO     "\
	"ORDER BY 1, 14") 
else

	tQuery := 	build("SELECT TRIM(RE.REFREC) REFREC ,RA.DOC_AGR ,TRIM(RE.CODTRA) CODTRA ,TRIM(RE.MSGREC1) MSGREC1 ,TRIM(RE.MSGREC2) MSGREC2 ,TRIM(RE.NOMTRA) NOMTRA   "\
	"      ,TRIM(RA.REF_AGR) REF_AGR ,TRIM(RE.DIPREC) DIPREC ,RE.CODTRE ,RE.DTRREC ,RE.HERREC ,RD.CODACT   "\
	"      ,RD.NLIREC ,TRIM(RD.CODPRO) CODPRO ,TRIM(RD.DS1PRO) DS1PRO ,RD.UNICDE    "\
	"      ,CASE   "\
	"      WHEN RD.NLIREC=0 THEN 0   "\
	"      ELSE RD.UVCREA   "\
	"      END UVCREA   "\
	"      ,CASE   "\
	"      WHEN RA.QTE = 1 THEN RD.UVCREC   "\
	"      WHEN RA.QTE IS NULL THEN RD.UVCREC  "\
	"      WHEN RA.QTE > 1 THEN    "\
	"      CASE   "\
	"      WHEN RD.UVCREC > RD.UVCREA AND NR.ORI<>RD.NUMREC THEN RD.UVCREA     "\
	"      WHEN RD.UVCRLQ = RD.UVCREA THEN 0    "\
	"      WHEN RD.UVCRLQ <> 0 THEN RD.UVCREA - RD.UVCRLQ    "\
	"      WHEN NR.ORI=RD.NUMREC AND RA.UVC_REC > RA.UVC_AGR THEN (RD.UVCREA+RA.DIF)    "\
	"      ELSE RD.UVCREA    "\
	"      END   "\
	"      END UVCREC   "\
	"     ,CASE    "\
	"      WHEN RA.QTE = 1 THEN RP.QTE_AVA   "\
	"      WHEN RA.QTE > 1 THEN   "\
	"      CASE    "\
	"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0)) > RD.UVCREA THEN   "\
	"      CASE   "\
	"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA   "\
	"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_AVA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_AVA - RA.UVC_AGR)    "\
	"      END    "\
	"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_AVA,0))    "\
	"      END   "\
	"      END AVARIA   "\
	"     ,CASE    "\
	"      WHEN RA.QTE = 1 THEN RP.QTE_QUA   "\
	"      WHEN RA.QTE > 1 THEN   "\
	"      CASE    "\
	"      WHEN INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0)) > RD.UVCREA THEN   "\
	"      CASE   "\
	"      WHEN RD.NUMREC <> NR.ORI THEN RD.UVCREA   "\
	"      WHEN RD.NUMREC = NR.ORI AND RP.QTE_QUA > RA.UVC_AGR THEN RD.UVCREA + (RP.QTE_QUA - RA.UVC_AGR)    "\
	"      END    "\
	"      ELSE INTEGER(ROUND((RD.UVCREA/RA.UVC_AGR)* RP.QTE_QUA,0))    "\
	"      END   "\
	"      END QUALIDADE   "\
	"     ,CASE    "\
	"      WHEN RD.ORICDE=1 THEN 'N'   "\
	"      WHEN RD.ORICDE=2 THEN 'S'   "\
	"      ELSE ''   "\
	"      END ITEM_SURPRESA   "\
	"FROM        FGE50FM",tToInfologPrefixFilename,".GERECE RE    "\
	"LEFT JOIN   FGE50FM",tToInfologPrefixFilename,".GERECD RD ON RE.NUMREC=RD.NUMREC AND RE.CODACT=RD.CODACT   "\
	"LEFT JOIN  (   "\
	"           SELECT P.CODPRO PRO,CODACT ACT,MOTIMM  "\
	"               ,SUM(CASE WHEN P.MOTIMM IN ('AT','AC', 'AE','AM','AP','DC','DE','DM','DP') THEN P.UVCMVT ELSE 0 END) QTE_AVA   "\
	"               ,SUM(CASE WHEN P.MOTIMM IN('AQ','DQ','CQ') THEN P.UVCMVT ELSE 0 END) QTE_QUA  "\
	"           FROM FGE50FM",tToInfologPrefixFilename,".GERECP P   "\
	"           WHERE P.NUMREC = (SELECT DISTINCT X.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD X WHERE X.NUMREC='",tNUMREC,"')   "\
	"           GROUP BY CODPRO, CODACT, MOTIMM ORDER BY 1) RP    "\
	"ON  RP.ACT=RD.CODACT AND RP.PRO=RD.CODPRO AND RP.ACT=RE.CODACT   "\
	"LEFT JOIN (   "\
	"          SELECT  TRIM(C.REFREC) REF_AGR ,B.CODACT ACT_AGR   "\
	"                 ,TRIM(B.CODPRO) PRO ,C.KAIREC DOC_AGR   "\
	"                 ,SUM(B.UVCREA) UVC_AGR   "\
	"                 ,SUM(B.UVCREC) UVC_REC   "\
	"                 ,(SUM(B.UVCREC)-SUM(B.UVCREA)) DIF   "\
	"                 ,COUNT (B.CODPRO) QTE   "\
	"          FROM FGE50FM",tToInfologPrefixFilename,".GERECD B, FGE50FM",tToInfologPrefixFilename,".GERECE C   "\
	"          WHERE B.NUMREC=C.NUMREC    "\
	"          AND B.NUMREC = (SELECT DISTINCT A.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD A WHERE A.NUMREC='",tNUMREC,"')   "\
	"          GROUP BY  C.REFREC ,B.CODACT ,B.CODPRO ,C.KAIREC   "\
	"          ORDER BY 1   "\
	"          ) RA    "\
	"ON RA.ACT_AGR=RE.CODACT AND RA.ACT_AGR=RD.CODACT AND RA.PRO = RD.CODPRO AND RA.ACT_AGR=RP.ACT AND RA.PRO=RP.PRO   "\
	"LEFT JOIN (    "\
	"          SELECT MAX(Z.NUMREC) ORI, Z.CODACT ACT FROM FGE50FM",tToInfologPrefixFilename,".GERECD Z     "\
	"          WHERE Z.NUMREC=(SELECT DISTINCT W.NUMREC FROM FGE50FM",tToInfologPrefixFilename,".GERECD W WHERE W.NUMREC='",tNUMREC,"')    "\
	"          GROUP BY Z.CODACT    "\
	"          ) NR    "\
	"ON RE.CODACT=NR.ACT AND RD.CODACT=NR.ACT AND RP.ACT=NR.ACT AND RA.ACT_AGR=NR.ACT     "\
	"WHERE RE.NUMREC='",tNUMREC,"'  "\
	"GROUP BY RE.REFREC ,RA.DOC_AGR ,RE.CODTRA ,RE.MSGREC1 ,RE.MSGREC2    "\
	"        ,RE.NOMTRA ,RA.REF_AGR ,RE.DIPREC ,RE.CODTRE  ,RE.DTRREC     "\
	"        ,RE.HERREC ,RD.CODACT ,RD.NLIREC ,RD.CODPRO ,RD.DS1PRO     "\
	"        ,RD.UNICDE ,RD.UVCREC ,RD.UVCREA     "\
	"        ,RD.UVCRLQ ,RA.DIF ,RA.QTE, RP.QTE_AVA, RP.QTE_QUA, RD.ORICDE, NR.ORI, RD.NUMREC, RA.UVC_REC, RA.UVC_AGR, RA.PRO     "\
	"ORDER BY 1, 14") 
endif




log("tQuery ",tQuery,NL)

							
		if bfSqlSet( tDbBase ,"SELECTdb2"  , tQuery) = FALSE then
					 print("FATAL ", tfSqlErrorStr())
					 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
			
		endif

		if bfSqlOpen( tDbBase , "SELECTdb2" ) = FALSE then
			 print("FATAL ", tfSqlErrorStr())
			  bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)

		endif
		
		
		nContadorQue := 0
		while bfSqlFetchArray( tDbBase , "SELECTdb2" ,taDb2Array) = TRUE do
		
			nContadorQue++
			!tDS1PROQueryCSVPalete := 
			R_M41CsvDiversReg_NF(peel(taDb2Array["REFREC"]," "))
			R_M41CsvDiversReg_Doca(peel(taDb2Array["DOC_AGR"]," "))
			R_M41CsvDiversReg_Transportadora(peel(taDb2Array["CODTRA"]," "))
			R_M41CsvDiversReg_Placa(build(peel(taDb2Array["MSGREC1"]," ")," ",peel(taDb2Array["MSGREC2"]," ")))
			R_M41CsvDiversReg_Motorista(peel(taDb2Array["NOMTRA"]," "))
			R_M41CsvDiversReg_BL(peel(taDb2Array["REF_AGR"]," "))
			R_M41CsvDiversReg_Carga(peel(taDb2Array["DIPREC"]," "))
			R_M41CsvDiversReg_Operacao(peel(taDb2Array["CODTRE"]," "))
			R_M41CsvDiversReg_Data(tfConvertDate(build(peel(taDb2Array["DTRREC"]," "),peel(taDb2Array["HERREC"]," "),"00"),"YYYYMMDDHHMMSS","DD/MM/AAAA - HH:MM:SS")) !converter para "DD/MM/AAAA - HH:MM:SS"
			R_M41CsvDiversReg_Cliente(peel(taDb2Array["CODACT"]," "))
						
						
							
						
						
						
						
						R_M41CsvDiversReg_Sequencia(peel(taDb2Array["NLIREC"]," "))
						R_M41CsvDiversReg_SKU(peel(taDb2Array["CODPRO"]," "))
						
						
							
						
						
						R_M41CsvDiversReg_Descricao(peel(taDb2Array["DS1PRO"]," ")) 
						R_M41CsvDiversReg_Lote(peel(taDb2Array["CODLOT"]," "))
						
						
						!R_M41CsvDiversReg_Palete(taCODPAL4130[nTempConta4130])
						R_M41CsvDiversReg_STATUSIMO(peel(taDb2Array["MOTIMM"]," "))
						
						R_M41CsvDiversReg_Unidade(peel(taDb2Array["UNICDE"]," "))
						R_M41CsvDiversReg_QtdFiscal(peel(taDb2Array["UVCREA"]," "))
						
						R_M41CsvDiversReg_QtdRecebida(peel(taDb2Array["UVCREC"]," "))
						
					
						R_M41CsvDiversReg_Quantidade_IMO_Avaria(peel(taDb2Array["AVARIA"]," "))
							
						
						
						
						R_M41CsvDiversReg_Qtd_IMO_Qualidade(peel(taDb2Array["QUALIDADE"]," "))
							
						
						
						tITEM_SURPRESACSVPalete := peel(taDb2Array["ITEM_SURPRESA"]," ")
						
						
						
						
						
						
						
						
						
						if nContadorQue = 1 then
								print("NF;Doca;Transportadora;Placa;Motorista;BL;Carga;Operacao;Data;Cliente;Sequencia;SKU;Descricao;Lote;Palete;\"Status (IMO)\";Unidade;\"Quantidade Fiscal\";\"Quantidade Recebida\";\"Quantidade IMO Avaria\";\"Quantidade IMO Qualidade\";\"Item Surpresa\"", NL) >> tFileOutTempCSVDIVERS
						 
						endif
						
						
						if number(peel(taDb2Array["AVARIA"]," ")) > 0  or number(peel(taDb2Array["QUALIDADE"]," ")) > 0  \
					   or (number(peel(taDb2Array["UVCREC"]," ")) <> number(peel(taDb2Array["UVCREA"]," "))) or tITEM_SURPRESACSVPalete = "S" then
						
							print(taM41CsvDiversReg[1],";",taM41CsvDiversReg[2],";",taM41CsvDiversReg[3] \
									,";",taM41CsvDiversReg[4],";",taM41CsvDiversReg[5],";",taM41CsvDiversReg[ \
									6],";",taM41CsvDiversReg[7],";",taM41CsvDiversReg[8],";", \
									taM41CsvDiversReg[9],";",taM41CsvDiversReg[10],";",taM41CsvDiversReg[11],";", \
									taM41CsvDiversReg[12],";",taM41CsvDiversReg[13],";",taM41CsvDiversReg[ \
									14],";",taM41CsvDiversReg[15],";",taM41CsvDiversReg[16],";", \
									taM41CsvDiversReg[17],";",taM41CsvDiversReg[18],";",taM41CsvDiversReg[19],";", \
									taM41CsvDiversReg[20],";",taM41CsvDiversReg[21],";",tITEM_SURPRESACSVPalete,";", NL) >> tFileOutTempCSVDIVERS
							 remove(taM41CsvDiversReg)
							bNaoGerarCSV := FALSE
						endif
						
						
						
						
		
			remove(taDb2Array)

		endwhile
		
		

		if bfSqlFree( tDbBase , "SELECTdb2"  ) = FALSE then
			print("FATAL", tfSqlErrorStr())
			 bfMajtrace("Erro de Traducao","1",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos",build("Erro na execucao da query ",tQuery," do banco de dados: ",tfSqlErrorStr()))
					exit(1)
		endif
	 
	 
	 
	 
	 
	 
				
				
				
				
				!CSV
		

			
			
					
					
					
					
					
					
			
			
					if bNaoGerarCSV = TRUE then
						close(tFileOutTempCSVDIVERS)
						remove(tFileOutTempCSVDIVERS)
					else
					
			
						close(tFileOutTempCSVDIVERS)
						copy(tFileOutTempCSVDIVERS,tFileOutCSVDIVERS)
						close(tFileOutTempCSVDIVERS)
						remove(tFileOutTempCSVDIVERS)
						close(tFileOutCSVDIVERS)
					
					
					
					
						fmbrasil_confrec_email_divers := find(build(sHOME,"/fmbrasil_confrec_email_divers"),CODACT=tCODACTLido)
						while valid(fmbrasil_confrec_email_divers) do
						
						
							tSubjectEmail := build(replace(fmbrasil_confrec_email_divers.BEGINSUBJ," ",""),"_",tNameOutCSVDIVERS) 
							tCmdEmailErro := build("edisend EMAIL.SUBJECT=\"",tSubjectEmail,"\" EMAIL.NAME=",tNameOutCSVDIVERS," EMAIL.RCPT=",replace(replace(fmbrasil_confrec_email_divers.TOEMAIL," ",""),";",",")," MailM41DIVERS ",tFileOutCSVDIVERS)
							
							log("executing command ",tCmdEmailErro,NL)
							nRet := system(tCmdEmailErro)
				
							fmbrasil_confrec_email_divers := find()
						
						endwhile
					endif


		
				
				
				
				bfMajtrace("Recebida","0",tNumeroDocumento,tDataDocumento,tFileInput,tFileOut,"Produtos","")
		
		
		

		close(tFileOutTemp)
		copy(tFileOutTemp,tFileOut)
			close(tFileOutTemp)
			remove(tFileOutTemp)
				close(tFileOut)
				
				
				
				
				
				
				
				
				
				
				
				
				
				
	
   
   
	

		

	
		
		
		



endline

!===========================================================

! Default statements section
default

enddefault

!===========================================================

! End statements section

end

		


bfSqlClose(tDbBase)

	exit(0)
endend

!===========================================================


!===========================================================



function bfMajtrace(tStatus,tError,tNumDoc,tDataDoc,tInput,tFileOut,tTipoDocumento,tMensagemErrro)
   TRACE:=new(build(sHOME,"/trace"))
   TRACE.ESTADO := tStatus
   TRACE.ERRO := tError
   TRACE.DATATRADUCAO := time("now","%Y-%m-%dT%H:%M:%S")
   TRACE.MENSAGEM := tTipoDocumento

   TRACE.PERFIL := "MAPED"
   TRACE.SENTIDO := "O"
   TRACE.MENSAGEM := "CONFIRMACAO DE RECEBIMENTO"
   TRACE.NUMDOC := tNumeroDocumento
   TRACE.DATDOC := time("now","%Y-%m-%d")
   TRACE.MESSAGEID := build(nMessageID:R010)

    TRACE.REDE := pEDISEND.ORIGINAL.NAME
TRACE.SYSLOG_INDEX := build(SYSLOG.INDEX)
 TRACE.FICHEIROSAIDA := tNameOut
   if tStatus = "Recebida" then
   print(build("Ficheiro de Saida: "),tFileOut,NL,NL) >> TRACE.Detail


  print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
  print("Traduzida com Sucesso",NL) >> TRACE.Detail

  else
          if tStatus = "Erro de Traducao" then

        print(build(time("now" ,"%Y-%m-%dT%H:%M:%S"),"\t|\t")) >> TRACE.Detail
        print("Erro de Traducao",NL) >> TRACE.Detail
        print(tMensagemErrro,NL) >> TRACE.Detail
        endif
  endif
close(TRACE.Detail)
close(SYSLOG.a)


if nMainIndex = 0 then
copy(SYSLOG.a,TRACE.In)
close(SYSLOG.a)
close(TRACE.In)

 
	nMainIndex := TRACE.INDEX
else
	tCmd := build("ln -s ", sHOME, "/trace/files/In/", nMainIndex, " ", TRACE.In)
	system(tCmd)
endif




if bNaoGerarCSV = FALSE then
	close(tFileOutCSVDIVERS)
	copy(tFileOutCSVDIVERS,TRACE.CSV_Email)
	close(tFileOutCSVDIVERS)
	close(TRACE.CSV_Email)
endif


	close(tFileOutTemp)
	copy(tFileOutTemp,TRACE.Out)
	close(tFileOutTemp)
	close(TRACE.Out)

flush(TRACE)

endfunction



!===========================================================
!===========================================================

!===========================================================


!===========================================================
